
I2C_Temp_ASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ed4  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007ed4  00007ed4  0000fed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008c4  20000000  00007edc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000134  200008c8  000087a8  000108c8  2**3
                  ALLOC
  4 .stack        00002004  200009fc  000088dc  000108c8  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000108c4  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108ec  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002ade9  00000000  00000000  0001095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005a7e  00000000  00000000  0003b746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d5d9  00000000  00000000  000411c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008d8  00000000  00000000  0004e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000660  00000000  00000000  0004f078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012177  00000000  00000000  0004f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010b81  00000000  00000000  0006184f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005b563  00000000  00000000  000723d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000017ac  00000000  00000000  000cd934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002a00 	.word	0x20002a00
       4:	00001831 	.word	0x00001831
       8:	0000182d 	.word	0x0000182d
       c:	00001805 	.word	0x00001805
	...
      2c:	0000182d 	.word	0x0000182d
	...
      38:	0000182d 	.word	0x0000182d
      3c:	00001b71 	.word	0x00001b71
      40:	0000182d 	.word	0x0000182d
      44:	0000182d 	.word	0x0000182d
      48:	0000182d 	.word	0x0000182d
      4c:	0000182d 	.word	0x0000182d
      50:	0000182d 	.word	0x0000182d
      54:	0000182d 	.word	0x0000182d
      58:	0000182d 	.word	0x0000182d
      5c:	000011d9 	.word	0x000011d9
      60:	000011e9 	.word	0x000011e9
      64:	000011f9 	.word	0x000011f9
      68:	00001209 	.word	0x00001209
      6c:	00001219 	.word	0x00001219
      70:	00001229 	.word	0x00001229
      74:	00000795 	.word	0x00000795
      78:	000007a5 	.word	0x000007a5
      7c:	000007b5 	.word	0x000007b5
      80:	000007c5 	.word	0x000007c5
      84:	000007d5 	.word	0x000007d5
      88:	000007e5 	.word	0x000007e5
      8c:	000007f5 	.word	0x000007f5
      90:	00000805 	.word	0x00000805
      94:	0000182d 	.word	0x0000182d
      98:	0000182d 	.word	0x0000182d
      9c:	0000182d 	.word	0x0000182d
      a0:	0000182d 	.word	0x0000182d

000000a4 <deregister_tm_clones>:
      a4:	b508      	push	{r3, lr}
      a6:	4b06      	ldr	r3, [pc, #24]	; (c0 <deregister_tm_clones+0x1c>)
      a8:	4806      	ldr	r0, [pc, #24]	; (c4 <deregister_tm_clones+0x20>)
      aa:	3303      	adds	r3, #3
      ac:	1a1b      	subs	r3, r3, r0
      ae:	2b06      	cmp	r3, #6
      b0:	d800      	bhi.n	b4 <deregister_tm_clones+0x10>
      b2:	bd08      	pop	{r3, pc}
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <deregister_tm_clones+0x24>)
      b6:	2b00      	cmp	r3, #0
      b8:	d0fb      	beq.n	b2 <deregister_tm_clones+0xe>
      ba:	4798      	blx	r3
      bc:	e7f9      	b.n	b2 <deregister_tm_clones+0xe>
      be:	46c0      	nop			; (mov r8, r8)
      c0:	00007edc 	.word	0x00007edc
      c4:	00007edc 	.word	0x00007edc
      c8:	00000000 	.word	0x00000000

000000cc <register_tm_clones>:
      cc:	b508      	push	{r3, lr}
      ce:	4807      	ldr	r0, [pc, #28]	; (ec <register_tm_clones+0x20>)
      d0:	4b07      	ldr	r3, [pc, #28]	; (f0 <register_tm_clones+0x24>)
      d2:	1a1b      	subs	r3, r3, r0
      d4:	109b      	asrs	r3, r3, #2
      d6:	0fda      	lsrs	r2, r3, #31
      d8:	18d3      	adds	r3, r2, r3
      da:	1059      	asrs	r1, r3, #1
      dc:	d100      	bne.n	e0 <register_tm_clones+0x14>
      de:	bd08      	pop	{r3, pc}
      e0:	4a04      	ldr	r2, [pc, #16]	; (f4 <register_tm_clones+0x28>)
      e2:	2a00      	cmp	r2, #0
      e4:	d0fb      	beq.n	de <register_tm_clones+0x12>
      e6:	4790      	blx	r2
      e8:	e7f9      	b.n	de <register_tm_clones+0x12>
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	00007edc 	.word	0x00007edc
      f0:	00007edc 	.word	0x00007edc
      f4:	00000000 	.word	0x00000000

000000f8 <__do_global_dtors_aux>:
      f8:	b510      	push	{r4, lr}
      fa:	4c07      	ldr	r4, [pc, #28]	; (118 <__do_global_dtors_aux+0x20>)
      fc:	7823      	ldrb	r3, [r4, #0]
      fe:	2b00      	cmp	r3, #0
     100:	d109      	bne.n	116 <__do_global_dtors_aux+0x1e>
     102:	f7ff ffcf 	bl	a4 <deregister_tm_clones>
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <__do_global_dtors_aux+0x24>)
     108:	2b00      	cmp	r3, #0
     10a:	d002      	beq.n	112 <__do_global_dtors_aux+0x1a>
     10c:	4804      	ldr	r0, [pc, #16]	; (120 <__do_global_dtors_aux+0x28>)
     10e:	e000      	b.n	112 <__do_global_dtors_aux+0x1a>
     110:	bf00      	nop
     112:	2301      	movs	r3, #1
     114:	7023      	strb	r3, [r4, #0]
     116:	bd10      	pop	{r4, pc}
     118:	200008c8 	.word	0x200008c8
     11c:	00000000 	.word	0x00000000
     120:	00007edc 	.word	0x00007edc

00000124 <frame_dummy>:
     124:	b508      	push	{r3, lr}
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <frame_dummy+0x28>)
     128:	2b00      	cmp	r3, #0
     12a:	d003      	beq.n	134 <frame_dummy+0x10>
     12c:	4808      	ldr	r0, [pc, #32]	; (150 <frame_dummy+0x2c>)
     12e:	4909      	ldr	r1, [pc, #36]	; (154 <frame_dummy+0x30>)
     130:	e000      	b.n	134 <frame_dummy+0x10>
     132:	bf00      	nop
     134:	4808      	ldr	r0, [pc, #32]	; (158 <frame_dummy+0x34>)
     136:	6803      	ldr	r3, [r0, #0]
     138:	2b00      	cmp	r3, #0
     13a:	d003      	beq.n	144 <frame_dummy+0x20>
     13c:	4b07      	ldr	r3, [pc, #28]	; (15c <frame_dummy+0x38>)
     13e:	2b00      	cmp	r3, #0
     140:	d000      	beq.n	144 <frame_dummy+0x20>
     142:	4798      	blx	r3
     144:	f7ff ffc2 	bl	cc <register_tm_clones>
     148:	bd08      	pop	{r3, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	00000000 	.word	0x00000000
     150:	00007edc 	.word	0x00007edc
     154:	200008cc 	.word	0x200008cc
     158:	00007edc 	.word	0x00007edc
     15c:	00000000 	.word	0x00000000

00000160 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
     160:	b530      	push	{r4, r5, lr}
     162:	b08b      	sub	sp, #44	; 0x2c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     164:	aa01      	add	r2, sp, #4
     166:	2364      	movs	r3, #100	; 0x64
     168:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
     16a:	2300      	movs	r3, #0
     16c:	7113      	strb	r3, [r2, #4]
	config->run_in_standby   = false;
     16e:	7413      	strb	r3, [r2, #16]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     170:	2180      	movs	r1, #128	; 0x80
     172:	0389      	lsls	r1, r1, #14
     174:	6091      	str	r1, [r2, #8]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     176:	2101      	movs	r1, #1
     178:	4249      	negs	r1, r1
     17a:	8191      	strh	r1, [r2, #12]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     17c:	7713      	strb	r3, [r2, #28]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     17e:	6213      	str	r3, [r2, #32]
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
     180:	4b16      	ldr	r3, [pc, #88]	; (1dc <at30tse_init+0x7c>)
     182:	81d3      	strh	r3, [r2, #14]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
     184:	4b16      	ldr	r3, [pc, #88]	; (1e0 <at30tse_init+0x80>)
     186:	6153      	str	r3, [r2, #20]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
     188:	4b16      	ldr	r3, [pc, #88]	; (1e4 <at30tse_init+0x84>)
     18a:	6193      	str	r3, [r2, #24]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
     18c:	4c16      	ldr	r4, [pc, #88]	; (1e8 <at30tse_init+0x88>)
     18e:	1c20      	adds	r0, r4, #0
     190:	4916      	ldr	r1, [pc, #88]	; (1ec <at30tse_init+0x8c>)
     192:	4b17      	ldr	r3, [pc, #92]	; (1f0 <at30tse_init+0x90>)
     194:	4798      	blx	r3
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     196:	6824      	ldr	r4, [r4, #0]
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     198:	6923      	ldr	r3, [r4, #16]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     19a:	041a      	lsls	r2, r3, #16
     19c:	d4fc      	bmi.n	198 <at30tse_init+0x38>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     19e:	6822      	ldr	r2, [r4, #0]
     1a0:	2302      	movs	r3, #2
     1a2:	4313      	orrs	r3, r2
     1a4:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1a6:	4d10      	ldr	r5, [pc, #64]	; (1e8 <at30tse_init+0x88>)
     1a8:	6828      	ldr	r0, [r5, #0]
     1aa:	4b12      	ldr	r3, [pc, #72]	; (1f4 <at30tse_init+0x94>)
     1ac:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1ae:	231f      	movs	r3, #31
     1b0:	4018      	ands	r0, r3
     1b2:	2301      	movs	r3, #1
     1b4:	4083      	lsls	r3, r0
     1b6:	1c18      	adds	r0, r3, #0
     1b8:	4b0f      	ldr	r3, [pc, #60]	; (1f8 <at30tse_init+0x98>)
     1ba:	6018      	str	r0, [r3, #0]
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     1bc:	88e8      	ldrh	r0, [r5, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
     1be:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     1c0:	2110      	movs	r1, #16
     1c2:	e005      	b.n	1d0 <at30tse_init+0x70>
		timeout_counter++;
     1c4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     1c6:	4283      	cmp	r3, r0
     1c8:	d302      	bcc.n	1d0 <at30tse_init+0x70>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     1ca:	2310      	movs	r3, #16
     1cc:	8223      	strh	r3, [r4, #16]
     1ce:	e002      	b.n	1d6 <at30tse_init+0x76>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     1d0:	6922      	ldr	r2, [r4, #16]
     1d2:	420a      	tst	r2, r1
     1d4:	d0f6      	beq.n	1c4 <at30tse_init+0x64>
	i2c_master_enable(&dev_inst_at30tse75x);
}
     1d6:	b00b      	add	sp, #44	; 0x2c
     1d8:	bd30      	pop	{r4, r5, pc}
     1da:	46c0      	nop			; (mov r8, r8)
     1dc:	00002710 	.word	0x00002710
     1e0:	00080003 	.word	0x00080003
     1e4:	00090003 	.word	0x00090003
     1e8:	20000960 	.word	0x20000960
     1ec:	42001000 	.word	0x42001000
     1f0:	00000a21 	.word	0x00000a21
     1f4:	000011ad 	.word	0x000011ad
     1f8:	e000e100 	.word	0xe000e100

000001fc <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
     1fc:	b570      	push	{r4, r5, r6, lr}
     1fe:	b088      	sub	sp, #32
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
     200:	ad07      	add	r5, sp, #28
     202:	4308      	orrs	r0, r1
     204:	7028      	strb	r0, [r5, #0]
	buffer[1] = 0;
     206:	2300      	movs	r3, #0
     208:	706b      	strb	r3, [r5, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
     20a:	a904      	add	r1, sp, #16
     20c:	204f      	movs	r0, #79	; 0x4f
     20e:	8008      	strh	r0, [r1, #0]
     210:	2401      	movs	r4, #1
     212:	804c      	strh	r4, [r1, #2]
     214:	604d      	str	r5, [r1, #4]
     216:	720b      	strb	r3, [r1, #8]
     218:	724b      	strb	r3, [r1, #9]
     21a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
     21c:	ac01      	add	r4, sp, #4
     21e:	8020      	strh	r0, [r4, #0]
     220:	8062      	strh	r2, [r4, #2]
     222:	9502      	str	r5, [sp, #8]
     224:	7223      	strb	r3, [r4, #8]
     226:	7263      	strb	r3, [r4, #9]
     228:	72a3      	strb	r3, [r4, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
     22a:	4e07      	ldr	r6, [pc, #28]	; (248 <at30tse_read_register+0x4c>)
     22c:	1c30      	adds	r0, r6, #0
     22e:	4b07      	ldr	r3, [pc, #28]	; (24c <at30tse_read_register+0x50>)
     230:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
     232:	1c30      	adds	r0, r6, #0
     234:	1c21      	adds	r1, r4, #0
     236:	4b06      	ldr	r3, [pc, #24]	; (250 <at30tse_read_register+0x54>)
     238:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
     23a:	7828      	ldrb	r0, [r5, #0]
     23c:	0200      	lsls	r0, r0, #8
     23e:	786b      	ldrb	r3, [r5, #1]
     240:	4318      	orrs	r0, r3
}
     242:	b008      	add	sp, #32
     244:	bd70      	pop	{r4, r5, r6, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	20000960 	.word	0x20000960
     24c:	00000be1 	.word	0x00000be1
     250:	00000ba1 	.word	0x00000ba1

00000254 <at30tse_write_register>:
 * \param[in] reg_type Type of the register (Volatile or Non-volatile).
 * \param[in] reg_size Register size.
 * \param[in] reg_value Value to be written to reg.
 */
void at30tse_write_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size, uint16_t reg_value)
{
     254:	b510      	push	{r4, lr}
     256:	b084      	sub	sp, #16
	uint8_t data[3];
	data[0] = reg | reg_type;
     258:	ac03      	add	r4, sp, #12
     25a:	4308      	orrs	r0, r1
     25c:	7020      	strb	r0, [r4, #0]
	data[1] = 0x00FF & (reg_value >> 8);
     25e:	0a19      	lsrs	r1, r3, #8
     260:	7061      	strb	r1, [r4, #1]
	data[2] = 0x00FF & reg_value;
     262:	70a3      	strb	r3, [r4, #2]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet transfer = {
     264:	234f      	movs	r3, #79	; 0x4f
     266:	4669      	mov	r1, sp
     268:	800b      	strh	r3, [r1, #0]
     26a:	3201      	adds	r2, #1
     26c:	804a      	strh	r2, [r1, #2]
     26e:	9401      	str	r4, [sp, #4]
     270:	2300      	movs	r3, #0
     272:	720b      	strb	r3, [r1, #8]
     274:	724b      	strb	r3, [r1, #9]
     276:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait(&dev_inst_at30tse75x, &transfer);
     278:	4802      	ldr	r0, [pc, #8]	; (284 <at30tse_write_register+0x30>)
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <at30tse_write_register+0x34>)
     27c:	4798      	blx	r3
}
     27e:	b004      	add	sp, #16
     280:	bd10      	pop	{r4, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	20000960 	.word	0x20000960
     288:	00000bc1 	.word	0x00000bc1

0000028c <at30tse_write_config_register>:
 * \brief Writes the configuration register reg with the value passed
 *
 * \param[in] value Register value to be written.
 */
void at30tse_write_config_register(uint16_t value)
{
     28c:	b538      	push	{r3, r4, r5, lr}
     28e:	1c04      	adds	r4, r0, #0
	at30tse_write_register(AT30TSE_CONFIG_REG,
     290:	2001      	movs	r0, #1
     292:	2100      	movs	r1, #0
     294:	2201      	movs	r2, #1
     296:	1c23      	adds	r3, r4, #0
     298:	4d03      	ldr	r5, [pc, #12]	; (2a8 <at30tse_write_config_register+0x1c>)
     29a:	47a8      	blx	r5
							AT30TSE_NON_VOLATILE_REG,
							AT30TSE_CONFIG_REG_SIZE-1,
							value);

	resolution = ( value >> AT30TSE_CONFIG_RES_Pos ) & ( AT30TSE_CONFIG_RES_Msk >> AT30TSE_CONFIG_RES_Pos);
     29c:	0464      	lsls	r4, r4, #17
     29e:	0fa4      	lsrs	r4, r4, #30
     2a0:	4b02      	ldr	r3, [pc, #8]	; (2ac <at30tse_write_config_register+0x20>)
     2a2:	701c      	strb	r4, [r3, #0]

}
     2a4:	bd38      	pop	{r3, r4, r5, pc}
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	00000255 	.word	0x00000255
     2ac:	200008e4 	.word	0x200008e4

000002b0 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
     2b0:	b510      	push	{r4, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
     2b2:	2000      	movs	r0, #0
     2b4:	2100      	movs	r1, #0
     2b6:	2202      	movs	r2, #2
     2b8:	4b2d      	ldr	r3, [pc, #180]	; (370 <at30tse_read_temperature+0xc0>)
     2ba:	4798      	blx	r3
     2bc:	1c01      	adds	r1, r0, #0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
     2be:	2201      	movs	r2, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
     2c0:	0403      	lsls	r3, r0, #16
     2c2:	d502      	bpl.n	2ca <at30tse_read_temperature+0x1a>
		sign *= -1;
		data &= ~(1 << 15);
     2c4:	0440      	lsls	r0, r0, #17
     2c6:	0c41      	lsrs	r1, r0, #17
	double temperature = 0;
	int8_t sign = 1;

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
		sign *= -1;
     2c8:	22ff      	movs	r2, #255	; 0xff
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
     2ca:	4b2a      	ldr	r3, [pc, #168]	; (374 <at30tse_read_temperature+0xc4>)
     2cc:	781b      	ldrb	r3, [r3, #0]
     2ce:	2b01      	cmp	r3, #1
     2d0:	d012      	beq.n	2f8 <at30tse_read_temperature+0x48>
     2d2:	2b00      	cmp	r3, #0
     2d4:	d004      	beq.n	2e0 <at30tse_read_temperature+0x30>
     2d6:	2b02      	cmp	r3, #2
     2d8:	d01a      	beq.n	310 <at30tse_read_temperature+0x60>
     2da:	2b03      	cmp	r3, #3
     2dc:	d024      	beq.n	328 <at30tse_read_temperature+0x78>
     2de:	e02f      	b.n	340 <at30tse_read_temperature+0x90>
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
     2e0:	09c9      	lsrs	r1, r1, #7
			temperature = data * sign * 0.5;
     2e2:	b289      	uxth	r1, r1
     2e4:	b252      	sxtb	r2, r2
     2e6:	1c10      	adds	r0, r2, #0
     2e8:	4348      	muls	r0, r1
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <at30tse_read_temperature+0xc8>)
     2ec:	4798      	blx	r3
     2ee:	4b17      	ldr	r3, [pc, #92]	; (34c <at30tse_read_temperature+0x9c>)
     2f0:	4a15      	ldr	r2, [pc, #84]	; (348 <at30tse_read_temperature+0x98>)
     2f2:	4c22      	ldr	r4, [pc, #136]	; (37c <at30tse_read_temperature+0xcc>)
     2f4:	47a0      	blx	r4
			break;
     2f6:	e025      	b.n	344 <at30tse_read_temperature+0x94>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
     2f8:	0989      	lsrs	r1, r1, #6
			temperature = data * sign * 0.25;
     2fa:	b289      	uxth	r1, r1
     2fc:	b252      	sxtb	r2, r2
     2fe:	1c10      	adds	r0, r2, #0
     300:	4348      	muls	r0, r1
     302:	4b1d      	ldr	r3, [pc, #116]	; (378 <at30tse_read_temperature+0xc8>)
     304:	4798      	blx	r3
     306:	4a12      	ldr	r2, [pc, #72]	; (350 <at30tse_read_temperature+0xa0>)
     308:	4b12      	ldr	r3, [pc, #72]	; (354 <at30tse_read_temperature+0xa4>)
     30a:	4c1c      	ldr	r4, [pc, #112]	; (37c <at30tse_read_temperature+0xcc>)
     30c:	47a0      	blx	r4
			break;
     30e:	e019      	b.n	344 <at30tse_read_temperature+0x94>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
     310:	0949      	lsrs	r1, r1, #5
			temperature = data * sign * 0.125;
     312:	b289      	uxth	r1, r1
     314:	b252      	sxtb	r2, r2
     316:	1c10      	adds	r0, r2, #0
     318:	4348      	muls	r0, r1
     31a:	4b17      	ldr	r3, [pc, #92]	; (378 <at30tse_read_temperature+0xc8>)
     31c:	4798      	blx	r3
     31e:	4a0e      	ldr	r2, [pc, #56]	; (358 <at30tse_read_temperature+0xa8>)
     320:	4b0e      	ldr	r3, [pc, #56]	; (35c <at30tse_read_temperature+0xac>)
     322:	4c16      	ldr	r4, [pc, #88]	; (37c <at30tse_read_temperature+0xcc>)
     324:	47a0      	blx	r4
			break;
     326:	e00d      	b.n	344 <at30tse_read_temperature+0x94>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
     328:	0909      	lsrs	r1, r1, #4
			temperature = data * sign * 0.0625;
     32a:	b289      	uxth	r1, r1
     32c:	b252      	sxtb	r2, r2
     32e:	1c10      	adds	r0, r2, #0
     330:	4348      	muls	r0, r1
     332:	4b11      	ldr	r3, [pc, #68]	; (378 <at30tse_read_temperature+0xc8>)
     334:	4798      	blx	r3
     336:	4a0a      	ldr	r2, [pc, #40]	; (360 <at30tse_read_temperature+0xb0>)
     338:	4b0a      	ldr	r3, [pc, #40]	; (364 <at30tse_read_temperature+0xb4>)
     33a:	4c10      	ldr	r4, [pc, #64]	; (37c <at30tse_read_temperature+0xcc>)
     33c:	47a0      	blx	r4
			break;
     33e:	e001      	b.n	344 <at30tse_read_temperature+0x94>
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
     340:	4809      	ldr	r0, [pc, #36]	; (368 <at30tse_read_temperature+0xb8>)
     342:	490a      	ldr	r1, [pc, #40]	; (36c <at30tse_read_temperature+0xbc>)
			break;
		default:
			break;
	}
	return temperature;
}
     344:	bd10      	pop	{r4, pc}
     346:	46c0      	nop			; (mov r8, r8)
     348:	00000000 	.word	0x00000000
     34c:	3fe00000 	.word	0x3fe00000
     350:	00000000 	.word	0x00000000
     354:	3fd00000 	.word	0x3fd00000
     358:	00000000 	.word	0x00000000
     35c:	3fc00000 	.word	0x3fc00000
     360:	00000000 	.word	0x00000000
     364:	3fb00000 	.word	0x3fb00000
	...
     370:	000001fd 	.word	0x000001fd
     374:	200008e4 	.word	0x200008e4
     378:	00002b89 	.word	0x00002b89
     37c:	00002665 	.word	0x00002665

00000380 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     380:	b5f0      	push	{r4, r5, r6, r7, lr}
     382:	465f      	mov	r7, fp
     384:	4656      	mov	r6, sl
     386:	464d      	mov	r5, r9
     388:	4644      	mov	r4, r8
     38a:	b4f0      	push	{r4, r5, r6, r7}
     38c:	b08d      	sub	sp, #52	; 0x34
     38e:	1c05      	adds	r5, r0, #0
     390:	1c0c      	adds	r4, r1, #0
     392:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     394:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     396:	1c08      	adds	r0, r1, #0
     398:	4b79      	ldr	r3, [pc, #484]	; (580 <usart_init+0x200>)
     39a:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     39c:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     39e:	2305      	movs	r3, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     3a0:	07ca      	lsls	r2, r1, #31
     3a2:	d500      	bpl.n	3a6 <usart_init+0x26>
     3a4:	e0e3      	b.n	56e <usart_init+0x1ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     3a6:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     3a8:	231c      	movs	r3, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     3aa:	0797      	lsls	r7, r2, #30
     3ac:	d500      	bpl.n	3b0 <usart_init+0x30>
     3ae:	e0de      	b.n	56e <usart_init+0x1ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3b0:	4b74      	ldr	r3, [pc, #464]	; (584 <usart_init+0x204>)
     3b2:	6a19      	ldr	r1, [r3, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     3b4:	1c82      	adds	r2, r0, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     3b6:	2701      	movs	r7, #1
     3b8:	4097      	lsls	r7, r2
     3ba:	1c3a      	adds	r2, r7, #0
     3bc:	430a      	orrs	r2, r1
     3be:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     3c0:	a90b      	add	r1, sp, #44	; 0x2c
     3c2:	7f73      	ldrb	r3, [r6, #29]
     3c4:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     3c6:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     3c8:	b2c7      	uxtb	r7, r0
     3ca:	1c38      	adds	r0, r7, #0
     3cc:	4b6e      	ldr	r3, [pc, #440]	; (588 <usart_init+0x208>)
     3ce:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     3d0:	1c38      	adds	r0, r7, #0
     3d2:	4b6e      	ldr	r3, [pc, #440]	; (58c <usart_init+0x20c>)
     3d4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     3d6:	7f70      	ldrb	r0, [r6, #29]
     3d8:	2100      	movs	r1, #0
     3da:	4b6d      	ldr	r3, [pc, #436]	; (590 <usart_init+0x210>)
     3dc:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     3de:	7af3      	ldrb	r3, [r6, #11]
     3e0:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     3e2:	7d33      	ldrb	r3, [r6, #20]
     3e4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     3e6:	7d73      	ldrb	r3, [r6, #21]
     3e8:	71eb      	strb	r3, [r5, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     3ea:	682f      	ldr	r7, [r5, #0]
     3ec:	9703      	str	r7, [sp, #12]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     3ee:	1c38      	adds	r0, r7, #0
     3f0:	4b63      	ldr	r3, [pc, #396]	; (580 <usart_init+0x200>)
     3f2:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     3f4:	300d      	adds	r0, #13

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     3f6:	2200      	movs	r2, #0
     3f8:	466b      	mov	r3, sp
     3fa:	82da      	strh	r2, [r3, #22]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     3fc:	6831      	ldr	r1, [r6, #0]
     3fe:	4689      	mov	r9, r1
		(uint32_t)config->mux_setting |
     400:	68f2      	ldr	r2, [r6, #12]
     402:	4692      	mov	sl, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     404:	7db3      	ldrb	r3, [r6, #22]
     406:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     408:	6873      	ldr	r3, [r6, #4]
     40a:	2b00      	cmp	r3, #0
     40c:	d013      	beq.n	436 <usart_init+0xb6>
     40e:	2280      	movs	r2, #128	; 0x80
     410:	0552      	lsls	r2, r2, #21
     412:	4293      	cmp	r3, r2
     414:	d12b      	bne.n	46e <usart_init+0xee>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     416:	7df3      	ldrb	r3, [r6, #23]
     418:	2b00      	cmp	r3, #0
     41a:	d001      	beq.n	420 <usart_init+0xa0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     41c:	682a      	ldr	r2, [r5, #0]
     41e:	e02a      	b.n	476 <usart_init+0xf6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     420:	6937      	ldr	r7, [r6, #16]
     422:	b2c0      	uxtb	r0, r0
     424:	4b5b      	ldr	r3, [pc, #364]	; (594 <usart_init+0x214>)
     426:	4798      	blx	r3
     428:	1c01      	adds	r1, r0, #0
     42a:	1c38      	adds	r0, r7, #0
     42c:	466a      	mov	r2, sp
     42e:	3216      	adds	r2, #22
     430:	4b59      	ldr	r3, [pc, #356]	; (598 <usart_init+0x218>)
     432:	4798      	blx	r3
     434:	e01c      	b.n	470 <usart_init+0xf0>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     436:	7df3      	ldrb	r3, [r6, #23]
     438:	2b00      	cmp	r3, #0
     43a:	d009      	beq.n	450 <usart_init+0xd0>
				status_code =
     43c:	2310      	movs	r3, #16
     43e:	9300      	str	r3, [sp, #0]
     440:	6930      	ldr	r0, [r6, #16]
     442:	69b1      	ldr	r1, [r6, #24]
     444:	466a      	mov	r2, sp
     446:	3216      	adds	r2, #22
     448:	2300      	movs	r3, #0
     44a:	4f54      	ldr	r7, [pc, #336]	; (59c <usart_init+0x21c>)
     44c:	47b8      	blx	r7
     44e:	e00f      	b.n	470 <usart_init+0xf0>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     450:	6931      	ldr	r1, [r6, #16]
     452:	468b      	mov	fp, r1
     454:	b2c0      	uxtb	r0, r0
     456:	4b4f      	ldr	r3, [pc, #316]	; (594 <usart_init+0x214>)
     458:	4798      	blx	r3
     45a:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     45c:	2310      	movs	r3, #16
     45e:	9300      	str	r3, [sp, #0]
     460:	4658      	mov	r0, fp
     462:	466a      	mov	r2, sp
     464:	3216      	adds	r2, #22
     466:	2300      	movs	r3, #0
     468:	4f4c      	ldr	r7, [pc, #304]	; (59c <usart_init+0x21c>)
     46a:	47b8      	blx	r7
     46c:	e000      	b.n	470 <usart_init+0xf0>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     46e:	2000      	movs	r0, #0
     470:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
     472:	d17c      	bne.n	56e <usart_init+0x1ee>
     474:	e7d2      	b.n	41c <usart_init+0x9c>

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     476:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     478:	0418      	lsls	r0, r3, #16
     47a:	d4fc      	bmi.n	476 <usart_init+0xf6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     47c:	466b      	mov	r3, sp
     47e:	3316      	adds	r3, #22
     480:	881b      	ldrh	r3, [r3, #0]
     482:	9f03      	ldr	r7, [sp, #12]
     484:	817b      	strh	r3, [r7, #10]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     486:	4651      	mov	r1, sl
     488:	4648      	mov	r0, r9
     48a:	4301      	orrs	r1, r0
     48c:	6872      	ldr	r2, [r6, #4]
     48e:	4311      	orrs	r1, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     490:	4647      	mov	r7, r8
     492:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     494:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
     496:	7df3      	ldrb	r3, [r6, #23]
     498:	2b00      	cmp	r3, #0
     49a:	d101      	bne.n	4a0 <usart_init+0x120>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
     49c:	2304      	movs	r3, #4
     49e:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     4a0:	7d30      	ldrb	r0, [r6, #20]
     4a2:	0440      	lsls	r0, r0, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     4a4:	7d73      	ldrb	r3, [r6, #21]
     4a6:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     4a8:	4318      	orrs	r0, r3
     4aa:	7af2      	ldrb	r2, [r6, #11]
     4ac:	7ab3      	ldrb	r3, [r6, #10]
     4ae:	4313      	orrs	r3, r2
     4b0:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     4b2:	8933      	ldrh	r3, [r6, #8]
     4b4:	2bff      	cmp	r3, #255	; 0xff
     4b6:	d003      	beq.n	4c0 <usart_init+0x140>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     4b8:	2280      	movs	r2, #128	; 0x80
     4ba:	0452      	lsls	r2, r2, #17
     4bc:	4311      	orrs	r1, r2
#endif
		ctrlb |= config->parity;
     4be:	4318      	orrs	r0, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     4c0:	7f33      	ldrb	r3, [r6, #28]
     4c2:	2b00      	cmp	r3, #0
     4c4:	d103      	bne.n	4ce <usart_init+0x14e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     4c6:	4b36      	ldr	r3, [pc, #216]	; (5a0 <usart_init+0x220>)
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	039a      	lsls	r2, r3, #14
     4cc:	d501      	bpl.n	4d2 <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     4ce:	2380      	movs	r3, #128	; 0x80
     4d0:	4319      	orrs	r1, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     4d2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     4d4:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     4d6:	041f      	lsls	r7, r3, #16
     4d8:	d4fc      	bmi.n	4d4 <usart_init+0x154>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     4da:	9f03      	ldr	r7, [sp, #12]
     4dc:	6078      	str	r0, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     4de:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     4e0:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     4e2:	0418      	lsls	r0, r3, #16
     4e4:	d4fc      	bmi.n	4e0 <usart_init+0x160>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     4e6:	9f03      	ldr	r7, [sp, #12]
     4e8:	6039      	str	r1, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4ea:	ab0a      	add	r3, sp, #40	; 0x28
     4ec:	2280      	movs	r2, #128	; 0x80
     4ee:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4f0:	2200      	movs	r2, #0
     4f2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4f4:	2101      	movs	r1, #1
     4f6:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     4f8:	70da      	strb	r2, [r3, #3]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
     4fa:	6a30      	ldr	r0, [r6, #32]
     4fc:	9006      	str	r0, [sp, #24]
     4fe:	6a71      	ldr	r1, [r6, #36]	; 0x24
     500:	9107      	str	r1, [sp, #28]
     502:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     504:	9208      	str	r2, [sp, #32]
     506:	6af6      	ldr	r6, [r6, #44]	; 0x2c
     508:	9609      	str	r6, [sp, #36]	; 0x24
     50a:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     50c:	1c1e      	adds	r6, r3, #0
     50e:	b2f9      	uxtb	r1, r7
     510:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     512:	aa06      	add	r2, sp, #24
     514:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     516:	2800      	cmp	r0, #0
     518:	d102      	bne.n	520 <usart_init+0x1a0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     51a:	1c20      	adds	r0, r4, #0
     51c:	4b21      	ldr	r3, [pc, #132]	; (5a4 <usart_init+0x224>)
     51e:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     520:	1c41      	adds	r1, r0, #1
     522:	d005      	beq.n	530 <usart_init+0x1b0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     524:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     526:	0c00      	lsrs	r0, r0, #16
     528:	b2c0      	uxtb	r0, r0
     52a:	1c31      	adds	r1, r6, #0
     52c:	4a1e      	ldr	r2, [pc, #120]	; (5a8 <usart_init+0x228>)
     52e:	4790      	blx	r2
     530:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     532:	2f04      	cmp	r7, #4
     534:	d1eb      	bne.n	50e <usart_init+0x18e>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     536:	2300      	movs	r3, #0
     538:	60ab      	str	r3, [r5, #8]
     53a:	60eb      	str	r3, [r5, #12]
     53c:	612b      	str	r3, [r5, #16]
	}

	module->tx_buffer_ptr              = NULL;
     53e:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     540:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     542:	2200      	movs	r2, #0
     544:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     546:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     548:	2320      	movs	r3, #32
     54a:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     54c:	2321      	movs	r3, #33	; 0x21
     54e:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     550:	2322      	movs	r3, #34	; 0x22
     552:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     554:	2323      	movs	r3, #35	; 0x23
     556:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     558:	6828      	ldr	r0, [r5, #0]
     55a:	4b09      	ldr	r3, [pc, #36]	; (580 <usart_init+0x200>)
     55c:	4798      	blx	r3
     55e:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     560:	4912      	ldr	r1, [pc, #72]	; (5ac <usart_init+0x22c>)
     562:	4b13      	ldr	r3, [pc, #76]	; (5b0 <usart_init+0x230>)
     564:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     566:	00a4      	lsls	r4, r4, #2
     568:	4b12      	ldr	r3, [pc, #72]	; (5b4 <usart_init+0x234>)
     56a:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     56c:	2300      	movs	r3, #0
}
     56e:	1c18      	adds	r0, r3, #0
     570:	b00d      	add	sp, #52	; 0x34
     572:	bc3c      	pop	{r2, r3, r4, r5}
     574:	4690      	mov	r8, r2
     576:	4699      	mov	r9, r3
     578:	46a2      	mov	sl, r4
     57a:	46ab      	mov	fp, r5
     57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	00001135 	.word	0x00001135
     584:	40000400 	.word	0x40000400
     588:	000016f9 	.word	0x000016f9
     58c:	00001669 	.word	0x00001669
     590:	00000f59 	.word	0x00000f59
     594:	00001715 	.word	0x00001715
     598:	00000e71 	.word	0x00000e71
     59c:	00000ea1 	.word	0x00000ea1
     5a0:	41002000 	.word	0x41002000
     5a4:	00000fa9 	.word	0x00000fa9
     5a8:	000017d5 	.word	0x000017d5
     5ac:	00000601 	.word	0x00000601
     5b0:	00001171 	.word	0x00001171
     5b4:	200009a8 	.word	0x200009a8

000005b8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     5b8:	1c93      	adds	r3, r2, #2
     5ba:	009b      	lsls	r3, r3, #2
     5bc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     5be:	2301      	movs	r3, #1
     5c0:	4093      	lsls	r3, r2
     5c2:	1c1a      	adds	r2, r3, #0
     5c4:	2320      	movs	r3, #32
     5c6:	5cc1      	ldrb	r1, [r0, r3]
     5c8:	430a      	orrs	r2, r1
     5ca:	54c2      	strb	r2, [r0, r3]
}
     5cc:	4770      	bx	lr
     5ce:	46c0      	nop			; (mov r8, r8)

000005d0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     5d0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     5d2:	2317      	movs	r3, #23
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
     5d4:	2a00      	cmp	r2, #0
     5d6:	d011      	beq.n	5fc <usart_write_buffer_job+0x2c>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     5d8:	69c4      	ldr	r4, [r0, #28]
     5da:	0c24      	lsrs	r4, r4, #16
		return STATUS_BUSY;
     5dc:	2305      	movs	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     5de:	2c00      	cmp	r4, #0
     5e0:	d10c      	bne.n	5fc <usart_write_buffer_job+0x2c>
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     5e2:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     5e4:	231c      	movs	r3, #28
	if (module->remaining_tx_buffer_length > 0) {
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     5e6:	2c00      	cmp	r4, #0
     5e8:	d008      	beq.n	5fc <usart_write_buffer_job+0x2c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     5ea:	6803      	ldr	r3, [r0, #0]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     5ec:	83c2      	strh	r2, [r0, #30]
	module->tx_buffer_ptr              = tx_data;
     5ee:	6181      	str	r1, [r0, #24]
	module->tx_status                  = STATUS_BUSY;
     5f0:	2105      	movs	r1, #5
     5f2:	2223      	movs	r2, #35	; 0x23
     5f4:	5481      	strb	r1, [r0, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     5f6:	2201      	movs	r2, #1
     5f8:	735a      	strb	r2, [r3, #13]
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);

	return STATUS_OK;
     5fa:	2300      	movs	r3, #0
}
     5fc:	1c18      	adds	r0, r3, #0
     5fe:	bd10      	pop	{r4, pc}

00000600 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     602:	0080      	lsls	r0, r0, #2
     604:	4b4b      	ldr	r3, [pc, #300]	; (734 <_usart_interrupt_handler+0x134>)
     606:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     608:	682c      	ldr	r4, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     60a:	6923      	ldr	r3, [r4, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     60c:	0419      	lsls	r1, r3, #16
     60e:	d4fc      	bmi.n	60a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     610:	68e6      	ldr	r6, [r4, #12]
     612:	0c36      	lsrs	r6, r6, #16
	interrupt_status &= usart_hw->INTENSET.reg;
     614:	68e3      	ldr	r3, [r4, #12]
     616:	041b      	lsls	r3, r3, #16
     618:	0e1b      	lsrs	r3, r3, #24
     61a:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     61c:	2321      	movs	r3, #33	; 0x21
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     61e:	5ceb      	ldrb	r3, [r5, r3]
     620:	2220      	movs	r2, #32
     622:	5caa      	ldrb	r2, [r5, r2]
     624:	1c17      	adds	r7, r2, #0
     626:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     628:	07f2      	lsls	r2, r6, #31
     62a:	d520      	bpl.n	66e <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
     62c:	69eb      	ldr	r3, [r5, #28]
     62e:	0c1b      	lsrs	r3, r3, #16
     630:	d01b      	beq.n	66a <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     632:	69ab      	ldr	r3, [r5, #24]
     634:	781a      	ldrb	r2, [r3, #0]
     636:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     638:	1c59      	adds	r1, r3, #1
     63a:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     63c:	7969      	ldrb	r1, [r5, #5]
     63e:	2901      	cmp	r1, #1
     640:	d104      	bne.n	64c <_usart_interrupt_handler+0x4c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     642:	7859      	ldrb	r1, [r3, #1]
     644:	0209      	lsls	r1, r1, #8
     646:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     648:	3302      	adds	r3, #2
     64a:	61ab      	str	r3, [r5, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     64c:	05d3      	lsls	r3, r2, #23
     64e:	0ddb      	lsrs	r3, r3, #23
     650:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     652:	69eb      	ldr	r3, [r5, #28]
     654:	0c1b      	lsrs	r3, r3, #16
     656:	3b01      	subs	r3, #1
     658:	b29b      	uxth	r3, r3
     65a:	83eb      	strh	r3, [r5, #30]
     65c:	2b00      	cmp	r3, #0
     65e:	d106      	bne.n	66e <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     660:	2301      	movs	r3, #1
     662:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     664:	2302      	movs	r3, #2
     666:	7363      	strb	r3, [r4, #13]
     668:	e001      	b.n	66e <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     66a:	2301      	movs	r3, #1
     66c:	7323      	strb	r3, [r4, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     66e:	07b3      	lsls	r3, r6, #30
     670:	d509      	bpl.n	686 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     672:	2302      	movs	r3, #2
     674:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     676:	2200      	movs	r2, #0
     678:	2323      	movs	r3, #35	; 0x23
     67a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     67c:	07f9      	lsls	r1, r7, #31
     67e:	d502      	bpl.n	686 <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     680:	1c28      	adds	r0, r5, #0
     682:	68aa      	ldr	r2, [r5, #8]
     684:	4790      	blx	r2

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     686:	0773      	lsls	r3, r6, #29
     688:	d552      	bpl.n	730 <_usart_interrupt_handler+0x130>

		if (module->remaining_rx_buffer_length) {
     68a:	69eb      	ldr	r3, [r5, #28]
     68c:	b29b      	uxth	r3, r3
     68e:	2b00      	cmp	r3, #0
     690:	d04c      	beq.n	72c <_usart_interrupt_handler+0x12c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     692:	6923      	ldr	r3, [r4, #16]
     694:	b2db      	uxtb	r3, r3

			/* Check if an error has occurred during the receiving */
			if (error_code) {
     696:	0759      	lsls	r1, r3, #29
     698:	d025      	beq.n	6e6 <_usart_interrupt_handler+0xe6>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     69a:	079a      	lsls	r2, r3, #30
     69c:	d508      	bpl.n	6b0 <_usart_interrupt_handler+0xb0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     69e:	221a      	movs	r2, #26
     6a0:	2322      	movs	r3, #34	; 0x22
     6a2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     6a4:	6922      	ldr	r2, [r4, #16]
     6a6:	b292      	uxth	r2, r2
     6a8:	2302      	movs	r3, #2
     6aa:	4313      	orrs	r3, r2
     6ac:	8223      	strh	r3, [r4, #16]
     6ae:	e014      	b.n	6da <_usart_interrupt_handler+0xda>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     6b0:	0759      	lsls	r1, r3, #29
     6b2:	d508      	bpl.n	6c6 <_usart_interrupt_handler+0xc6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     6b4:	221e      	movs	r2, #30
     6b6:	2322      	movs	r3, #34	; 0x22
     6b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     6ba:	6922      	ldr	r2, [r4, #16]
     6bc:	b292      	uxth	r2, r2
     6be:	2304      	movs	r3, #4
     6c0:	4313      	orrs	r3, r2
     6c2:	8223      	strh	r3, [r4, #16]
     6c4:	e009      	b.n	6da <_usart_interrupt_handler+0xda>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     6c6:	07da      	lsls	r2, r3, #31
     6c8:	d507      	bpl.n	6da <_usart_interrupt_handler+0xda>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     6ca:	2213      	movs	r2, #19
     6cc:	2322      	movs	r3, #34	; 0x22
     6ce:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     6d0:	6922      	ldr	r2, [r4, #16]
     6d2:	b292      	uxth	r2, r2
     6d4:	2301      	movs	r3, #1
     6d6:	4313      	orrs	r3, r2
     6d8:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     6da:	077b      	lsls	r3, r7, #29
     6dc:	d528      	bpl.n	730 <_usart_interrupt_handler+0x130>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     6de:	692b      	ldr	r3, [r5, #16]
     6e0:	1c28      	adds	r0, r5, #0
     6e2:	4798      	blx	r3
     6e4:	e024      	b.n	730 <_usart_interrupt_handler+0x130>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     6e6:	69a2      	ldr	r2, [r4, #24]
     6e8:	05d2      	lsls	r2, r2, #23
     6ea:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     6ec:	b2d3      	uxtb	r3, r2
     6ee:	6969      	ldr	r1, [r5, #20]
     6f0:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     6f2:	696b      	ldr	r3, [r5, #20]
     6f4:	1c59      	adds	r1, r3, #1
     6f6:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     6f8:	7969      	ldrb	r1, [r5, #5]
     6fa:	2901      	cmp	r1, #1
     6fc:	d104      	bne.n	708 <_usart_interrupt_handler+0x108>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     6fe:	0a12      	lsrs	r2, r2, #8
     700:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     702:	696b      	ldr	r3, [r5, #20]
     704:	3301      	adds	r3, #1
     706:	616b      	str	r3, [r5, #20]
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     708:	69eb      	ldr	r3, [r5, #28]
     70a:	b29b      	uxth	r3, r3
     70c:	3b01      	subs	r3, #1
     70e:	b29b      	uxth	r3, r3
     710:	83ab      	strh	r3, [r5, #28]
     712:	2b00      	cmp	r3, #0
     714:	d10c      	bne.n	730 <_usart_interrupt_handler+0x130>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     716:	2304      	movs	r3, #4
     718:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     71a:	2200      	movs	r2, #0
     71c:	2322      	movs	r3, #34	; 0x22
     71e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     720:	07ba      	lsls	r2, r7, #30
     722:	d505      	bpl.n	730 <_usart_interrupt_handler+0x130>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     724:	68eb      	ldr	r3, [r5, #12]
     726:	1c28      	adds	r0, r5, #0
     728:	4798      	blx	r3
     72a:	e001      	b.n	730 <_usart_interrupt_handler+0x130>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     72c:	2304      	movs	r3, #4
     72e:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	200009a8 	.word	0x200009a8

00000738 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     738:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     73a:	0080      	lsls	r0, r0, #2
     73c:	4b14      	ldr	r3, [pc, #80]	; (790 <_tc_interrupt_handler+0x58>)
     73e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     740:	6823      	ldr	r3, [r4, #0]
     742:	68dd      	ldr	r5, [r3, #12]
     744:	0c2d      	lsrs	r5, r5, #16
     746:	7e23      	ldrb	r3, [r4, #24]
     748:	401d      	ands	r5, r3
     74a:	7e63      	ldrb	r3, [r4, #25]
     74c:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     74e:	07ea      	lsls	r2, r5, #31
     750:	d505      	bpl.n	75e <_tc_interrupt_handler+0x26>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     752:	1c20      	adds	r0, r4, #0
     754:	68a3      	ldr	r3, [r4, #8]
     756:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     758:	2301      	movs	r3, #1
     75a:	6822      	ldr	r2, [r4, #0]
     75c:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     75e:	07ab      	lsls	r3, r5, #30
     760:	d505      	bpl.n	76e <_tc_interrupt_handler+0x36>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     762:	1c20      	adds	r0, r4, #0
     764:	68e2      	ldr	r2, [r4, #12]
     766:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     768:	2302      	movs	r3, #2
     76a:	6822      	ldr	r2, [r4, #0]
     76c:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     76e:	06eb      	lsls	r3, r5, #27
     770:	d505      	bpl.n	77e <_tc_interrupt_handler+0x46>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     772:	1c20      	adds	r0, r4, #0
     774:	6922      	ldr	r2, [r4, #16]
     776:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     778:	2310      	movs	r3, #16
     77a:	6822      	ldr	r2, [r4, #0]
     77c:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     77e:	06ab      	lsls	r3, r5, #26
     780:	d505      	bpl.n	78e <_tc_interrupt_handler+0x56>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     782:	1c20      	adds	r0, r4, #0
     784:	6962      	ldr	r2, [r4, #20]
     786:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     788:	6823      	ldr	r3, [r4, #0]
     78a:	2220      	movs	r2, #32
     78c:	739a      	strb	r2, [r3, #14]
	}
}
     78e:	bd38      	pop	{r3, r4, r5, pc}
     790:	20000988 	.word	0x20000988

00000794 <TC0_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     794:	b508      	push	{r3, lr}
     796:	2000      	movs	r0, #0
     798:	4b01      	ldr	r3, [pc, #4]	; (7a0 <TC0_Handler+0xc>)
     79a:	4798      	blx	r3
     79c:	bd08      	pop	{r3, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	00000739 	.word	0x00000739

000007a4 <TC1_Handler>:
     7a4:	b508      	push	{r3, lr}
     7a6:	2001      	movs	r0, #1
     7a8:	4b01      	ldr	r3, [pc, #4]	; (7b0 <TC1_Handler+0xc>)
     7aa:	4798      	blx	r3
     7ac:	bd08      	pop	{r3, pc}
     7ae:	46c0      	nop			; (mov r8, r8)
     7b0:	00000739 	.word	0x00000739

000007b4 <TC2_Handler>:
     7b4:	b508      	push	{r3, lr}
     7b6:	2002      	movs	r0, #2
     7b8:	4b01      	ldr	r3, [pc, #4]	; (7c0 <TC2_Handler+0xc>)
     7ba:	4798      	blx	r3
     7bc:	bd08      	pop	{r3, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000739 	.word	0x00000739

000007c4 <TC3_Handler>:
     7c4:	b508      	push	{r3, lr}
     7c6:	2003      	movs	r0, #3
     7c8:	4b01      	ldr	r3, [pc, #4]	; (7d0 <TC3_Handler+0xc>)
     7ca:	4798      	blx	r3
     7cc:	bd08      	pop	{r3, pc}
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	00000739 	.word	0x00000739

000007d4 <TC4_Handler>:
     7d4:	b508      	push	{r3, lr}
     7d6:	2004      	movs	r0, #4
     7d8:	4b01      	ldr	r3, [pc, #4]	; (7e0 <TC4_Handler+0xc>)
     7da:	4798      	blx	r3
     7dc:	bd08      	pop	{r3, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	00000739 	.word	0x00000739

000007e4 <TC5_Handler>:
     7e4:	b508      	push	{r3, lr}
     7e6:	2005      	movs	r0, #5
     7e8:	4b01      	ldr	r3, [pc, #4]	; (7f0 <TC5_Handler+0xc>)
     7ea:	4798      	blx	r3
     7ec:	bd08      	pop	{r3, pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	00000739 	.word	0x00000739

000007f4 <TC6_Handler>:
     7f4:	b508      	push	{r3, lr}
     7f6:	2006      	movs	r0, #6
     7f8:	4b01      	ldr	r3, [pc, #4]	; (800 <TC6_Handler+0xc>)
     7fa:	4798      	blx	r3
     7fc:	bd08      	pop	{r3, pc}
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	00000739 	.word	0x00000739

00000804 <TC7_Handler>:
     804:	b508      	push	{r3, lr}
     806:	2007      	movs	r0, #7
     808:	4b01      	ldr	r3, [pc, #4]	; (810 <TC7_Handler+0xc>)
     80a:	4798      	blx	r3
     80c:	bd08      	pop	{r3, pc}
     80e:	46c0      	nop			; (mov r8, r8)
     810:	00000739 	.word	0x00000739

00000814 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     814:	6802      	ldr	r2, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     816:	6913      	ldr	r3, [r2, #16]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     818:	0419      	lsls	r1, r3, #16
     81a:	d4fc      	bmi.n	816 <_i2c_master_wait_for_sync+0x2>
		/* Wait for I2C module to sync. */
	}
}
     81c:	4770      	bx	lr
     81e:	46c0      	nop			; (mov r8, r8)

00000820 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     820:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     822:	68da      	ldr	r2, [r3, #12]
     824:	0391      	lsls	r1, r2, #14
     826:	d506      	bpl.n	836 <_i2c_master_address_response+0x16>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     828:	2202      	movs	r2, #2
     82a:	739a      	strb	r2, [r3, #14]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     82c:	691b      	ldr	r3, [r3, #16]
     82e:	079a      	lsls	r2, r3, #30
     830:	d50b      	bpl.n	84a <_i2c_master_address_response+0x2a>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     832:	2041      	movs	r0, #65	; 0x41
     834:	e00c      	b.n	850 <_i2c_master_address_response+0x30>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     836:	691a      	ldr	r2, [r3, #16]
     838:	0751      	lsls	r1, r2, #29
     83a:	d508      	bpl.n	84e <_i2c_master_address_response+0x2e>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     83c:	6859      	ldr	r1, [r3, #4]
     83e:	22c0      	movs	r2, #192	; 0xc0
     840:	0292      	lsls	r2, r2, #10
     842:	430a      	orrs	r2, r1
     844:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     846:	2018      	movs	r0, #24
     848:	e002      	b.n	850 <_i2c_master_address_response+0x30>
	}

	return STATUS_OK;
     84a:	2000      	movs	r0, #0
     84c:	e000      	b.n	850 <_i2c_master_address_response+0x30>
     84e:	2000      	movs	r0, #0
}
     850:	4770      	bx	lr
     852:	46c0      	nop			; (mov r8, r8)

00000854 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
static enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     854:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     856:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     858:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     85a:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     85c:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     85e:	e004      	b.n	86a <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     860:	3301      	adds	r3, #1
     862:	b29b      	uxth	r3, r3
     864:	8901      	ldrh	r1, [r0, #8]
     866:	4299      	cmp	r1, r3
     868:	d909      	bls.n	87e <_i2c_master_wait_for_bus+0x2a>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     86a:	68d1      	ldr	r1, [r2, #12]
     86c:	0c09      	lsrs	r1, r1, #16
     86e:	4221      	tst	r1, r4
     870:	d107      	bne.n	882 <_i2c_master_wait_for_bus+0x2e>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     872:	68d1      	ldr	r1, [r2, #12]
     874:	0c09      	lsrs	r1, r1, #16

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     876:	4229      	tst	r1, r5
     878:	d0f2      	beq.n	860 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     87a:	2000      	movs	r0, #0
     87c:	e002      	b.n	884 <_i2c_master_wait_for_bus+0x30>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     87e:	2012      	movs	r0, #18
     880:	e000      	b.n	884 <_i2c_master_wait_for_bus+0x30>
		}
	}
	return STATUS_OK;
     882:	2000      	movs	r0, #0
}
     884:	bd30      	pop	{r4, r5, pc}
     886:	46c0      	nop			; (mov r8, r8)

00000888 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     88a:	465f      	mov	r7, fp
     88c:	4656      	mov	r6, sl
     88e:	464d      	mov	r5, r9
     890:	4644      	mov	r4, r8
     892:	b4f0      	push	{r4, r5, r6, r7}
     894:	1c06      	adds	r6, r0, #0
     896:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     898:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     89a:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ;
     89c:	880b      	ldrh	r3, [r1, #0]
     89e:	005b      	lsls	r3, r3, #1
     8a0:	2201      	movs	r2, #1
     8a2:	4313      	orrs	r3, r2
     8a4:	b2db      	uxtb	r3, r3
     8a6:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     8a8:	4b2b      	ldr	r3, [pc, #172]	; (958 <_i2c_master_read_packet+0xd0>)
     8aa:	4798      	blx	r3
     8ac:	1c03      	adds	r3, r0, #0

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     8ae:	6869      	ldr	r1, [r5, #4]
     8b0:	4a2a      	ldr	r2, [pc, #168]	; (95c <_i2c_master_read_packet+0xd4>)
     8b2:	400a      	ands	r2, r1
     8b4:	606a      	str	r2, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     8b6:	2b00      	cmp	r3, #0
     8b8:	d147      	bne.n	94a <_i2c_master_read_packet+0xc2>
		tmp_status = _i2c_master_address_response(module);
     8ba:	1c30      	adds	r0, r6, #0
     8bc:	4b28      	ldr	r3, [pc, #160]	; (960 <_i2c_master_read_packet+0xd8>)
     8be:	4798      	blx	r3
     8c0:	4683      	mov	fp, r0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     8c2:	2800      	cmp	r0, #0
     8c4:	d141      	bne.n	94a <_i2c_master_read_packet+0xc2>
     8c6:	3c01      	subs	r4, #1
     8c8:	b2a4      	uxth	r4, r4
     8ca:	2200      	movs	r2, #0
     8cc:	4690      	mov	r8, r2
		/* Read data buffer. */
		while (tmp_data_length--) {
     8ce:	4f25      	ldr	r7, [pc, #148]	; (964 <_i2c_master_read_packet+0xdc>)
     8d0:	e020      	b.n	914 <_i2c_master_read_packet+0x8c>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     8d2:	692b      	ldr	r3, [r5, #16]
     8d4:	0699      	lsls	r1, r3, #26
     8d6:	d537      	bpl.n	948 <_i2c_master_read_packet+0xc0>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (tmp_data_length == 0) {
     8d8:	2c00      	cmp	r4, #0
     8da:	d107      	bne.n	8ec <_i2c_master_read_packet+0x64>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     8dc:	686a      	ldr	r2, [r5, #4]
     8de:	2380      	movs	r3, #128	; 0x80
     8e0:	02db      	lsls	r3, r3, #11
     8e2:	4313      	orrs	r3, r2
     8e4:	606b      	str	r3, [r5, #4]
     8e6:	3c01      	subs	r4, #1
     8e8:	b2a4      	uxth	r4, r4
     8ea:	e013      	b.n	914 <_i2c_master_read_packet+0x8c>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     8ec:	1c30      	adds	r0, r6, #0
     8ee:	4a1e      	ldr	r2, [pc, #120]	; (968 <_i2c_master_read_packet+0xe0>)
     8f0:	4790      	blx	r2
				packet->data[counter++] = i2c_module->DATA.reg;
     8f2:	4643      	mov	r3, r8
     8f4:	3301      	adds	r3, #1
     8f6:	b29b      	uxth	r3, r3
     8f8:	469a      	mov	sl, r3
     8fa:	69ab      	ldr	r3, [r5, #24]
     8fc:	4649      	mov	r1, r9
     8fe:	6849      	ldr	r1, [r1, #4]
     900:	4642      	mov	r2, r8
     902:	548b      	strb	r3, [r1, r2]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     904:	1c30      	adds	r0, r6, #0
     906:	4a14      	ldr	r2, [pc, #80]	; (958 <_i2c_master_read_packet+0xd0>)
     908:	4790      	blx	r2
     90a:	3c01      	subs	r4, #1
     90c:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     90e:	2800      	cmp	r0, #0
     910:	d103      	bne.n	91a <_i2c_master_read_packet+0x92>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     912:	46d0      	mov	r8, sl
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     914:	42bc      	cmp	r4, r7
     916:	d1dc      	bne.n	8d2 <_i2c_master_read_packet+0x4a>
     918:	e001      	b.n	91e <_i2c_master_read_packet+0x96>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     91a:	46d0      	mov	r8, sl
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     91c:	4683      	mov	fp, r0
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     91e:	7ab3      	ldrb	r3, [r6, #10]
     920:	2b00      	cmp	r3, #0
     922:	d007      	beq.n	934 <_i2c_master_read_packet+0xac>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     924:	1c30      	adds	r0, r6, #0
     926:	4b10      	ldr	r3, [pc, #64]	; (968 <_i2c_master_read_packet+0xe0>)
     928:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     92a:	686a      	ldr	r2, [r5, #4]
     92c:	23c0      	movs	r3, #192	; 0xc0
     92e:	029b      	lsls	r3, r3, #10
     930:	4313      	orrs	r3, r2
     932:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     934:	1c30      	adds	r0, r6, #0
     936:	4b0c      	ldr	r3, [pc, #48]	; (968 <_i2c_master_read_packet+0xe0>)
     938:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     93a:	69aa      	ldr	r2, [r5, #24]
     93c:	4649      	mov	r1, r9
     93e:	684b      	ldr	r3, [r1, #4]
     940:	4641      	mov	r1, r8
     942:	545a      	strb	r2, [r3, r1]
     944:	4658      	mov	r0, fp
     946:	e000      	b.n	94a <_i2c_master_read_packet+0xc2>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     948:	2041      	movs	r0, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     94a:	bc3c      	pop	{r2, r3, r4, r5}
     94c:	4690      	mov	r8, r2
     94e:	4699      	mov	r9, r3
     950:	46a2      	mov	sl, r4
     952:	46ab      	mov	fp, r5
     954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	00000855 	.word	0x00000855
     95c:	fffbffff 	.word	0xfffbffff
     960:	00000821 	.word	0x00000821
     964:	0000ffff 	.word	0x0000ffff
     968:	00000815 	.word	0x00000815

0000096c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
     96e:	465f      	mov	r7, fp
     970:	4656      	mov	r6, sl
     972:	464d      	mov	r5, r9
     974:	4644      	mov	r4, r8
     976:	b4f0      	push	{r4, r5, r6, r7}
     978:	b083      	sub	sp, #12
     97a:	1c06      	adds	r6, r0, #0
     97c:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     97e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     980:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     982:	4b24      	ldr	r3, [pc, #144]	; (a14 <_i2c_master_write_packet+0xa8>)
     984:	4798      	blx	r3

	/* Set address and direction bit. Will send start command on bus. */
	i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE;
     986:	883b      	ldrh	r3, [r7, #0]
     988:	005b      	lsls	r3, r3, #1
     98a:	b2db      	uxtb	r3, r3
     98c:	752b      	strb	r3, [r5, #20]

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     98e:	1c30      	adds	r0, r6, #0
     990:	4b21      	ldr	r3, [pc, #132]	; (a18 <_i2c_master_write_packet+0xac>)
     992:	4798      	blx	r3
     994:	1c03      	adds	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     996:	2b00      	cmp	r3, #0
     998:	d135      	bne.n	a06 <_i2c_master_write_packet+0x9a>
		tmp_status = _i2c_master_address_response(module);
     99a:	1c30      	adds	r0, r6, #0
     99c:	4b1f      	ldr	r3, [pc, #124]	; (a1c <_i2c_master_write_packet+0xb0>)
     99e:	4798      	blx	r3
     9a0:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     9a2:	2800      	cmp	r0, #0
     9a4:	d12f      	bne.n	a06 <_i2c_master_write_packet+0x9a>
     9a6:	46a0      	mov	r8, r4
     9a8:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     9aa:	2320      	movs	r3, #32
     9ac:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     9ae:	4a19      	ldr	r2, [pc, #100]	; (a14 <_i2c_master_write_packet+0xa8>)
     9b0:	4693      	mov	fp, r2
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     9b2:	4b19      	ldr	r3, [pc, #100]	; (a18 <_i2c_master_write_packet+0xac>)
     9b4:	469a      	mov	sl, r3
     9b6:	e010      	b.n	9da <_i2c_master_write_packet+0x6e>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     9b8:	692b      	ldr	r3, [r5, #16]
     9ba:	464a      	mov	r2, r9
     9bc:	4213      	tst	r3, r2
     9be:	d021      	beq.n	a04 <_i2c_master_write_packet+0x98>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     9c0:	1c30      	adds	r0, r6, #0
     9c2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     9c4:	687a      	ldr	r2, [r7, #4]
     9c6:	5d13      	ldrb	r3, [r2, r4]
     9c8:	762b      	strb	r3, [r5, #24]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     9ca:	1c30      	adds	r0, r6, #0
     9cc:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     9ce:	2800      	cmp	r0, #0
     9d0:	d106      	bne.n	9e0 <_i2c_master_write_packet+0x74>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     9d2:	692b      	ldr	r3, [r5, #16]
     9d4:	3401      	adds	r4, #1
     9d6:	075a      	lsls	r2, r3, #29
     9d8:	d404      	bmi.n	9e4 <_i2c_master_write_packet+0x78>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     9da:	4544      	cmp	r4, r8
     9dc:	d1ec      	bne.n	9b8 <_i2c_master_write_packet+0x4c>
     9de:	e003      	b.n	9e8 <_i2c_master_write_packet+0x7c>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     9e0:	9001      	str	r0, [sp, #4]
     9e2:	e001      	b.n	9e8 <_i2c_master_write_packet+0x7c>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     9e4:	231e      	movs	r3, #30
     9e6:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     9e8:	7ab3      	ldrb	r3, [r6, #10]
     9ea:	9801      	ldr	r0, [sp, #4]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d00a      	beq.n	a06 <_i2c_master_write_packet+0x9a>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     9f0:	1c30      	adds	r0, r6, #0
     9f2:	4b08      	ldr	r3, [pc, #32]	; (a14 <_i2c_master_write_packet+0xa8>)
     9f4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9f6:	686a      	ldr	r2, [r5, #4]
     9f8:	23c0      	movs	r3, #192	; 0xc0
     9fa:	029b      	lsls	r3, r3, #10
     9fc:	4313      	orrs	r3, r2
     9fe:	606b      	str	r3, [r5, #4]
     a00:	9801      	ldr	r0, [sp, #4]
     a02:	e000      	b.n	a06 <_i2c_master_write_packet+0x9a>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     a04:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     a06:	b003      	add	sp, #12
     a08:	bc3c      	pop	{r2, r3, r4, r5}
     a0a:	4690      	mov	r8, r2
     a0c:	4699      	mov	r9, r3
     a0e:	46a2      	mov	sl, r4
     a10:	46ab      	mov	fp, r5
     a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a14:	00000815 	.word	0x00000815
     a18:	00000855 	.word	0x00000855
     a1c:	00000821 	.word	0x00000821

00000a20 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     a20:	b5f0      	push	{r4, r5, r6, r7, lr}
     a22:	4647      	mov	r7, r8
     a24:	b480      	push	{r7}
     a26:	b082      	sub	sp, #8
     a28:	1c07      	adds	r7, r0, #0
     a2a:	1c0c      	adds	r4, r1, #0
     a2c:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     a2e:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a30:	1c08      	adds	r0, r1, #0
     a32:	4b4e      	ldr	r3, [pc, #312]	; (b6c <i2c_master_init+0x14c>)
     a34:	4798      	blx	r3
     a36:	1c06      	adds	r6, r0, #0
     a38:	4b4d      	ldr	r3, [pc, #308]	; (b70 <i2c_master_init+0x150>)
     a3a:	6a19      	ldr	r1, [r3, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a3c:	1c82      	adds	r2, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a3e:	2001      	movs	r0, #1
     a40:	4090      	lsls	r0, r2
     a42:	1c02      	adds	r2, r0, #0
     a44:	430a      	orrs	r2, r1
     a46:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     a48:	a901      	add	r1, sp, #4
     a4a:	792b      	ldrb	r3, [r5, #4]
     a4c:	700b      	strb	r3, [r1, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a4e:	360d      	adds	r6, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a50:	b2f6      	uxtb	r6, r6
     a52:	1c30      	adds	r0, r6, #0
     a54:	4b47      	ldr	r3, [pc, #284]	; (b74 <i2c_master_init+0x154>)
     a56:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a58:	1c30      	adds	r0, r6, #0
     a5a:	4b47      	ldr	r3, [pc, #284]	; (b78 <i2c_master_init+0x158>)
     a5c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     a5e:	7928      	ldrb	r0, [r5, #4]
     a60:	2100      	movs	r1, #0
     a62:	4b46      	ldr	r3, [pc, #280]	; (b7c <i2c_master_init+0x15c>)
     a64:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     a66:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     a68:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     a6a:	079a      	lsls	r2, r3, #30
     a6c:	d47a      	bmi.n	b64 <i2c_master_init+0x144>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     a6e:	6823      	ldr	r3, [r4, #0]
		return STATUS_BUSY;
     a70:	2005      	movs	r0, #5
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     a72:	07da      	lsls	r2, r3, #31
     a74:	d476      	bmi.n	b64 <i2c_master_init+0x144>
		return STATUS_BUSY;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a76:	6838      	ldr	r0, [r7, #0]
     a78:	4b3c      	ldr	r3, [pc, #240]	; (b6c <i2c_master_init+0x14c>)
     a7a:	4698      	mov	r8, r3
     a7c:	4798      	blx	r3
     a7e:	1c06      	adds	r6, r0, #0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     a80:	493f      	ldr	r1, [pc, #252]	; (b80 <i2c_master_init+0x160>)
     a82:	4b40      	ldr	r3, [pc, #256]	; (b84 <i2c_master_init+0x164>)
     a84:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a86:	00b6      	lsls	r6, r6, #2
     a88:	4b3f      	ldr	r3, [pc, #252]	; (b88 <i2c_master_init+0x168>)
     a8a:	50f7      	str	r7, [r6, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
     a8c:	2300      	movs	r3, #0
     a8e:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     a90:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     a92:	2600      	movs	r6, #0
     a94:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     a96:	83bb      	strh	r3, [r7, #28]

	module->status = STATUS_OK;
     a98:	2225      	movs	r2, #37	; 0x25
     a9a:	54be      	strb	r6, [r7, r2]
	module->buffer = NULL;
     a9c:	623b      	str	r3, [r7, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     a9e:	2314      	movs	r3, #20
     aa0:	6023      	str	r3, [r4, #0]
	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     aa2:	683c      	ldr	r4, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     aa4:	1c20      	adds	r0, r4, #0
     aa6:	47c0      	blx	r8
     aa8:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     aaa:	2380      	movs	r3, #128	; 0x80
     aac:	466a      	mov	r2, sp
     aae:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ab0:	7056      	strb	r6, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ab2:	2301      	movs	r3, #1
     ab4:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     ab6:	70d6      	strb	r6, [r2, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     ab8:	6968      	ldr	r0, [r5, #20]
	uint32_t pad1 = config->pinmux_pad1;
     aba:	69ae      	ldr	r6, [r5, #24]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     abc:	2800      	cmp	r0, #0
     abe:	d103      	bne.n	ac8 <i2c_master_init+0xa8>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     ac0:	1c20      	adds	r0, r4, #0
     ac2:	2100      	movs	r1, #0
     ac4:	4b31      	ldr	r3, [pc, #196]	; (b8c <i2c_master_init+0x16c>)
     ac6:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     ac8:	466b      	mov	r3, sp
     aca:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     acc:	2202      	movs	r2, #2
     ace:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     ad0:	0c03      	lsrs	r3, r0, #16
     ad2:	b2d8      	uxtb	r0, r3
     ad4:	4669      	mov	r1, sp
     ad6:	4b2e      	ldr	r3, [pc, #184]	; (b90 <i2c_master_init+0x170>)
     ad8:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     ada:	2e00      	cmp	r6, #0
     adc:	d104      	bne.n	ae8 <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     ade:	1c20      	adds	r0, r4, #0
     ae0:	2101      	movs	r1, #1
     ae2:	4b2a      	ldr	r3, [pc, #168]	; (b8c <i2c_master_init+0x16c>)
     ae4:	4798      	blx	r3
     ae6:	1c06      	adds	r6, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     ae8:	466a      	mov	r2, sp
     aea:	7016      	strb	r6, [r2, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     aec:	2302      	movs	r3, #2
     aee:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     af0:	0c36      	lsrs	r6, r6, #16
     af2:	b2f0      	uxtb	r0, r6
     af4:	4669      	mov	r1, sp
     af6:	4b26      	ldr	r3, [pc, #152]	; (b90 <i2c_master_init+0x170>)
     af8:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     afa:	89ab      	ldrh	r3, [r5, #12]
     afc:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     afe:	89eb      	ldrh	r3, [r5, #14]
     b00:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b02:	7c2a      	ldrb	r2, [r5, #16]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     b04:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b06:	2a00      	cmp	r2, #0
     b08:	d104      	bne.n	b14 <i2c_master_init+0xf4>
     b0a:	4b22      	ldr	r3, [pc, #136]	; (b94 <i2c_master_init+0x174>)
     b0c:	681b      	ldr	r3, [r3, #0]
     b0e:	039b      	lsls	r3, r3, #14
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
     b10:	0fdb      	lsrs	r3, r3, #31
     b12:	01db      	lsls	r3, r3, #7
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     b14:	68aa      	ldr	r2, [r5, #8]
     b16:	2a00      	cmp	r2, #0
     b18:	d000      	beq.n	b1c <i2c_master_init+0xfc>
		tmp_ctrla |= config->start_hold_time;
     b1a:	4313      	orrs	r3, r2
	}

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     b1c:	7f2a      	ldrb	r2, [r5, #28]
     b1e:	2a00      	cmp	r2, #0
     b20:	d002      	beq.n	b28 <i2c_master_init+0x108>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUT;
     b22:	2280      	movs	r2, #128	; 0x80
     b24:	05d2      	lsls	r2, r2, #23
     b26:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     b28:	6a2a      	ldr	r2, [r5, #32]
     b2a:	2a00      	cmp	r2, #0
     b2c:	d000      	beq.n	b30 <i2c_master_init+0x110>
		tmp_ctrla |= config->inactive_timeout;
     b2e:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     b30:	6822      	ldr	r2, [r4, #0]
     b32:	4313      	orrs	r3, r2
     b34:	6023      	str	r3, [r4, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     b36:	2380      	movs	r3, #128	; 0x80
     b38:	005b      	lsls	r3, r3, #1
     b3a:	6063      	str	r3, [r4, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     b3c:	4640      	mov	r0, r8
     b3e:	300d      	adds	r0, #13
     b40:	b2c0      	uxtb	r0, r0
     b42:	4b15      	ldr	r3, [pc, #84]	; (b98 <i2c_master_init+0x178>)
     b44:	4798      	blx	r3
     b46:	682b      	ldr	r3, [r5, #0]
     b48:	21fa      	movs	r1, #250	; 0xfa
     b4a:	00c9      	lsls	r1, r1, #3
     b4c:	4359      	muls	r1, r3
     b4e:	1e4b      	subs	r3, r1, #1
     b50:	1818      	adds	r0, r3, r0
     b52:	4b12      	ldr	r3, [pc, #72]	; (b9c <i2c_master_init+0x17c>)
     b54:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     b56:	1f43      	subs	r3, r0, #5

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b58:	2040      	movs	r0, #64	; 0x40
	tmp_baud = (int32_t)(div_ceil(
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);

	/* Check that baud rate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     b5a:	2bff      	cmp	r3, #255	; 0xff
     b5c:	d802      	bhi.n	b64 <i2c_master_init+0x144>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = (uint8_t)tmp_baud;
     b5e:	b2db      	uxtb	r3, r3
     b60:	8163      	strh	r3, [r4, #10]
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	enum status_code tmp_status_code = STATUS_OK;
     b62:	2000      	movs	r0, #0
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     b64:	b002      	add	sp, #8
     b66:	bc04      	pop	{r2}
     b68:	4690      	mov	r8, r2
     b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b6c:	00001135 	.word	0x00001135
     b70:	40000400 	.word	0x40000400
     b74:	000016f9 	.word	0x000016f9
     b78:	00001669 	.word	0x00001669
     b7c:	00000f59 	.word	0x00000f59
     b80:	00000cb5 	.word	0x00000cb5
     b84:	00001171 	.word	0x00001171
     b88:	200009a8 	.word	0x200009a8
     b8c:	00000fa9 	.word	0x00000fa9
     b90:	000017d5 	.word	0x000017d5
     b94:	41002000 	.word	0x41002000
     b98:	00001715 	.word	0x00001715
     b9c:	00001b81 	.word	0x00001b81

00000ba0 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ba0:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     ba2:	69c2      	ldr	r2, [r0, #28]
     ba4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     ba6:	2305      	movs	r3, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     ba8:	2a00      	cmp	r2, #0
     baa:	d104      	bne.n	bb6 <i2c_master_read_packet_wait+0x16>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     bac:	2301      	movs	r3, #1
     bae:	7283      	strb	r3, [r0, #10]

	return _i2c_master_read_packet(module, packet);
     bb0:	4b02      	ldr	r3, [pc, #8]	; (bbc <i2c_master_read_packet_wait+0x1c>)
     bb2:	4798      	blx	r3
     bb4:	1c03      	adds	r3, r0, #0
}
     bb6:	1c18      	adds	r0, r3, #0
     bb8:	bd08      	pop	{r3, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	00000889 	.word	0x00000889

00000bc0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     bc0:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     bc2:	69c2      	ldr	r2, [r0, #28]
     bc4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     bc6:	2305      	movs	r3, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     bc8:	2a00      	cmp	r2, #0
     bca:	d104      	bne.n	bd6 <i2c_master_write_packet_wait+0x16>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     bcc:	2301      	movs	r3, #1
     bce:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     bd0:	4b02      	ldr	r3, [pc, #8]	; (bdc <i2c_master_write_packet_wait+0x1c>)
     bd2:	4798      	blx	r3
     bd4:	1c03      	adds	r3, r0, #0
}
     bd6:	1c18      	adds	r0, r3, #0
     bd8:	bd08      	pop	{r3, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	0000096d 	.word	0x0000096d

00000be0 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     be0:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     be2:	69c2      	ldr	r2, [r0, #28]
     be4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     be6:	2305      	movs	r3, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     be8:	2a00      	cmp	r2, #0
     bea:	d104      	bne.n	bf6 <i2c_master_write_packet_wait_no_stop+0x16>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     bec:	2300      	movs	r3, #0
     bee:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     bf0:	4b02      	ldr	r3, [pc, #8]	; (bfc <i2c_master_write_packet_wait_no_stop+0x1c>)
     bf2:	4798      	blx	r3
     bf4:	1c03      	adds	r3, r0, #0
}
     bf6:	1c18      	adds	r0, r3, #0
     bf8:	bd08      	pop	{r3, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	0000096d 	.word	0x0000096d

00000c00 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     c00:	6802      	ldr	r2, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
     c02:	6913      	ldr	r3, [r2, #16]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     c04:	0419      	lsls	r1, r3, #16
     c06:	d4fc      	bmi.n	c02 <_i2c_master_wait_for_sync+0x2>
		/* Wait for I2C module to sync. */
	}
}
     c08:	4770      	bx	lr
     c0a:	46c0      	nop			; (mov r8, r8)

00000c0c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     c0c:	b570      	push	{r4, r5, r6, lr}
     c0e:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c10:	6805      	ldr	r5, [r0, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     c12:	6986      	ldr	r6, [r0, #24]
     c14:	0c36      	lsrs	r6, r6, #16
     c16:	69c3      	ldr	r3, [r0, #28]
     c18:	b29b      	uxth	r3, r3
     c1a:	1af6      	subs	r6, r6, r3
     c1c:	b2b6      	uxth	r6, r6

	module->buffer_remaining--;
     c1e:	69c3      	ldr	r3, [r0, #28]
     c20:	b29b      	uxth	r3, r3
     c22:	3b01      	subs	r3, #1
     c24:	b29b      	uxth	r3, r3
     c26:	8383      	strh	r3, [r0, #28]

	if (!module->buffer_remaining) {
     c28:	69c3      	ldr	r3, [r0, #28]
     c2a:	b29b      	uxth	r3, r3
     c2c:	2b00      	cmp	r3, #0
     c2e:	d10f      	bne.n	c50 <_i2c_master_read+0x44>
		/* Send nack */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     c30:	686a      	ldr	r2, [r5, #4]
     c32:	2380      	movs	r3, #128	; 0x80
     c34:	02db      	lsls	r3, r3, #11
     c36:	4313      	orrs	r3, r2
     c38:	606b      	str	r3, [r5, #4]
		if (module->send_stop) {
     c3a:	7a83      	ldrb	r3, [r0, #10]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d00b      	beq.n	c58 <_i2c_master_read+0x4c>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     c40:	4b0a      	ldr	r3, [pc, #40]	; (c6c <_i2c_master_read+0x60>)
     c42:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     c44:	686a      	ldr	r2, [r5, #4]
     c46:	23c0      	movs	r3, #192	; 0xc0
     c48:	029b      	lsls	r3, r3, #10
     c4a:	4313      	orrs	r3, r2
     c4c:	606b      	str	r3, [r5, #4]
     c4e:	e003      	b.n	c58 <_i2c_master_read+0x4c>
		}
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c50:	686a      	ldr	r2, [r5, #4]
     c52:	4b07      	ldr	r3, [pc, #28]	; (c70 <_i2c_master_read+0x64>)
     c54:	4013      	ands	r3, r2
     c56:	606b      	str	r3, [r5, #4]
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     c58:	1c20      	adds	r0, r4, #0
     c5a:	4b04      	ldr	r3, [pc, #16]	; (c6c <_i2c_master_read+0x60>)
     c5c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     c5e:	6a23      	ldr	r3, [r4, #32]
     c60:	199e      	adds	r6, r3, r6
     c62:	69ab      	ldr	r3, [r5, #24]
     c64:	b2db      	uxtb	r3, r3
     c66:	7033      	strb	r3, [r6, #0]
}
     c68:	bd70      	pop	{r4, r5, r6, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	00000c01 	.word	0x00000c01
     c70:	fffbffff 	.word	0xfffbffff

00000c74 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     c74:	b570      	push	{r4, r5, r6, lr}
     c76:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     c78:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     c7a:	692b      	ldr	r3, [r5, #16]
     c7c:	075a      	lsls	r2, r3, #29
     c7e:	d503      	bpl.n	c88 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     c80:	221e      	movs	r2, #30
     c82:	2325      	movs	r3, #37	; 0x25
     c84:	54c2      	strb	r2, [r0, r3]
		/* Do not write more data */
		return;
     c86:	e011      	b.n	cac <_i2c_master_write+0x38>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
     c88:	6986      	ldr	r6, [r0, #24]
     c8a:	0c36      	lsrs	r6, r6, #16
     c8c:	69c3      	ldr	r3, [r0, #28]
     c8e:	b29b      	uxth	r3, r3
     c90:	1af6      	subs	r6, r6, r3
     c92:	b2b6      	uxth	r6, r6

	module->buffer_remaining--;
     c94:	69c3      	ldr	r3, [r0, #28]
     c96:	b29b      	uxth	r3, r3
     c98:	3b01      	subs	r3, #1
     c9a:	b29b      	uxth	r3, r3
     c9c:	8383      	strh	r3, [r0, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     c9e:	4b04      	ldr	r3, [pc, #16]	; (cb0 <_i2c_master_write+0x3c>)
     ca0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     ca2:	6a23      	ldr	r3, [r4, #32]
     ca4:	199e      	adds	r6, r3, r6
     ca6:	7833      	ldrb	r3, [r6, #0]
     ca8:	b2db      	uxtb	r3, r3
     caa:	762b      	strb	r3, [r5, #24]
}
     cac:	bd70      	pop	{r4, r5, r6, pc}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	00000c01 	.word	0x00000c01

00000cb4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     cb4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     cb6:	0080      	lsls	r0, r0, #2
     cb8:	4b69      	ldr	r3, [pc, #420]	; (e60 <_i2c_master_interrupt_handler+0x1ac>)
     cba:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     cbc:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     cbe:	69a6      	ldr	r6, [r4, #24]
     cc0:	0436      	lsls	r6, r6, #16
     cc2:	0e36      	lsrs	r6, r6, #24
			module->registered_callback;
     cc4:	69a3      	ldr	r3, [r4, #24]
	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
     cc6:	401e      	ands	r6, r3
			module->registered_callback;

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     cc8:	69a3      	ldr	r3, [r4, #24]
     cca:	0c1b      	lsrs	r3, r3, #16
     ccc:	d135      	bne.n	d3a <_i2c_master_interrupt_handler+0x86>
     cce:	69e3      	ldr	r3, [r4, #28]
     cd0:	b29b      	uxth	r3, r3
     cd2:	2b00      	cmp	r3, #0
     cd4:	d031      	beq.n	d3a <_i2c_master_interrupt_handler+0x86>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     cd6:	68eb      	ldr	r3, [r5, #12]
     cd8:	03da      	lsls	r2, r3, #15
     cda:	d507      	bpl.n	cec <_i2c_master_interrupt_handler+0x38>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     cdc:	2301      	movs	r3, #1
     cde:	73ab      	strb	r3, [r5, #14]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     ce0:	692b      	ldr	r3, [r5, #16]
     ce2:	079a      	lsls	r2, r3, #30
     ce4:	d502      	bpl.n	cec <_i2c_master_interrupt_handler+0x38>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     ce6:	2241      	movs	r2, #65	; 0x41
     ce8:	2325      	movs	r3, #37	; 0x25
     cea:	54e2      	strb	r2, [r4, r3]
		}
	}

	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     cec:	692b      	ldr	r3, [r5, #16]
     cee:	075a      	lsls	r2, r3, #29
     cf0:	d50f      	bpl.n	d12 <_i2c_master_interrupt_handler+0x5e>
		/* Return bad address value */
		module->status           = STATUS_ERR_BAD_ADDRESS;
     cf2:	2218      	movs	r2, #24
     cf4:	2325      	movs	r3, #37	; 0x25
     cf6:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
     cf8:	2300      	movs	r3, #0
     cfa:	83a3      	strh	r3, [r4, #28]

		if (module->send_stop) {
     cfc:	7aa3      	ldrb	r3, [r4, #10]
     cfe:	2b00      	cmp	r3, #0
     d00:	d007      	beq.n	d12 <_i2c_master_interrupt_handler+0x5e>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     d02:	1c20      	adds	r0, r4, #0
     d04:	4b57      	ldr	r3, [pc, #348]	; (e64 <_i2c_master_interrupt_handler+0x1b0>)
     d06:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d08:	686a      	ldr	r2, [r5, #4]
     d0a:	23c0      	movs	r3, #192	; 0xc0
     d0c:	029b      	lsls	r3, r3, #10
     d0e:	4313      	orrs	r3, r2
     d10:	606b      	str	r3, [r5, #4]
		}
	}

	module->buffer_length = module->buffer_remaining;
     d12:	69e3      	ldr	r3, [r4, #28]
     d14:	b29b      	uxth	r3, r3
     d16:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d1a:	041b      	lsls	r3, r3, #16
     d1c:	0e1b      	lsrs	r3, r3, #24
     d1e:	2b05      	cmp	r3, #5
     d20:	d14f      	bne.n	dc2 <_i2c_master_interrupt_handler+0x10e>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d24:	b2db      	uxtb	r3, r3
     d26:	2b00      	cmp	r3, #0
     d28:	d103      	bne.n	d32 <_i2c_master_interrupt_handler+0x7e>
			_i2c_master_write(module);
     d2a:	1c20      	adds	r0, r4, #0
     d2c:	4b4e      	ldr	r3, [pc, #312]	; (e68 <_i2c_master_interrupt_handler+0x1b4>)
     d2e:	4798      	blx	r3
     d30:	e047      	b.n	dc2 <_i2c_master_interrupt_handler+0x10e>
		} else {
			_i2c_master_read(module);
     d32:	1c20      	adds	r0, r4, #0
     d34:	4b4d      	ldr	r3, [pc, #308]	; (e6c <_i2c_master_interrupt_handler+0x1b8>)
     d36:	4798      	blx	r3
     d38:	e043      	b.n	dc2 <_i2c_master_interrupt_handler+0x10e>
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d3a:	69a3      	ldr	r3, [r4, #24]
     d3c:	0c1b      	lsrs	r3, r3, #16
     d3e:	d027      	beq.n	d90 <_i2c_master_interrupt_handler+0xdc>
     d40:	69e3      	ldr	r3, [r4, #28]
     d42:	b29b      	uxth	r3, r3
     d44:	2b00      	cmp	r3, #0
     d46:	d123      	bne.n	d90 <_i2c_master_interrupt_handler+0xdc>
			(module->status == STATUS_BUSY) &&
     d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d4a:	041b      	lsls	r3, r3, #16
     d4c:	0e1b      	lsrs	r3, r3, #24
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     d4e:	2b05      	cmp	r3, #5
     d50:	d11e      	bne.n	d90 <_i2c_master_interrupt_handler+0xdc>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d54:	b2db      	uxtb	r3, r3
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     d56:	2b00      	cmp	r3, #0
     d58:	d11a      	bne.n	d90 <_i2c_master_interrupt_handler+0xdc>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     d5a:	2303      	movs	r3, #3
     d5c:	732b      	strb	r3, [r5, #12]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     d5e:	2300      	movs	r3, #0
     d60:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     d62:	2325      	movs	r3, #37	; 0x25
     d64:	2200      	movs	r2, #0
     d66:	54e2      	strb	r2, [r4, r3]

		if (module->send_stop) {
     d68:	7aa3      	ldrb	r3, [r4, #10]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d008      	beq.n	d80 <_i2c_master_interrupt_handler+0xcc>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     d6e:	1c20      	adds	r0, r4, #0
     d70:	4b3c      	ldr	r3, [pc, #240]	; (e64 <_i2c_master_interrupt_handler+0x1b0>)
     d72:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d74:	686a      	ldr	r2, [r5, #4]
     d76:	23c0      	movs	r3, #192	; 0xc0
     d78:	029b      	lsls	r3, r3, #10
     d7a:	4313      	orrs	r3, r2
     d7c:	606b      	str	r3, [r5, #4]
     d7e:	e001      	b.n	d84 <_i2c_master_interrupt_handler+0xd0>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     d80:	2301      	movs	r3, #1
     d82:	73ab      	strb	r3, [r5, #14]
		}
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     d84:	07f3      	lsls	r3, r6, #31
     d86:	d51c      	bpl.n	dc2 <_i2c_master_interrupt_handler+0x10e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     d88:	68e3      	ldr	r3, [r4, #12]
     d8a:	1c20      	adds	r0, r4, #0
     d8c:	4798      	blx	r3
     d8e:	e018      	b.n	dc2 <_i2c_master_interrupt_handler+0x10e>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     d90:	69a3      	ldr	r3, [r4, #24]
     d92:	0c1b      	lsrs	r3, r3, #16
     d94:	d015      	beq.n	dc2 <_i2c_master_interrupt_handler+0x10e>
     d96:	69e3      	ldr	r3, [r4, #28]
     d98:	b29b      	uxth	r3, r3
     d9a:	2b00      	cmp	r3, #0
     d9c:	d011      	beq.n	dc2 <_i2c_master_interrupt_handler+0x10e>
		/* Check that bus ownership is not lost */
		if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     d9e:	692b      	ldr	r3, [r5, #16]
     da0:	069a      	lsls	r2, r3, #26
     da2:	d403      	bmi.n	dac <_i2c_master_interrupt_handler+0xf8>
			module->status = STATUS_ERR_PACKET_COLLISION;
     da4:	2241      	movs	r2, #65	; 0x41
     da6:	2325      	movs	r3, #37	; 0x25
     da8:	54e2      	strb	r2, [r4, r3]
     daa:	e00a      	b.n	dc2 <_i2c_master_interrupt_handler+0x10e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
     dae:	b2db      	uxtb	r3, r3
     db0:	2b00      	cmp	r3, #0
     db2:	d103      	bne.n	dbc <_i2c_master_interrupt_handler+0x108>
			_i2c_master_write(module);
     db4:	1c20      	adds	r0, r4, #0
     db6:	4b2c      	ldr	r3, [pc, #176]	; (e68 <_i2c_master_interrupt_handler+0x1b4>)
     db8:	4798      	blx	r3
     dba:	e002      	b.n	dc2 <_i2c_master_interrupt_handler+0x10e>
		} else {
			_i2c_master_read(module);
     dbc:	1c20      	adds	r0, r4, #0
     dbe:	4b2b      	ldr	r3, [pc, #172]	; (e6c <_i2c_master_interrupt_handler+0x1b8>)
     dc0:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dc2:	69a3      	ldr	r3, [r4, #24]
     dc4:	0c1b      	lsrs	r3, r3, #16
     dc6:	d026      	beq.n	e16 <_i2c_master_interrupt_handler+0x162>
     dc8:	69e3      	ldr	r3, [r4, #28]
     dca:	b29b      	uxth	r3, r3
     dcc:	2b00      	cmp	r3, #0
     dce:	d122      	bne.n	e16 <_i2c_master_interrupt_handler+0x162>
			(module->status == STATUS_BUSY) &&
     dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     dd2:	041b      	lsls	r3, r3, #16
     dd4:	0e1b      	lsrs	r3, r3, #24
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     dd6:	2b05      	cmp	r3, #5
     dd8:	d11d      	bne.n	e16 <_i2c_master_interrupt_handler+0x162>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
     ddc:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     dde:	2b01      	cmp	r3, #1
     de0:	d119      	bne.n	e16 <_i2c_master_interrupt_handler+0x162>
			(module->transfer_direction == I2C_TRANSFER_READ)) {

		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     de2:	2303      	movs	r3, #3
     de4:	732b      	strb	r3, [r5, #12]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     de6:	2300      	movs	r3, #0
     de8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     dea:	2325      	movs	r3, #37	; 0x25
     dec:	2200      	movs	r2, #0
     dee:	54e2      	strb	r2, [r4, r3]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     df0:	07b3      	lsls	r3, r6, #30
     df2:	d507      	bpl.n	e04 <_i2c_master_interrupt_handler+0x150>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
     df6:	b2db      	uxtb	r3, r3
     df8:	2b01      	cmp	r3, #1
     dfa:	d103      	bne.n	e04 <_i2c_master_interrupt_handler+0x150>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     dfc:	6923      	ldr	r3, [r4, #16]
     dfe:	1c20      	adds	r0, r4, #0
     e00:	4798      	blx	r3
     e02:	e008      	b.n	e16 <_i2c_master_interrupt_handler+0x162>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     e04:	07f2      	lsls	r2, r6, #31
     e06:	d506      	bpl.n	e16 <_i2c_master_interrupt_handler+0x162>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e0a:	b2db      	uxtb	r3, r3
     e0c:	2b00      	cmp	r3, #0
     e0e:	d102      	bne.n	e16 <_i2c_master_interrupt_handler+0x162>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     e10:	68e3      	ldr	r3, [r4, #12]
     e12:	1c20      	adds	r0, r4, #0
     e14:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e18:	041b      	lsls	r3, r3, #16
     e1a:	0e1b      	lsrs	r3, r3, #24
     e1c:	2b05      	cmp	r3, #5
     e1e:	d01d      	beq.n	e5c <_i2c_master_interrupt_handler+0x1a8>
     e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e22:	041b      	lsls	r3, r3, #16
     e24:	0e1b      	lsrs	r3, r3, #24
     e26:	d019      	beq.n	e5c <_i2c_master_interrupt_handler+0x1a8>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     e28:	2303      	movs	r3, #3
     e2a:	732b      	strb	r3, [r5, #12]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     e2c:	2300      	movs	r3, #0
     e2e:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     e30:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e34:	041b      	lsls	r3, r3, #16
     e36:	0e1b      	lsrs	r3, r3, #24
     e38:	2b41      	cmp	r3, #65	; 0x41
     e3a:	d00a      	beq.n	e52 <_i2c_master_interrupt_handler+0x19e>
     e3c:	7aa3      	ldrb	r3, [r4, #10]
     e3e:	2b00      	cmp	r3, #0
     e40:	d007      	beq.n	e52 <_i2c_master_interrupt_handler+0x19e>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
     e42:	1c20      	adds	r0, r4, #0
     e44:	4b07      	ldr	r3, [pc, #28]	; (e64 <_i2c_master_interrupt_handler+0x1b0>)
     e46:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     e48:	686a      	ldr	r2, [r5, #4]
     e4a:	23e0      	movs	r3, #224	; 0xe0
     e4c:	02db      	lsls	r3, r3, #11
     e4e:	4313      	orrs	r3, r2
     e50:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     e52:	0773      	lsls	r3, r6, #29
     e54:	d502      	bpl.n	e5c <_i2c_master_interrupt_handler+0x1a8>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     e56:	6963      	ldr	r3, [r4, #20]
     e58:	1c20      	adds	r0, r4, #0
     e5a:	4798      	blx	r3
		}
	}
}
     e5c:	bd70      	pop	{r4, r5, r6, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	200009a8 	.word	0x200009a8
     e64:	00000c01 	.word	0x00000c01
     e68:	00000c75 	.word	0x00000c75
     e6c:	00000c0d 	.word	0x00000c0d

00000e70 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     e70:	b538      	push	{r3, r4, r5, lr}
     e72:	1c15      	adds	r5, r2, #0
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     e74:	084c      	lsrs	r4, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e76:	2340      	movs	r3, #64	; 0x40
{
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     e78:	4284      	cmp	r4, r0
     e7a:	d30b      	bcc.n	e94 <_sercom_get_sync_baud_val+0x24>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
     e7c:	0043      	lsls	r3, r0, #1
     e7e:	1c08      	adds	r0, r1, #0
     e80:	1c19      	adds	r1, r3, #0
     e82:	4b05      	ldr	r3, [pc, #20]	; (e98 <_sercom_get_sync_baud_val+0x28>)
     e84:	4798      	blx	r3
     e86:	3801      	subs	r0, #1
     e88:	b280      	uxth	r0, r0

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e8a:	2340      	movs	r3, #64	; 0x40
	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     e8c:	28ff      	cmp	r0, #255	; 0xff
     e8e:	d801      	bhi.n	e94 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     e90:	8028      	strh	r0, [r5, #0]
		return STATUS_OK;
     e92:	2300      	movs	r3, #0
	}
}
     e94:	1c18      	adds	r0, r3, #0
     e96:	bd38      	pop	{r3, r4, r5, pc}
     e98:	00001b81 	.word	0x00001b81
     e9c:	00000000 	.word	0x00000000

00000ea0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ea2:	1c07      	adds	r7, r0, #0
     ea4:	1c0d      	adds	r5, r1, #0
     ea6:	1c16      	adds	r6, r2, #0
     ea8:	aa06      	add	r2, sp, #24
     eaa:	7810      	ldrb	r0, [r2, #0]
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
     eac:	1c3a      	adds	r2, r7, #0
     eae:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     eb0:	2440      	movs	r4, #64	; 0x40
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
     eb2:	428a      	cmp	r2, r1
     eb4:	d240      	bcs.n	f38 <_sercom_get_async_baud_val+0x98>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     eb6:	2b00      	cmp	r3, #0
     eb8:	d113      	bne.n	ee2 <_sercom_get_async_baud_val+0x42>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
     eba:	2100      	movs	r1, #0
     ebc:	1c3a      	adds	r2, r7, #0
     ebe:	4c22      	ldr	r4, [pc, #136]	; (f48 <_sercom_get_async_baud_val+0xa8>)
     ec0:	47a0      	blx	r4
     ec2:	1c01      	adds	r1, r0, #0
     ec4:	2000      	movs	r0, #0
     ec6:	1c2a      	adds	r2, r5, #0
     ec8:	2300      	movs	r3, #0
     eca:	4c20      	ldr	r4, [pc, #128]	; (f4c <_sercom_get_async_baud_val+0xac>)
     ecc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ece:	4d1d      	ldr	r5, [pc, #116]	; (f44 <_sercom_get_async_baud_val+0xa4>)
     ed0:	4c1b      	ldr	r4, [pc, #108]	; (f40 <_sercom_get_async_baud_val+0xa0>)
     ed2:	1c22      	adds	r2, r4, #0
     ed4:	1c2b      	adds	r3, r5, #0
     ed6:	1a12      	subs	r2, r2, r0
     ed8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     eda:	0c12      	lsrs	r2, r2, #16
     edc:	041b      	lsls	r3, r3, #16
     ede:	431a      	orrs	r2, r3
     ee0:	e026      	b.n	f30 <_sercom_get_async_baud_val+0x90>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     ee2:	2200      	movs	r2, #0
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ee4:	2b01      	cmp	r3, #1
     ee6:	d123      	bne.n	f30 <_sercom_get_async_baud_val+0x90>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
     ee8:	0f4c      	lsrs	r4, r1, #29
     eea:	00cd      	lsls	r5, r1, #3
     eec:	2100      	movs	r1, #0
     eee:	1c3a      	adds	r2, r7, #0
     ef0:	2300      	movs	r3, #0
     ef2:	4f15      	ldr	r7, [pc, #84]	; (f48 <_sercom_get_async_baud_val+0xa8>)
     ef4:	47b8      	blx	r7
     ef6:	1c02      	adds	r2, r0, #0
     ef8:	1c0b      	adds	r3, r1, #0
     efa:	1c28      	adds	r0, r5, #0
     efc:	1c21      	adds	r1, r4, #0
     efe:	4c13      	ldr	r4, [pc, #76]	; (f4c <_sercom_get_async_baud_val+0xac>)
     f00:	47a0      	blx	r4
			baud_int = baud_int / BAUD_FP_MAX;
     f02:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     f04:	4b12      	ldr	r3, [pc, #72]	; (f50 <_sercom_get_async_baud_val+0xb0>)
     f06:	429a      	cmp	r2, r3
     f08:	d90f      	bls.n	f2a <_sercom_get_async_baud_val+0x8a>
     f0a:	3801      	subs	r0, #1
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     f0c:	2301      	movs	r3, #1
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     f0e:	4910      	ldr	r1, [pc, #64]	; (f50 <_sercom_get_async_baud_val+0xb0>)
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
     f10:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     f12:	428a      	cmp	r2, r1
     f14:	d905      	bls.n	f22 <_sercom_get_async_baud_val+0x82>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     f16:	3301      	adds	r3, #1
     f18:	b2db      	uxtb	r3, r3
     f1a:	3801      	subs	r0, #1
     f1c:	2b08      	cmp	r3, #8
     f1e:	d1f7      	bne.n	f10 <_sercom_get_async_baud_val+0x70>
     f20:	e009      	b.n	f36 <_sercom_get_async_baud_val+0x96>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f22:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     f24:	2b08      	cmp	r3, #8
     f26:	d101      	bne.n	f2c <_sercom_get_async_baud_val+0x8c>
     f28:	e006      	b.n	f38 <_sercom_get_async_baud_val+0x98>
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     f2a:	2300      	movs	r3, #0
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     f2c:	035b      	lsls	r3, r3, #13
     f2e:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     f30:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     f32:	2400      	movs	r4, #0
     f34:	e000      	b.n	f38 <_sercom_get_async_baud_val+0x98>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f36:	2440      	movs	r4, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     f38:	1c20      	adds	r0, r4, #0
     f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f3c:	46c0      	nop			; (mov r8, r8)
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00000000 	.word	0x00000000
     f44:	00000001 	.word	0x00000001
     f48:	00001cdd 	.word	0x00001cdd
     f4c:	00001c9d 	.word	0x00001c9d
     f50:	00001fff 	.word	0x00001fff
     f54:	46c0      	nop			; (mov r8, r8)
     f56:	46c0      	nop			; (mov r8, r8)

00000f58 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     f58:	b510      	push	{r4, lr}
     f5a:	b082      	sub	sp, #8
     f5c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     f5e:	4b0f      	ldr	r3, [pc, #60]	; (f9c <sercom_set_gclk_generator+0x44>)
     f60:	781b      	ldrb	r3, [r3, #0]
     f62:	2b00      	cmp	r3, #0
     f64:	d001      	beq.n	f6a <sercom_set_gclk_generator+0x12>
     f66:	2900      	cmp	r1, #0
     f68:	d00d      	beq.n	f86 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     f6a:	a901      	add	r1, sp, #4
     f6c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     f6e:	200c      	movs	r0, #12
     f70:	4b0b      	ldr	r3, [pc, #44]	; (fa0 <sercom_set_gclk_generator+0x48>)
     f72:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     f74:	200c      	movs	r0, #12
     f76:	4b0b      	ldr	r3, [pc, #44]	; (fa4 <sercom_set_gclk_generator+0x4c>)
     f78:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     f7a:	4b08      	ldr	r3, [pc, #32]	; (f9c <sercom_set_gclk_generator+0x44>)
     f7c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     f7e:	2201      	movs	r2, #1
     f80:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     f82:	2000      	movs	r0, #0
     f84:	e007      	b.n	f96 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     f86:	4b05      	ldr	r3, [pc, #20]	; (f9c <sercom_set_gclk_generator+0x44>)
     f88:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     f8a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     f8c:	1b14      	subs	r4, r2, r4
     f8e:	1e62      	subs	r2, r4, #1
     f90:	4194      	sbcs	r4, r2
     f92:	4264      	negs	r4, r4
     f94:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     f96:	b002      	add	sp, #8
     f98:	bd10      	pop	{r4, pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	200008e8 	.word	0x200008e8
     fa0:	000016f9 	.word	0x000016f9
     fa4:	00001669 	.word	0x00001669

00000fa8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     fa8:	4b44      	ldr	r3, [pc, #272]	; (10bc <_sercom_get_default_pad+0x114>)
     faa:	4298      	cmp	r0, r3
     fac:	d033      	beq.n	1016 <_sercom_get_default_pad+0x6e>
     fae:	d806      	bhi.n	fbe <_sercom_get_default_pad+0x16>
     fb0:	4b43      	ldr	r3, [pc, #268]	; (10c0 <_sercom_get_default_pad+0x118>)
     fb2:	4298      	cmp	r0, r3
     fb4:	d00d      	beq.n	fd2 <_sercom_get_default_pad+0x2a>
     fb6:	4b43      	ldr	r3, [pc, #268]	; (10c4 <_sercom_get_default_pad+0x11c>)
     fb8:	4298      	cmp	r0, r3
     fba:	d01b      	beq.n	ff4 <_sercom_get_default_pad+0x4c>
     fbc:	e06f      	b.n	109e <_sercom_get_default_pad+0xf6>
     fbe:	4b42      	ldr	r3, [pc, #264]	; (10c8 <_sercom_get_default_pad+0x120>)
     fc0:	4298      	cmp	r0, r3
     fc2:	d04a      	beq.n	105a <_sercom_get_default_pad+0xb2>
     fc4:	4b41      	ldr	r3, [pc, #260]	; (10cc <_sercom_get_default_pad+0x124>)
     fc6:	4298      	cmp	r0, r3
     fc8:	d058      	beq.n	107c <_sercom_get_default_pad+0xd4>
     fca:	4b41      	ldr	r3, [pc, #260]	; (10d0 <_sercom_get_default_pad+0x128>)
     fcc:	4298      	cmp	r0, r3
     fce:	d166      	bne.n	109e <_sercom_get_default_pad+0xf6>
     fd0:	e032      	b.n	1038 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fd2:	2901      	cmp	r1, #1
     fd4:	d065      	beq.n	10a2 <_sercom_get_default_pad+0xfa>
     fd6:	2900      	cmp	r1, #0
     fd8:	d004      	beq.n	fe4 <_sercom_get_default_pad+0x3c>
     fda:	2902      	cmp	r1, #2
     fdc:	d006      	beq.n	fec <_sercom_get_default_pad+0x44>
     fde:	2903      	cmp	r1, #3
     fe0:	d006      	beq.n	ff0 <_sercom_get_default_pad+0x48>
     fe2:	e001      	b.n	fe8 <_sercom_get_default_pad+0x40>
     fe4:	483b      	ldr	r0, [pc, #236]	; (10d4 <_sercom_get_default_pad+0x12c>)
     fe6:	e067      	b.n	10b8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     fe8:	2000      	movs	r0, #0
     fea:	e065      	b.n	10b8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     fec:	483a      	ldr	r0, [pc, #232]	; (10d8 <_sercom_get_default_pad+0x130>)
     fee:	e063      	b.n	10b8 <_sercom_get_default_pad+0x110>
     ff0:	483a      	ldr	r0, [pc, #232]	; (10dc <_sercom_get_default_pad+0x134>)
     ff2:	e061      	b.n	10b8 <_sercom_get_default_pad+0x110>
     ff4:	2901      	cmp	r1, #1
     ff6:	d056      	beq.n	10a6 <_sercom_get_default_pad+0xfe>
     ff8:	2900      	cmp	r1, #0
     ffa:	d004      	beq.n	1006 <_sercom_get_default_pad+0x5e>
     ffc:	2902      	cmp	r1, #2
     ffe:	d006      	beq.n	100e <_sercom_get_default_pad+0x66>
    1000:	2903      	cmp	r1, #3
    1002:	d006      	beq.n	1012 <_sercom_get_default_pad+0x6a>
    1004:	e001      	b.n	100a <_sercom_get_default_pad+0x62>
    1006:	2003      	movs	r0, #3
    1008:	e056      	b.n	10b8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    100a:	2000      	movs	r0, #0
    100c:	e054      	b.n	10b8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    100e:	4834      	ldr	r0, [pc, #208]	; (10e0 <_sercom_get_default_pad+0x138>)
    1010:	e052      	b.n	10b8 <_sercom_get_default_pad+0x110>
    1012:	4834      	ldr	r0, [pc, #208]	; (10e4 <_sercom_get_default_pad+0x13c>)
    1014:	e050      	b.n	10b8 <_sercom_get_default_pad+0x110>
    1016:	2901      	cmp	r1, #1
    1018:	d047      	beq.n	10aa <_sercom_get_default_pad+0x102>
    101a:	2900      	cmp	r1, #0
    101c:	d004      	beq.n	1028 <_sercom_get_default_pad+0x80>
    101e:	2902      	cmp	r1, #2
    1020:	d006      	beq.n	1030 <_sercom_get_default_pad+0x88>
    1022:	2903      	cmp	r1, #3
    1024:	d006      	beq.n	1034 <_sercom_get_default_pad+0x8c>
    1026:	e001      	b.n	102c <_sercom_get_default_pad+0x84>
    1028:	482f      	ldr	r0, [pc, #188]	; (10e8 <_sercom_get_default_pad+0x140>)
    102a:	e045      	b.n	10b8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    102c:	2000      	movs	r0, #0
    102e:	e043      	b.n	10b8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1030:	482e      	ldr	r0, [pc, #184]	; (10ec <_sercom_get_default_pad+0x144>)
    1032:	e041      	b.n	10b8 <_sercom_get_default_pad+0x110>
    1034:	482e      	ldr	r0, [pc, #184]	; (10f0 <_sercom_get_default_pad+0x148>)
    1036:	e03f      	b.n	10b8 <_sercom_get_default_pad+0x110>
    1038:	2901      	cmp	r1, #1
    103a:	d038      	beq.n	10ae <_sercom_get_default_pad+0x106>
    103c:	2900      	cmp	r1, #0
    103e:	d004      	beq.n	104a <_sercom_get_default_pad+0xa2>
    1040:	2902      	cmp	r1, #2
    1042:	d006      	beq.n	1052 <_sercom_get_default_pad+0xaa>
    1044:	2903      	cmp	r1, #3
    1046:	d006      	beq.n	1056 <_sercom_get_default_pad+0xae>
    1048:	e001      	b.n	104e <_sercom_get_default_pad+0xa6>
    104a:	482a      	ldr	r0, [pc, #168]	; (10f4 <_sercom_get_default_pad+0x14c>)
    104c:	e034      	b.n	10b8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    104e:	2000      	movs	r0, #0
    1050:	e032      	b.n	10b8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1052:	4829      	ldr	r0, [pc, #164]	; (10f8 <_sercom_get_default_pad+0x150>)
    1054:	e030      	b.n	10b8 <_sercom_get_default_pad+0x110>
    1056:	4829      	ldr	r0, [pc, #164]	; (10fc <_sercom_get_default_pad+0x154>)
    1058:	e02e      	b.n	10b8 <_sercom_get_default_pad+0x110>
    105a:	2901      	cmp	r1, #1
    105c:	d029      	beq.n	10b2 <_sercom_get_default_pad+0x10a>
    105e:	2900      	cmp	r1, #0
    1060:	d004      	beq.n	106c <_sercom_get_default_pad+0xc4>
    1062:	2902      	cmp	r1, #2
    1064:	d006      	beq.n	1074 <_sercom_get_default_pad+0xcc>
    1066:	2903      	cmp	r1, #3
    1068:	d006      	beq.n	1078 <_sercom_get_default_pad+0xd0>
    106a:	e001      	b.n	1070 <_sercom_get_default_pad+0xc8>
    106c:	4824      	ldr	r0, [pc, #144]	; (1100 <_sercom_get_default_pad+0x158>)
    106e:	e023      	b.n	10b8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1070:	2000      	movs	r0, #0
    1072:	e021      	b.n	10b8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1074:	4823      	ldr	r0, [pc, #140]	; (1104 <_sercom_get_default_pad+0x15c>)
    1076:	e01f      	b.n	10b8 <_sercom_get_default_pad+0x110>
    1078:	4823      	ldr	r0, [pc, #140]	; (1108 <_sercom_get_default_pad+0x160>)
    107a:	e01d      	b.n	10b8 <_sercom_get_default_pad+0x110>
    107c:	2901      	cmp	r1, #1
    107e:	d01a      	beq.n	10b6 <_sercom_get_default_pad+0x10e>
    1080:	2900      	cmp	r1, #0
    1082:	d004      	beq.n	108e <_sercom_get_default_pad+0xe6>
    1084:	2902      	cmp	r1, #2
    1086:	d006      	beq.n	1096 <_sercom_get_default_pad+0xee>
    1088:	2903      	cmp	r1, #3
    108a:	d006      	beq.n	109a <_sercom_get_default_pad+0xf2>
    108c:	e001      	b.n	1092 <_sercom_get_default_pad+0xea>
    108e:	481f      	ldr	r0, [pc, #124]	; (110c <_sercom_get_default_pad+0x164>)
    1090:	e012      	b.n	10b8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1092:	2000      	movs	r0, #0
    1094:	e010      	b.n	10b8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1096:	481e      	ldr	r0, [pc, #120]	; (1110 <_sercom_get_default_pad+0x168>)
    1098:	e00e      	b.n	10b8 <_sercom_get_default_pad+0x110>
    109a:	481e      	ldr	r0, [pc, #120]	; (1114 <_sercom_get_default_pad+0x16c>)
    109c:	e00c      	b.n	10b8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    109e:	2000      	movs	r0, #0
    10a0:	e00a      	b.n	10b8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10a2:	481d      	ldr	r0, [pc, #116]	; (1118 <_sercom_get_default_pad+0x170>)
    10a4:	e008      	b.n	10b8 <_sercom_get_default_pad+0x110>
    10a6:	481d      	ldr	r0, [pc, #116]	; (111c <_sercom_get_default_pad+0x174>)
    10a8:	e006      	b.n	10b8 <_sercom_get_default_pad+0x110>
    10aa:	481d      	ldr	r0, [pc, #116]	; (1120 <_sercom_get_default_pad+0x178>)
    10ac:	e004      	b.n	10b8 <_sercom_get_default_pad+0x110>
    10ae:	481d      	ldr	r0, [pc, #116]	; (1124 <_sercom_get_default_pad+0x17c>)
    10b0:	e002      	b.n	10b8 <_sercom_get_default_pad+0x110>
    10b2:	481d      	ldr	r0, [pc, #116]	; (1128 <_sercom_get_default_pad+0x180>)
    10b4:	e000      	b.n	10b8 <_sercom_get_default_pad+0x110>
    10b6:	481d      	ldr	r0, [pc, #116]	; (112c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    10b8:	4770      	bx	lr
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	42001000 	.word	0x42001000
    10c0:	42000800 	.word	0x42000800
    10c4:	42000c00 	.word	0x42000c00
    10c8:	42001800 	.word	0x42001800
    10cc:	42001c00 	.word	0x42001c00
    10d0:	42001400 	.word	0x42001400
    10d4:	00040003 	.word	0x00040003
    10d8:	00060003 	.word	0x00060003
    10dc:	00070003 	.word	0x00070003
    10e0:	001e0003 	.word	0x001e0003
    10e4:	001f0003 	.word	0x001f0003
    10e8:	00080003 	.word	0x00080003
    10ec:	000a0003 	.word	0x000a0003
    10f0:	000b0003 	.word	0x000b0003
    10f4:	00100003 	.word	0x00100003
    10f8:	00120003 	.word	0x00120003
    10fc:	00130003 	.word	0x00130003
    1100:	000c0003 	.word	0x000c0003
    1104:	000e0003 	.word	0x000e0003
    1108:	000f0003 	.word	0x000f0003
    110c:	00160003 	.word	0x00160003
    1110:	00180003 	.word	0x00180003
    1114:	00190003 	.word	0x00190003
    1118:	00050003 	.word	0x00050003
    111c:	00010003 	.word	0x00010003
    1120:	00090003 	.word	0x00090003
    1124:	00110003 	.word	0x00110003
    1128:	000d0003 	.word	0x000d0003
    112c:	00170003 	.word	0x00170003

00001130 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1130:	4770      	bx	lr
    1132:	46c0      	nop			; (mov r8, r8)

00001134 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1134:	b570      	push	{r4, r5, r6, lr}
    1136:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1138:	4a0c      	ldr	r2, [pc, #48]	; (116c <_sercom_get_sercom_inst_index+0x38>)
    113a:	466b      	mov	r3, sp
    113c:	ca70      	ldmia	r2!, {r4, r5, r6}
    113e:	c370      	stmia	r3!, {r4, r5, r6}
    1140:	ca32      	ldmia	r2!, {r1, r4, r5}
    1142:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1144:	9e00      	ldr	r6, [sp, #0]
    1146:	4286      	cmp	r6, r0
    1148:	d006      	beq.n	1158 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    114a:	2301      	movs	r3, #1
    114c:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    114e:	4669      	mov	r1, sp
    1150:	5852      	ldr	r2, [r2, r1]
    1152:	4282      	cmp	r2, r0
    1154:	d103      	bne.n	115e <_sercom_get_sercom_inst_index+0x2a>
    1156:	e000      	b.n	115a <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1158:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    115a:	b2d8      	uxtb	r0, r3
    115c:	e003      	b.n	1166 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    115e:	3301      	adds	r3, #1
    1160:	2b06      	cmp	r3, #6
    1162:	d1f3      	bne.n	114c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1164:	2000      	movs	r0, #0
}
    1166:	b006      	add	sp, #24
    1168:	bd70      	pop	{r4, r5, r6, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	00007bd0 	.word	0x00007bd0

00001170 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1170:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    1172:	4b0a      	ldr	r3, [pc, #40]	; (119c <_sercom_set_handler+0x2c>)
    1174:	781b      	ldrb	r3, [r3, #0]
    1176:	2b00      	cmp	r3, #0
    1178:	d10c      	bne.n	1194 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    117a:	4f09      	ldr	r7, [pc, #36]	; (11a0 <_sercom_set_handler+0x30>)
    117c:	4e09      	ldr	r6, [pc, #36]	; (11a4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    117e:	4d0a      	ldr	r5, [pc, #40]	; (11a8 <_sercom_set_handler+0x38>)
    1180:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1182:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1184:	195a      	adds	r2, r3, r5
    1186:	6014      	str	r4, [r2, #0]
    1188:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    118a:	2b18      	cmp	r3, #24
    118c:	d1f9      	bne.n	1182 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    118e:	2201      	movs	r2, #1
    1190:	4b02      	ldr	r3, [pc, #8]	; (119c <_sercom_set_handler+0x2c>)
    1192:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1194:	0080      	lsls	r0, r0, #2
    1196:	4b02      	ldr	r3, [pc, #8]	; (11a0 <_sercom_set_handler+0x30>)
    1198:	50c1      	str	r1, [r0, r3]
}
    119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119c:	200008ec 	.word	0x200008ec
    11a0:	200008f0 	.word	0x200008f0
    11a4:	00001131 	.word	0x00001131
    11a8:	200009a8 	.word	0x200009a8

000011ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    11ac:	b510      	push	{r4, lr}
    11ae:	b082      	sub	sp, #8
    11b0:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    11b2:	4668      	mov	r0, sp
    11b4:	4905      	ldr	r1, [pc, #20]	; (11cc <_sercom_get_interrupt_vector+0x20>)
    11b6:	3118      	adds	r1, #24
    11b8:	2206      	movs	r2, #6
    11ba:	4b05      	ldr	r3, [pc, #20]	; (11d0 <_sercom_get_interrupt_vector+0x24>)
    11bc:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    11be:	1c20      	adds	r0, r4, #0
    11c0:	4b04      	ldr	r3, [pc, #16]	; (11d4 <_sercom_get_interrupt_vector+0x28>)
    11c2:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    11c4:	466b      	mov	r3, sp
    11c6:	5618      	ldrsb	r0, [r3, r0]
}
    11c8:	b002      	add	sp, #8
    11ca:	bd10      	pop	{r4, pc}
    11cc:	00007bd0 	.word	0x00007bd0
    11d0:	000033f5 	.word	0x000033f5
    11d4:	00001135 	.word	0x00001135

000011d8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    11d8:	b508      	push	{r3, lr}
    11da:	4b02      	ldr	r3, [pc, #8]	; (11e4 <SERCOM0_Handler+0xc>)
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	2000      	movs	r0, #0
    11e0:	4798      	blx	r3
    11e2:	bd08      	pop	{r3, pc}
    11e4:	200008f0 	.word	0x200008f0

000011e8 <SERCOM1_Handler>:
    11e8:	b508      	push	{r3, lr}
    11ea:	4b02      	ldr	r3, [pc, #8]	; (11f4 <SERCOM1_Handler+0xc>)
    11ec:	685b      	ldr	r3, [r3, #4]
    11ee:	2001      	movs	r0, #1
    11f0:	4798      	blx	r3
    11f2:	bd08      	pop	{r3, pc}
    11f4:	200008f0 	.word	0x200008f0

000011f8 <SERCOM2_Handler>:
    11f8:	b508      	push	{r3, lr}
    11fa:	4b02      	ldr	r3, [pc, #8]	; (1204 <SERCOM2_Handler+0xc>)
    11fc:	689b      	ldr	r3, [r3, #8]
    11fe:	2002      	movs	r0, #2
    1200:	4798      	blx	r3
    1202:	bd08      	pop	{r3, pc}
    1204:	200008f0 	.word	0x200008f0

00001208 <SERCOM3_Handler>:
    1208:	b508      	push	{r3, lr}
    120a:	4b02      	ldr	r3, [pc, #8]	; (1214 <SERCOM3_Handler+0xc>)
    120c:	68db      	ldr	r3, [r3, #12]
    120e:	2003      	movs	r0, #3
    1210:	4798      	blx	r3
    1212:	bd08      	pop	{r3, pc}
    1214:	200008f0 	.word	0x200008f0

00001218 <SERCOM4_Handler>:
    1218:	b508      	push	{r3, lr}
    121a:	4b02      	ldr	r3, [pc, #8]	; (1224 <SERCOM4_Handler+0xc>)
    121c:	691b      	ldr	r3, [r3, #16]
    121e:	2004      	movs	r0, #4
    1220:	4798      	blx	r3
    1222:	bd08      	pop	{r3, pc}
    1224:	200008f0 	.word	0x200008f0

00001228 <SERCOM5_Handler>:
    1228:	b508      	push	{r3, lr}
    122a:	4b02      	ldr	r3, [pc, #8]	; (1234 <SERCOM5_Handler+0xc>)
    122c:	695b      	ldr	r3, [r3, #20]
    122e:	2005      	movs	r0, #5
    1230:	4798      	blx	r3
    1232:	bd08      	pop	{r3, pc}
    1234:	200008f0 	.word	0x200008f0

00001238 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1238:	4b0c      	ldr	r3, [pc, #48]	; (126c <cpu_irq_enter_critical+0x34>)
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	2b00      	cmp	r3, #0
    123e:	d110      	bne.n	1262 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1240:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1244:	2b00      	cmp	r3, #0
    1246:	d109      	bne.n	125c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1248:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    124a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    124e:	2200      	movs	r2, #0
    1250:	4b07      	ldr	r3, [pc, #28]	; (1270 <cpu_irq_enter_critical+0x38>)
    1252:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1254:	2201      	movs	r2, #1
    1256:	4b07      	ldr	r3, [pc, #28]	; (1274 <cpu_irq_enter_critical+0x3c>)
    1258:	701a      	strb	r2, [r3, #0]
    125a:	e002      	b.n	1262 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    125c:	2200      	movs	r2, #0
    125e:	4b05      	ldr	r3, [pc, #20]	; (1274 <cpu_irq_enter_critical+0x3c>)
    1260:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1262:	4b02      	ldr	r3, [pc, #8]	; (126c <cpu_irq_enter_critical+0x34>)
    1264:	681a      	ldr	r2, [r3, #0]
    1266:	3201      	adds	r2, #1
    1268:	601a      	str	r2, [r3, #0]
}
    126a:	4770      	bx	lr
    126c:	20000908 	.word	0x20000908
    1270:	20000000 	.word	0x20000000
    1274:	2000090c 	.word	0x2000090c

00001278 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1278:	4b08      	ldr	r3, [pc, #32]	; (129c <cpu_irq_leave_critical+0x24>)
    127a:	681a      	ldr	r2, [r3, #0]
    127c:	3a01      	subs	r2, #1
    127e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	2b00      	cmp	r3, #0
    1284:	d109      	bne.n	129a <cpu_irq_leave_critical+0x22>
    1286:	4b06      	ldr	r3, [pc, #24]	; (12a0 <cpu_irq_leave_critical+0x28>)
    1288:	781b      	ldrb	r3, [r3, #0]
    128a:	2b00      	cmp	r3, #0
    128c:	d005      	beq.n	129a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    128e:	2201      	movs	r2, #1
    1290:	4b04      	ldr	r3, [pc, #16]	; (12a4 <cpu_irq_leave_critical+0x2c>)
    1292:	701a      	strb	r2, [r3, #0]
    1294:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1298:	b662      	cpsie	i
	}
}
    129a:	4770      	bx	lr
    129c:	20000908 	.word	0x20000908
    12a0:	2000090c 	.word	0x2000090c
    12a4:	20000000 	.word	0x20000000

000012a8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    12a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12aa:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    12ac:	ac01      	add	r4, sp, #4
    12ae:	2501      	movs	r5, #1
    12b0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    12b2:	2700      	movs	r7, #0
    12b4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    12b6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    12b8:	200e      	movs	r0, #14
    12ba:	1c21      	adds	r1, r4, #0
    12bc:	4e06      	ldr	r6, [pc, #24]	; (12d8 <system_board_init+0x30>)
    12be:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    12c0:	2280      	movs	r2, #128	; 0x80
    12c2:	01d2      	lsls	r2, r2, #7
    12c4:	4b05      	ldr	r3, [pc, #20]	; (12dc <system_board_init+0x34>)
    12c6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    12c8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    12ca:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    12cc:	200f      	movs	r0, #15
    12ce:	1c21      	adds	r1, r4, #0
    12d0:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
    12d2:	b003      	add	sp, #12
    12d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	000012e1 	.word	0x000012e1
    12dc:	41004400 	.word	0x41004400

000012e0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    12e0:	b500      	push	{lr}
    12e2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12e4:	ab01      	add	r3, sp, #4
    12e6:	2280      	movs	r2, #128	; 0x80
    12e8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    12ea:	780a      	ldrb	r2, [r1, #0]
    12ec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    12ee:	784a      	ldrb	r2, [r1, #1]
    12f0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    12f2:	788a      	ldrb	r2, [r1, #2]
    12f4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    12f6:	1c19      	adds	r1, r3, #0
    12f8:	4b01      	ldr	r3, [pc, #4]	; (1300 <port_pin_set_config+0x20>)
    12fa:	4798      	blx	r3
}
    12fc:	b003      	add	sp, #12
    12fe:	bd00      	pop	{pc}
    1300:	000017d5 	.word	0x000017d5

00001304 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1304:	b508      	push	{r3, lr}
	switch (clock_source) {
    1306:	2807      	cmp	r0, #7
    1308:	d82b      	bhi.n	1362 <system_clock_source_get_hz+0x5e>
    130a:	0080      	lsls	r0, r0, #2
    130c:	4b17      	ldr	r3, [pc, #92]	; (136c <system_clock_source_get_hz+0x68>)
    130e:	581b      	ldr	r3, [r3, r0]
    1310:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1312:	2080      	movs	r0, #128	; 0x80
    1314:	0200      	lsls	r0, r0, #8
    1316:	e027      	b.n	1368 <system_clock_source_get_hz+0x64>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1318:	4b15      	ldr	r3, [pc, #84]	; (1370 <system_clock_source_get_hz+0x6c>)
    131a:	68d8      	ldr	r0, [r3, #12]
    131c:	e024      	b.n	1368 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    131e:	4b15      	ldr	r3, [pc, #84]	; (1374 <system_clock_source_get_hz+0x70>)
    1320:	6a18      	ldr	r0, [r3, #32]
    1322:	0580      	lsls	r0, r0, #22
    1324:	0f80      	lsrs	r0, r0, #30
    1326:	4b14      	ldr	r3, [pc, #80]	; (1378 <system_clock_source_get_hz+0x74>)
    1328:	40c3      	lsrs	r3, r0
    132a:	1c18      	adds	r0, r3, #0
    132c:	e01c      	b.n	1368 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    132e:	4b10      	ldr	r3, [pc, #64]	; (1370 <system_clock_source_get_hz+0x6c>)
    1330:	6918      	ldr	r0, [r3, #16]
    1332:	e019      	b.n	1368 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1334:	4b0e      	ldr	r3, [pc, #56]	; (1370 <system_clock_source_get_hz+0x6c>)
    1336:	681b      	ldr	r3, [r3, #0]
    1338:	2002      	movs	r0, #2
    133a:	4018      	ands	r0, r3
    133c:	d014      	beq.n	1368 <system_clock_source_get_hz+0x64>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    133e:	490d      	ldr	r1, [pc, #52]	; (1374 <system_clock_source_get_hz+0x70>)
    1340:	2210      	movs	r2, #16
    1342:	68cb      	ldr	r3, [r1, #12]
    1344:	421a      	tst	r2, r3
    1346:	d0fc      	beq.n	1342 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1348:	4b09      	ldr	r3, [pc, #36]	; (1370 <system_clock_source_get_hz+0x6c>)
    134a:	681b      	ldr	r3, [r3, #0]
    134c:	075a      	lsls	r2, r3, #29
    134e:	d50a      	bpl.n	1366 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1350:	2000      	movs	r0, #0
    1352:	4b0a      	ldr	r3, [pc, #40]	; (137c <system_clock_source_get_hz+0x78>)
    1354:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1356:	4b06      	ldr	r3, [pc, #24]	; (1370 <system_clock_source_get_hz+0x6c>)
    1358:	689b      	ldr	r3, [r3, #8]
    135a:	041b      	lsls	r3, r3, #16
    135c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    135e:	4358      	muls	r0, r3
    1360:	e002      	b.n	1368 <system_clock_source_get_hz+0x64>
		}

		return 48000000UL;

	default:
		return 0;
    1362:	2000      	movs	r0, #0
    1364:	e000      	b.n	1368 <system_clock_source_get_hz+0x64>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1366:	4806      	ldr	r0, [pc, #24]	; (1380 <system_clock_source_get_hz+0x7c>)

	default:
		return 0;
	}
}
    1368:	bd08      	pop	{r3, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	00007bf0 	.word	0x00007bf0
    1370:	20000910 	.word	0x20000910
    1374:	40000800 	.word	0x40000800
    1378:	007a1200 	.word	0x007a1200
    137c:	00001715 	.word	0x00001715
    1380:	02dc6c00 	.word	0x02dc6c00

00001384 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1384:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1386:	4b0c      	ldr	r3, [pc, #48]	; (13b8 <system_clock_source_osc8m_set_config+0x34>)
    1388:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    138a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    138c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    138e:	7840      	ldrb	r0, [r0, #1]
    1390:	2201      	movs	r2, #1
    1392:	4010      	ands	r0, r2
    1394:	0180      	lsls	r0, r0, #6
    1396:	2640      	movs	r6, #64	; 0x40
    1398:	43b4      	bics	r4, r6
    139a:	4304      	orrs	r4, r0
    139c:	402a      	ands	r2, r5
    139e:	01d0      	lsls	r0, r2, #7
    13a0:	2280      	movs	r2, #128	; 0x80
    13a2:	4394      	bics	r4, r2
    13a4:	1c22      	adds	r2, r4, #0
    13a6:	4302      	orrs	r2, r0
    13a8:	2003      	movs	r0, #3
    13aa:	4001      	ands	r1, r0
    13ac:	0209      	lsls	r1, r1, #8
    13ae:	4803      	ldr	r0, [pc, #12]	; (13bc <system_clock_source_osc8m_set_config+0x38>)
    13b0:	4002      	ands	r2, r0
    13b2:	430a      	orrs	r2, r1
    13b4:	621a      	str	r2, [r3, #32]
}
    13b6:	bd70      	pop	{r4, r5, r6, pc}
    13b8:	40000800 	.word	0x40000800
    13bc:	fffffcff 	.word	0xfffffcff

000013c0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    13c0:	2807      	cmp	r0, #7
    13c2:	d83d      	bhi.n	1440 <system_clock_source_enable+0x80>
    13c4:	0080      	lsls	r0, r0, #2
    13c6:	4b1f      	ldr	r3, [pc, #124]	; (1444 <system_clock_source_enable+0x84>)
    13c8:	581b      	ldr	r3, [r3, r0]
    13ca:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    13cc:	2000      	movs	r0, #0
    13ce:	e038      	b.n	1442 <system_clock_source_enable+0x82>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    13d0:	4b1d      	ldr	r3, [pc, #116]	; (1448 <system_clock_source_enable+0x88>)
    13d2:	6a19      	ldr	r1, [r3, #32]
    13d4:	2202      	movs	r2, #2
    13d6:	430a      	orrs	r2, r1
    13d8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    13da:	2000      	movs	r0, #0
    13dc:	e031      	b.n	1442 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    13de:	4b1a      	ldr	r3, [pc, #104]	; (1448 <system_clock_source_enable+0x88>)
    13e0:	6999      	ldr	r1, [r3, #24]
    13e2:	2202      	movs	r2, #2
    13e4:	430a      	orrs	r2, r1
    13e6:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13e8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    13ea:	e02a      	b.n	1442 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    13ec:	4b16      	ldr	r3, [pc, #88]	; (1448 <system_clock_source_enable+0x88>)
    13ee:	691a      	ldr	r2, [r3, #16]
    13f0:	b292      	uxth	r2, r2
    13f2:	2102      	movs	r1, #2
    13f4:	430a      	orrs	r2, r1
    13f6:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13f8:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    13fa:	e022      	b.n	1442 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    13fc:	4b12      	ldr	r3, [pc, #72]	; (1448 <system_clock_source_enable+0x88>)
    13fe:	695a      	ldr	r2, [r3, #20]
    1400:	b292      	uxth	r2, r2
    1402:	2102      	movs	r1, #2
    1404:	430a      	orrs	r2, r1
    1406:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1408:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    140a:	e01a      	b.n	1442 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    140c:	4b0f      	ldr	r3, [pc, #60]	; (144c <system_clock_source_enable+0x8c>)
    140e:	6819      	ldr	r1, [r3, #0]
    1410:	2202      	movs	r2, #2
    1412:	430a      	orrs	r2, r1
    1414:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1416:	681a      	ldr	r2, [r3, #0]
    1418:	4b0d      	ldr	r3, [pc, #52]	; (1450 <system_clock_source_enable+0x90>)
    141a:	401a      	ands	r2, r3
    141c:	4b0a      	ldr	r3, [pc, #40]	; (1448 <system_clock_source_enable+0x88>)
    141e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1420:	1c19      	adds	r1, r3, #0
    1422:	2210      	movs	r2, #16
    1424:	68cb      	ldr	r3, [r1, #12]
    1426:	421a      	tst	r2, r3
    1428:	d0fc      	beq.n	1424 <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    142a:	4a08      	ldr	r2, [pc, #32]	; (144c <system_clock_source_enable+0x8c>)
    142c:	6891      	ldr	r1, [r2, #8]
    142e:	4b06      	ldr	r3, [pc, #24]	; (1448 <system_clock_source_enable+0x88>)
    1430:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1432:	6851      	ldr	r1, [r2, #4]
    1434:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1436:	6812      	ldr	r2, [r2, #0]
    1438:	b292      	uxth	r2, r2
    143a:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    143c:	2000      	movs	r0, #0
    143e:	e000      	b.n	1442 <system_clock_source_enable+0x82>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1440:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1442:	4770      	bx	lr
    1444:	00007c10 	.word	0x00007c10
    1448:	40000800 	.word	0x40000800
    144c:	20000910 	.word	0x20000910
    1450:	0000ff7f 	.word	0x0000ff7f

00001454 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    1454:	b530      	push	{r4, r5, lr}
    1456:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
    1458:	4a14      	ldr	r2, [pc, #80]	; (14ac <system_clock_init+0x58>)
    145a:	4b15      	ldr	r3, [pc, #84]	; (14b0 <system_clock_init+0x5c>)
    145c:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    145e:	4b15      	ldr	r3, [pc, #84]	; (14b4 <system_clock_init+0x60>)
    1460:	685a      	ldr	r2, [r3, #4]
    1462:	211e      	movs	r1, #30
    1464:	438a      	bics	r2, r1
    1466:	605a      	str	r2, [r3, #4]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1468:	a803      	add	r0, sp, #12
    146a:	2400      	movs	r4, #0
    146c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    146e:	2501      	movs	r5, #1
    1470:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1472:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1474:	4b10      	ldr	r3, [pc, #64]	; (14b8 <system_clock_init+0x64>)
    1476:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1478:	2006      	movs	r0, #6
    147a:	4b10      	ldr	r3, [pc, #64]	; (14bc <system_clock_init+0x68>)
    147c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    147e:	4b10      	ldr	r3, [pc, #64]	; (14c0 <system_clock_init+0x6c>)
    1480:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1482:	4b10      	ldr	r3, [pc, #64]	; (14c4 <system_clock_init+0x70>)
    1484:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1486:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1488:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    148a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    148c:	466a      	mov	r2, sp
    148e:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1490:	2306      	movs	r3, #6
    1492:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1494:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1496:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1498:	2000      	movs	r0, #0
    149a:	4669      	mov	r1, sp
    149c:	4b0a      	ldr	r3, [pc, #40]	; (14c8 <system_clock_init+0x74>)
    149e:	4798      	blx	r3
    14a0:	2000      	movs	r0, #0
    14a2:	4b0a      	ldr	r3, [pc, #40]	; (14cc <system_clock_init+0x78>)
    14a4:	4798      	blx	r3
#endif
}
    14a6:	b005      	add	sp, #20
    14a8:	bd30      	pop	{r4, r5, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	00003610 	.word	0x00003610
    14b0:	40000800 	.word	0x40000800
    14b4:	41004000 	.word	0x41004000
    14b8:	00001385 	.word	0x00001385
    14bc:	000013c1 	.word	0x000013c1
    14c0:	000014d1 	.word	0x000014d1
    14c4:	40000400 	.word	0x40000400
    14c8:	000014f5 	.word	0x000014f5
    14cc:	000015a5 	.word	0x000015a5

000014d0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    14d0:	4b06      	ldr	r3, [pc, #24]	; (14ec <system_gclk_init+0x1c>)
    14d2:	6999      	ldr	r1, [r3, #24]
    14d4:	2208      	movs	r2, #8
    14d6:	430a      	orrs	r2, r1
    14d8:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    14da:	2201      	movs	r2, #1
    14dc:	4b04      	ldr	r3, [pc, #16]	; (14f0 <system_gclk_init+0x20>)
    14de:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    14e0:	1c19      	adds	r1, r3, #0
    14e2:	680b      	ldr	r3, [r1, #0]
    14e4:	4213      	tst	r3, r2
    14e6:	d1fc      	bne.n	14e2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    14e8:	4770      	bx	lr
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	40000400 	.word	0x40000400
    14f0:	40000c00 	.word	0x40000c00

000014f4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    14f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14f6:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    14f8:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    14fa:	780d      	ldrb	r5, [r1, #0]
    14fc:	022d      	lsls	r5, r5, #8
    14fe:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1500:	784b      	ldrb	r3, [r1, #1]
    1502:	2b00      	cmp	r3, #0
    1504:	d002      	beq.n	150c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1506:	2380      	movs	r3, #128	; 0x80
    1508:	02db      	lsls	r3, r3, #11
    150a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    150c:	7a4b      	ldrb	r3, [r1, #9]
    150e:	2b00      	cmp	r3, #0
    1510:	d002      	beq.n	1518 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1512:	2380      	movs	r3, #128	; 0x80
    1514:	031b      	lsls	r3, r3, #12
    1516:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1518:	684c      	ldr	r4, [r1, #4]
    151a:	2c01      	cmp	r4, #1
    151c:	d917      	bls.n	154e <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    151e:	1e63      	subs	r3, r4, #1
    1520:	421c      	tst	r4, r3
    1522:	d10f      	bne.n	1544 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1524:	2c02      	cmp	r4, #2
    1526:	d906      	bls.n	1536 <system_gclk_gen_set_config+0x42>
    1528:	2302      	movs	r3, #2
    152a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    152c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    152e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1530:	429c      	cmp	r4, r3
    1532:	d8fb      	bhi.n	152c <system_gclk_gen_set_config+0x38>
    1534:	e000      	b.n	1538 <system_gclk_gen_set_config+0x44>
    1536:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1538:	0217      	lsls	r7, r2, #8
    153a:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    153c:	2380      	movs	r3, #128	; 0x80
    153e:	035b      	lsls	r3, r3, #13
    1540:	431d      	orrs	r5, r3
    1542:	e004      	b.n	154e <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1544:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1546:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1548:	2380      	movs	r3, #128	; 0x80
    154a:	029b      	lsls	r3, r3, #10
    154c:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    154e:	7a0b      	ldrb	r3, [r1, #8]
    1550:	2b00      	cmp	r3, #0
    1552:	d002      	beq.n	155a <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1554:	2380      	movs	r3, #128	; 0x80
    1556:	039b      	lsls	r3, r3, #14
    1558:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    155a:	4a0e      	ldr	r2, [pc, #56]	; (1594 <system_gclk_gen_set_config+0xa0>)
    155c:	6813      	ldr	r3, [r2, #0]
	}

	while (system_gclk_is_syncing()) {
    155e:	0419      	lsls	r1, r3, #16
    1560:	d4fc      	bmi.n	155c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1562:	4b0d      	ldr	r3, [pc, #52]	; (1598 <system_gclk_gen_set_config+0xa4>)
    1564:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1566:	4b0d      	ldr	r3, [pc, #52]	; (159c <system_gclk_gen_set_config+0xa8>)
    1568:	701e      	strb	r6, [r3, #0]
    156a:	490a      	ldr	r1, [pc, #40]	; (1594 <system_gclk_gen_set_config+0xa0>)
    156c:	680b      	ldr	r3, [r1, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    156e:	041a      	lsls	r2, r3, #16
    1570:	d4fc      	bmi.n	156c <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1572:	4b08      	ldr	r3, [pc, #32]	; (1594 <system_gclk_gen_set_config+0xa0>)
    1574:	609f      	str	r7, [r3, #8]
    1576:	1c1a      	adds	r2, r3, #0
    1578:	6813      	ldr	r3, [r2, #0]

	while (system_gclk_is_syncing()) {
    157a:	0419      	lsls	r1, r3, #16
    157c:	d4fc      	bmi.n	1578 <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    157e:	4b05      	ldr	r3, [pc, #20]	; (1594 <system_gclk_gen_set_config+0xa0>)
    1580:	6859      	ldr	r1, [r3, #4]
    1582:	2280      	movs	r2, #128	; 0x80
    1584:	0252      	lsls	r2, r2, #9
    1586:	400a      	ands	r2, r1
    1588:	4315      	orrs	r5, r2
    158a:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    158c:	4b04      	ldr	r3, [pc, #16]	; (15a0 <system_gclk_gen_set_config+0xac>)
    158e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	40000c00 	.word	0x40000c00
    1598:	00001239 	.word	0x00001239
    159c:	40000c08 	.word	0x40000c08
    15a0:	00001279 	.word	0x00001279

000015a4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    15a4:	b510      	push	{r4, lr}
    15a6:	1c04      	adds	r4, r0, #0
    15a8:	4a0a      	ldr	r2, [pc, #40]	; (15d4 <system_gclk_gen_enable+0x30>)
    15aa:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    15ac:	0419      	lsls	r1, r3, #16
    15ae:	d4fc      	bmi.n	15aa <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15b0:	4b09      	ldr	r3, [pc, #36]	; (15d8 <system_gclk_gen_enable+0x34>)
    15b2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15b4:	4b09      	ldr	r3, [pc, #36]	; (15dc <system_gclk_gen_enable+0x38>)
    15b6:	701c      	strb	r4, [r3, #0]
    15b8:	4a06      	ldr	r2, [pc, #24]	; (15d4 <system_gclk_gen_enable+0x30>)
    15ba:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    15bc:	0419      	lsls	r1, r3, #16
    15be:	d4fc      	bmi.n	15ba <system_gclk_gen_enable+0x16>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    15c0:	4b04      	ldr	r3, [pc, #16]	; (15d4 <system_gclk_gen_enable+0x30>)
    15c2:	6859      	ldr	r1, [r3, #4]
    15c4:	2280      	movs	r2, #128	; 0x80
    15c6:	0252      	lsls	r2, r2, #9
    15c8:	430a      	orrs	r2, r1
    15ca:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <system_gclk_gen_enable+0x3c>)
    15ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15d0:	bd10      	pop	{r4, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	40000c00 	.word	0x40000c00
    15d8:	00001239 	.word	0x00001239
    15dc:	40000c04 	.word	0x40000c04
    15e0:	00001279 	.word	0x00001279

000015e4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    15e4:	b570      	push	{r4, r5, r6, lr}
    15e6:	1c04      	adds	r4, r0, #0
    15e8:	4a18      	ldr	r2, [pc, #96]	; (164c <system_gclk_gen_get_hz+0x68>)
    15ea:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    15ec:	0419      	lsls	r1, r3, #16
    15ee:	d4fc      	bmi.n	15ea <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15f0:	4b17      	ldr	r3, [pc, #92]	; (1650 <system_gclk_gen_get_hz+0x6c>)
    15f2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15f4:	4b17      	ldr	r3, [pc, #92]	; (1654 <system_gclk_gen_get_hz+0x70>)
    15f6:	701c      	strb	r4, [r3, #0]
    15f8:	4a14      	ldr	r2, [pc, #80]	; (164c <system_gclk_gen_get_hz+0x68>)
    15fa:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    15fc:	0419      	lsls	r1, r3, #16
    15fe:	d4fc      	bmi.n	15fa <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1600:	4e12      	ldr	r6, [pc, #72]	; (164c <system_gclk_gen_get_hz+0x68>)
    1602:	6870      	ldr	r0, [r6, #4]
    1604:	04c0      	lsls	r0, r0, #19
    1606:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1608:	4b13      	ldr	r3, [pc, #76]	; (1658 <system_gclk_gen_get_hz+0x74>)
    160a:	4798      	blx	r3
    160c:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    160e:	4b11      	ldr	r3, [pc, #68]	; (1654 <system_gclk_gen_get_hz+0x70>)
    1610:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1612:	6876      	ldr	r6, [r6, #4]
    1614:	02f6      	lsls	r6, r6, #11
    1616:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1618:	4b10      	ldr	r3, [pc, #64]	; (165c <system_gclk_gen_get_hz+0x78>)
    161a:	701c      	strb	r4, [r3, #0]
    161c:	4a0b      	ldr	r2, [pc, #44]	; (164c <system_gclk_gen_get_hz+0x68>)
    161e:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1620:	0419      	lsls	r1, r3, #16
    1622:	d4fc      	bmi.n	161e <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1624:	4b09      	ldr	r3, [pc, #36]	; (164c <system_gclk_gen_get_hz+0x68>)
    1626:	689c      	ldr	r4, [r3, #8]
    1628:	0224      	lsls	r4, r4, #8
    162a:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    162c:	4b0c      	ldr	r3, [pc, #48]	; (1660 <system_gclk_gen_get_hz+0x7c>)
    162e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1630:	2e00      	cmp	r6, #0
    1632:	d107      	bne.n	1644 <system_gclk_gen_get_hz+0x60>
    1634:	2c01      	cmp	r4, #1
    1636:	d907      	bls.n	1648 <system_gclk_gen_get_hz+0x64>
		gen_input_hz /= divider;
    1638:	1c28      	adds	r0, r5, #0
    163a:	1c21      	adds	r1, r4, #0
    163c:	4b09      	ldr	r3, [pc, #36]	; (1664 <system_gclk_gen_get_hz+0x80>)
    163e:	4798      	blx	r3
    1640:	1c05      	adds	r5, r0, #0
    1642:	e001      	b.n	1648 <system_gclk_gen_get_hz+0x64>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1644:	3401      	adds	r4, #1
    1646:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1648:	1c28      	adds	r0, r5, #0
    164a:	bd70      	pop	{r4, r5, r6, pc}
    164c:	40000c00 	.word	0x40000c00
    1650:	00001239 	.word	0x00001239
    1654:	40000c04 	.word	0x40000c04
    1658:	00001305 	.word	0x00001305
    165c:	40000c08 	.word	0x40000c08
    1660:	00001279 	.word	0x00001279
    1664:	00001b81 	.word	0x00001b81

00001668 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1668:	b510      	push	{r4, lr}
    166a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    166c:	4b06      	ldr	r3, [pc, #24]	; (1688 <system_gclk_chan_enable+0x20>)
    166e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1670:	4b06      	ldr	r3, [pc, #24]	; (168c <system_gclk_chan_enable+0x24>)
    1672:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1674:	4b06      	ldr	r3, [pc, #24]	; (1690 <system_gclk_chan_enable+0x28>)
    1676:	6819      	ldr	r1, [r3, #0]
    1678:	0c09      	lsrs	r1, r1, #16
    167a:	2280      	movs	r2, #128	; 0x80
    167c:	01d2      	lsls	r2, r2, #7
    167e:	430a      	orrs	r2, r1
    1680:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1682:	4b04      	ldr	r3, [pc, #16]	; (1694 <system_gclk_chan_enable+0x2c>)
    1684:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1686:	bd10      	pop	{r4, pc}
    1688:	00001239 	.word	0x00001239
    168c:	40000c02 	.word	0x40000c02
    1690:	40000c00 	.word	0x40000c00
    1694:	00001279 	.word	0x00001279

00001698 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1698:	b510      	push	{r4, lr}
    169a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    169c:	4b10      	ldr	r3, [pc, #64]	; (16e0 <system_gclk_chan_disable+0x48>)
    169e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16a0:	4b10      	ldr	r3, [pc, #64]	; (16e4 <system_gclk_chan_disable+0x4c>)
    16a2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    16a4:	4b10      	ldr	r3, [pc, #64]	; (16e8 <system_gclk_chan_disable+0x50>)
    16a6:	6818      	ldr	r0, [r3, #0]
    16a8:	0100      	lsls	r0, r0, #4
    16aa:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    16ac:	8859      	ldrh	r1, [r3, #2]
    16ae:	4a0f      	ldr	r2, [pc, #60]	; (16ec <system_gclk_chan_disable+0x54>)
    16b0:	400a      	ands	r2, r1
    16b2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    16b4:	681a      	ldr	r2, [r3, #0]
    16b6:	0c12      	lsrs	r2, r2, #16
    16b8:	490d      	ldr	r1, [pc, #52]	; (16f0 <system_gclk_chan_disable+0x58>)
    16ba:	400a      	ands	r2, r1
    16bc:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    16be:	1c19      	adds	r1, r3, #0
    16c0:	2280      	movs	r2, #128	; 0x80
    16c2:	01d2      	lsls	r2, r2, #7
    16c4:	680b      	ldr	r3, [r1, #0]
    16c6:	0c1b      	lsrs	r3, r3, #16
    16c8:	4213      	tst	r3, r2
    16ca:	d1fb      	bne.n	16c4 <system_gclk_chan_disable+0x2c>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    16cc:	4b06      	ldr	r3, [pc, #24]	; (16e8 <system_gclk_chan_disable+0x50>)
    16ce:	0201      	lsls	r1, r0, #8
    16d0:	8858      	ldrh	r0, [r3, #2]
    16d2:	4a06      	ldr	r2, [pc, #24]	; (16ec <system_gclk_chan_disable+0x54>)
    16d4:	4002      	ands	r2, r0
    16d6:	430a      	orrs	r2, r1
    16d8:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16da:	4b06      	ldr	r3, [pc, #24]	; (16f4 <system_gclk_chan_disable+0x5c>)
    16dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16de:	bd10      	pop	{r4, pc}
    16e0:	00001239 	.word	0x00001239
    16e4:	40000c02 	.word	0x40000c02
    16e8:	40000c00 	.word	0x40000c00
    16ec:	fffff0ff 	.word	0xfffff0ff
    16f0:	ffffbfff 	.word	0xffffbfff
    16f4:	00001279 	.word	0x00001279

000016f8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    16f8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    16fa:	780c      	ldrb	r4, [r1, #0]
    16fc:	0224      	lsls	r4, r4, #8
    16fe:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1700:	4b02      	ldr	r3, [pc, #8]	; (170c <system_gclk_chan_set_config+0x14>)
    1702:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1704:	b2a4      	uxth	r4, r4
    1706:	4b02      	ldr	r3, [pc, #8]	; (1710 <system_gclk_chan_set_config+0x18>)
    1708:	805c      	strh	r4, [r3, #2]
}
    170a:	bd10      	pop	{r4, pc}
    170c:	00001699 	.word	0x00001699
    1710:	40000c00 	.word	0x40000c00

00001714 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1714:	b510      	push	{r4, lr}
    1716:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1718:	4b06      	ldr	r3, [pc, #24]	; (1734 <system_gclk_chan_get_hz+0x20>)
    171a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    171c:	4b06      	ldr	r3, [pc, #24]	; (1738 <system_gclk_chan_get_hz+0x24>)
    171e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1720:	4b06      	ldr	r3, [pc, #24]	; (173c <system_gclk_chan_get_hz+0x28>)
    1722:	681c      	ldr	r4, [r3, #0]
    1724:	0124      	lsls	r4, r4, #4
    1726:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1728:	4b05      	ldr	r3, [pc, #20]	; (1740 <system_gclk_chan_get_hz+0x2c>)
    172a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    172c:	1c20      	adds	r0, r4, #0
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <system_gclk_chan_get_hz+0x30>)
    1730:	4798      	blx	r3
}
    1732:	bd10      	pop	{r4, pc}
    1734:	00001239 	.word	0x00001239
    1738:	40000c02 	.word	0x40000c02
    173c:	40000c00 	.word	0x40000c00
    1740:	00001279 	.word	0x00001279
    1744:	000015e5 	.word	0x000015e5

00001748 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1748:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    174a:	78d4      	ldrb	r4, [r2, #3]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    174c:	2300      	movs	r3, #0

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    174e:	2c00      	cmp	r4, #0
    1750:	d11e      	bne.n	1790 <_system_pinmux_config+0x48>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1752:	7813      	ldrb	r3, [r2, #0]
    1754:	2b80      	cmp	r3, #128	; 0x80
    1756:	d004      	beq.n	1762 <_system_pinmux_config+0x1a>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1758:	061b      	lsls	r3, r3, #24
    175a:	2480      	movs	r4, #128	; 0x80
    175c:	0264      	lsls	r4, r4, #9
    175e:	4323      	orrs	r3, r4
    1760:	e000      	b.n	1764 <_system_pinmux_config+0x1c>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1762:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1764:	7854      	ldrb	r4, [r2, #1]
    1766:	2502      	movs	r5, #2
    1768:	43ac      	bics	r4, r5
    176a:	d10a      	bne.n	1782 <_system_pinmux_config+0x3a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    176c:	7894      	ldrb	r4, [r2, #2]
    176e:	2c00      	cmp	r4, #0
    1770:	d103      	bne.n	177a <_system_pinmux_config+0x32>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1772:	2480      	movs	r4, #128	; 0x80
    1774:	02a4      	lsls	r4, r4, #10
    1776:	4323      	orrs	r3, r4
    1778:	e002      	b.n	1780 <_system_pinmux_config+0x38>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    177a:	24c0      	movs	r4, #192	; 0xc0
    177c:	02e4      	lsls	r4, r4, #11
    177e:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1780:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1782:	7854      	ldrb	r4, [r2, #1]
    1784:	3c01      	subs	r4, #1
    1786:	b2e4      	uxtb	r4, r4
    1788:	2c01      	cmp	r4, #1
    178a:	d801      	bhi.n	1790 <_system_pinmux_config+0x48>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    178c:	4c10      	ldr	r4, [pc, #64]	; (17d0 <_system_pinmux_config+0x88>)
    178e:	4023      	ands	r3, r4
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1790:	040d      	lsls	r5, r1, #16
    1792:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1794:	24a0      	movs	r4, #160	; 0xa0
    1796:	05e4      	lsls	r4, r4, #23
    1798:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    179a:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    179c:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    179e:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17a0:	24d0      	movs	r4, #208	; 0xd0
    17a2:	0624      	lsls	r4, r4, #24
    17a4:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17a6:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17a8:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    17aa:	78d4      	ldrb	r4, [r2, #3]
    17ac:	2c00      	cmp	r4, #0
    17ae:	d10d      	bne.n	17cc <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    17b0:	035c      	lsls	r4, r3, #13
    17b2:	d505      	bpl.n	17c0 <_system_pinmux_config+0x78>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    17b4:	7893      	ldrb	r3, [r2, #2]
    17b6:	2b01      	cmp	r3, #1
    17b8:	d101      	bne.n	17be <_system_pinmux_config+0x76>
				port->OUTSET.reg = pin_mask;
    17ba:	6181      	str	r1, [r0, #24]
    17bc:	e000      	b.n	17c0 <_system_pinmux_config+0x78>
			} else {
				port->OUTCLR.reg = pin_mask;
    17be:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17c0:	7853      	ldrb	r3, [r2, #1]
    17c2:	3b01      	subs	r3, #1
    17c4:	b2db      	uxtb	r3, r3
    17c6:	2b01      	cmp	r3, #1
    17c8:	d800      	bhi.n	17cc <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    17ca:	6081      	str	r1, [r0, #8]
		}
	}
}
    17cc:	bd30      	pop	{r4, r5, pc}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	fffbffff 	.word	0xfffbffff

000017d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    17d4:	b508      	push	{r3, lr}
    17d6:	1c03      	adds	r3, r0, #0
    17d8:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17da:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    17dc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17de:	2900      	cmp	r1, #0
    17e0:	d103      	bne.n	17ea <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    17e2:	0958      	lsrs	r0, r3, #5
    17e4:	01c0      	lsls	r0, r0, #7
    17e6:	4904      	ldr	r1, [pc, #16]	; (17f8 <system_pinmux_pin_set_config+0x24>)
    17e8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    17ea:	211f      	movs	r1, #31
    17ec:	400b      	ands	r3, r1
    17ee:	2101      	movs	r1, #1
    17f0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    17f2:	4b02      	ldr	r3, [pc, #8]	; (17fc <system_pinmux_pin_set_config+0x28>)
    17f4:	4798      	blx	r3
}
    17f6:	bd08      	pop	{r3, pc}
    17f8:	41004400 	.word	0x41004400
    17fc:	00001749 	.word	0x00001749

00001800 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1800:	4770      	bx	lr
    1802:	46c0      	nop			; (mov r8, r8)

00001804 <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
    1804:	e7fe      	b.n	1804 <HardFault_Handler>
    1806:	46c0      	nop			; (mov r8, r8)

00001808 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1808:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    180a:	4b04      	ldr	r3, [pc, #16]	; (181c <system_init+0x14>)
    180c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    180e:	4b04      	ldr	r3, [pc, #16]	; (1820 <system_init+0x18>)
    1810:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1812:	4b04      	ldr	r3, [pc, #16]	; (1824 <system_init+0x1c>)
    1814:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1816:	4b04      	ldr	r3, [pc, #16]	; (1828 <system_init+0x20>)
    1818:	4798      	blx	r3
}
    181a:	bd08      	pop	{r3, pc}
    181c:	00001455 	.word	0x00001455
    1820:	000012a9 	.word	0x000012a9
    1824:	00001801 	.word	0x00001801
    1828:	00001801 	.word	0x00001801

0000182c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    182c:	e7fe      	b.n	182c <Dummy_Handler>
    182e:	46c0      	nop			; (mov r8, r8)

00001830 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1830:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1832:	4b19      	ldr	r3, [pc, #100]	; (1898 <Reset_Handler+0x68>)
    1834:	4a19      	ldr	r2, [pc, #100]	; (189c <Reset_Handler+0x6c>)
    1836:	429a      	cmp	r2, r3
    1838:	d003      	beq.n	1842 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    183a:	4b19      	ldr	r3, [pc, #100]	; (18a0 <Reset_Handler+0x70>)
    183c:	4a16      	ldr	r2, [pc, #88]	; (1898 <Reset_Handler+0x68>)
    183e:	429a      	cmp	r2, r3
    1840:	d304      	bcc.n	184c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1842:	4b18      	ldr	r3, [pc, #96]	; (18a4 <Reset_Handler+0x74>)
    1844:	4a18      	ldr	r2, [pc, #96]	; (18a8 <Reset_Handler+0x78>)
    1846:	429a      	cmp	r2, r3
    1848:	d310      	bcc.n	186c <Reset_Handler+0x3c>
    184a:	e01b      	b.n	1884 <Reset_Handler+0x54>
    184c:	4b17      	ldr	r3, [pc, #92]	; (18ac <Reset_Handler+0x7c>)
    184e:	4814      	ldr	r0, [pc, #80]	; (18a0 <Reset_Handler+0x70>)
    1850:	3003      	adds	r0, #3
    1852:	1ac0      	subs	r0, r0, r3
    1854:	0880      	lsrs	r0, r0, #2
    1856:	3001      	adds	r0, #1
    1858:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    185a:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    185c:	490e      	ldr	r1, [pc, #56]	; (1898 <Reset_Handler+0x68>)
    185e:	4a0f      	ldr	r2, [pc, #60]	; (189c <Reset_Handler+0x6c>)
    1860:	58d4      	ldr	r4, [r2, r3]
    1862:	50cc      	str	r4, [r1, r3]
    1864:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1866:	4283      	cmp	r3, r0
    1868:	d1fa      	bne.n	1860 <Reset_Handler+0x30>
    186a:	e7ea      	b.n	1842 <Reset_Handler+0x12>
    186c:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <Reset_Handler+0x78>)
    186e:	1d1a      	adds	r2, r3, #4
    1870:	490c      	ldr	r1, [pc, #48]	; (18a4 <Reset_Handler+0x74>)
    1872:	3103      	adds	r1, #3
    1874:	1a89      	subs	r1, r1, r2
    1876:	0889      	lsrs	r1, r1, #2
    1878:	0089      	lsls	r1, r1, #2
    187a:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    187c:	2100      	movs	r1, #0
    187e:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1880:	4293      	cmp	r3, r2
    1882:	d1fc      	bne.n	187e <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1884:	4b0a      	ldr	r3, [pc, #40]	; (18b0 <Reset_Handler+0x80>)
    1886:	217f      	movs	r1, #127	; 0x7f
    1888:	4a0a      	ldr	r2, [pc, #40]	; (18b4 <Reset_Handler+0x84>)
    188a:	438a      	bics	r2, r1
    188c:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    188e:	4b0a      	ldr	r3, [pc, #40]	; (18b8 <Reset_Handler+0x88>)
    1890:	4798      	blx	r3

        /* Branch to main function */
        main();
    1892:	4b0a      	ldr	r3, [pc, #40]	; (18bc <Reset_Handler+0x8c>)
    1894:	4798      	blx	r3
    1896:	e7fe      	b.n	1896 <Reset_Handler+0x66>
    1898:	20000000 	.word	0x20000000
    189c:	00007edc 	.word	0x00007edc
    18a0:	200008c4 	.word	0x200008c4
    18a4:	200009fc 	.word	0x200009fc
    18a8:	200008c8 	.word	0x200008c8
    18ac:	20000004 	.word	0x20000004
    18b0:	e000ed00 	.word	0xe000ed00
    18b4:	00000000 	.word	0x00000000
    18b8:	000033a9 	.word	0x000033a9
    18bc:	00001a19 	.word	0x00001a19

000018c0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    18c0:	4b06      	ldr	r3, [pc, #24]	; (18dc <_sbrk+0x1c>)
    18c2:	681b      	ldr	r3, [r3, #0]
    18c4:	2b00      	cmp	r3, #0
    18c6:	d102      	bne.n	18ce <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    18c8:	4a05      	ldr	r2, [pc, #20]	; (18e0 <_sbrk+0x20>)
    18ca:	4b04      	ldr	r3, [pc, #16]	; (18dc <_sbrk+0x1c>)
    18cc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    18ce:	4a03      	ldr	r2, [pc, #12]	; (18dc <_sbrk+0x1c>)
    18d0:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    18d2:	1818      	adds	r0, r3, r0
    18d4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    18d6:	1c18      	adds	r0, r3, #0
    18d8:	4770      	bx	lr
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	20000924 	.word	0x20000924
    18e0:	20002a00 	.word	0x20002a00

000018e4 <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    18e4:	2280      	movs	r2, #128	; 0x80
    18e6:	01d2      	lsls	r2, r2, #7
    18e8:	4b01      	ldr	r3, [pc, #4]	; (18f0 <usart_write_callback+0xc>)
    18ea:	61da      	str	r2, [r3, #28]
}

void usart_write_callback(const struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    18ec:	4770      	bx	lr
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	41004400 	.word	0x41004400

000018f4 <usart_read_callback>:
/************************************************************************/
/* Subroutines                                                          */
/************************************************************************/

void usart_read_callback(const struct usart_module *const usart_module)
{
    18f4:	b508      	push	{r3, lr}
	usart_write_buffer_job(&usart_instance,
    18f6:	4803      	ldr	r0, [pc, #12]	; (1904 <usart_read_callback+0x10>)
    18f8:	4903      	ldr	r1, [pc, #12]	; (1908 <usart_read_callback+0x14>)
    18fa:	2205      	movs	r2, #5
    18fc:	4b03      	ldr	r3, [pc, #12]	; (190c <usart_read_callback+0x18>)
    18fe:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
    1900:	bd08      	pop	{r3, pc}
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	200009c0 	.word	0x200009c0
    1908:	200009e4 	.word	0x200009e4
    190c:	000005d1 	.word	0x000005d1

00001910 <enable_tc_clocks>:
/************************************************************************/
/* INIT Clocks                                                          */
/************************************************************************/

void enable_tc_clocks(void)
{
    1910:	b500      	push	{lr}
    1912:	b083      	sub	sp, #12
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <enable_tc_clocks+0x28>)
    1916:	6a19      	ldr	r1, [r3, #32]
    1918:	2280      	movs	r2, #128	; 0x80
    191a:	0112      	lsls	r2, r2, #4
    191c:	430a      	orrs	r2, r1
    191e:	621a      	str	r2, [r3, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1920:	a901      	add	r1, sp, #4
    1922:	2300      	movs	r3, #0
    1924:	700b      	strb	r3, [r1, #0]
	/* Set up the GCLK for the module */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	
	//Setup generic clock 0 (also the clock for MCU (running at 8 Mhz) as source for the timer clock)
	gclk_chan_conf.source_generator = GCLK_GENERATOR_0;
	system_gclk_chan_set_config(TC3_GCLK_ID, &gclk_chan_conf);
    1926:	2014      	movs	r0, #20
    1928:	4b04      	ldr	r3, [pc, #16]	; (193c <enable_tc_clocks+0x2c>)
    192a:	4798      	blx	r3
	
	//Enable the generic clock for the Timer/ Counter block
	system_gclk_chan_enable(TC3_GCLK_ID);
    192c:	2014      	movs	r0, #20
    192e:	4b04      	ldr	r3, [pc, #16]	; (1940 <enable_tc_clocks+0x30>)
    1930:	4798      	blx	r3
}
    1932:	b003      	add	sp, #12
    1934:	bd00      	pop	{pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	40000400 	.word	0x40000400
    193c:	000016f9 	.word	0x000016f9
    1940:	00001669 	.word	0x00001669

00001944 <configure_usart>:
/************************************************************************/
/* INIT USART                                                           */
/************************************************************************/

void configure_usart(void)
{
    1944:	b570      	push	{r4, r5, r6, lr}
    1946:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1948:	2380      	movs	r3, #128	; 0x80
    194a:	05db      	lsls	r3, r3, #23
    194c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    194e:	2300      	movs	r3, #0
    1950:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1952:	22ff      	movs	r2, #255	; 0xff
    1954:	4669      	mov	r1, sp
    1956:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1958:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    195a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    195c:	2201      	movs	r2, #1
    195e:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    1960:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    1962:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1964:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    1966:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1968:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    196a:	774b      	strb	r3, [r1, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 115200;
    196c:	23e1      	movs	r3, #225	; 0xe1
    196e:	025b      	lsls	r3, r3, #9
    1970:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1972:	23c4      	movs	r3, #196	; 0xc4
    1974:	039b      	lsls	r3, r3, #14
    1976:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1978:	2301      	movs	r3, #1
    197a:	425b      	negs	r3, r3
    197c:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    197e:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1980:	4b11      	ldr	r3, [pc, #68]	; (19c8 <configure_usart+0x84>)
    1982:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1984:	4b11      	ldr	r3, [pc, #68]	; (19cc <configure_usart+0x88>)
    1986:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance,
    1988:	4e11      	ldr	r6, [pc, #68]	; (19d0 <configure_usart+0x8c>)
    198a:	4d12      	ldr	r5, [pc, #72]	; (19d4 <configure_usart+0x90>)
    198c:	4c12      	ldr	r4, [pc, #72]	; (19d8 <configure_usart+0x94>)
    198e:	1c30      	adds	r0, r6, #0
    1990:	1c29      	adds	r1, r5, #0
    1992:	466a      	mov	r2, sp
    1994:	47a0      	blx	r4
    1996:	2800      	cmp	r0, #0
    1998:	d1f9      	bne.n	198e <configure_usart+0x4a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    199a:	4d0d      	ldr	r5, [pc, #52]	; (19d0 <configure_usart+0x8c>)
    199c:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    199e:	1c20      	adds	r0, r4, #0
    19a0:	4b0e      	ldr	r3, [pc, #56]	; (19dc <configure_usart+0x98>)
    19a2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    19a4:	231f      	movs	r3, #31
    19a6:	4018      	ands	r0, r3
    19a8:	2301      	movs	r3, #1
    19aa:	4083      	lsls	r3, r0
    19ac:	1c18      	adds	r0, r3, #0
    19ae:	4b0c      	ldr	r3, [pc, #48]	; (19e0 <configure_usart+0x9c>)
    19b0:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    19b2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    19b4:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    19b6:	0419      	lsls	r1, r3, #16
    19b8:	d4fc      	bmi.n	19b4 <configure_usart+0x70>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    19ba:	6822      	ldr	r2, [r4, #0]
    19bc:	2302      	movs	r3, #2
    19be:	4313      	orrs	r3, r2
    19c0:	6023      	str	r3, [r4, #0]
	EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
	usart_enable(&usart_instance);
}
    19c2:	b00c      	add	sp, #48	; 0x30
    19c4:	bd70      	pop	{r4, r5, r6, pc}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	00180002 	.word	0x00180002
    19cc:	00190002 	.word	0x00190002
    19d0:	200009c0 	.word	0x200009c0
    19d4:	42001400 	.word	0x42001400
    19d8:	00000381 	.word	0x00000381
    19dc:	000011ad 	.word	0x000011ad
    19e0:	e000e100 	.word	0xe000e100

000019e4 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    19e4:	b538      	push	{r3, r4, r5, lr}
	usart_register_callback(&usart_instance,
    19e6:	4c08      	ldr	r4, [pc, #32]	; (1a08 <configure_usart_callbacks+0x24>)
    19e8:	1c20      	adds	r0, r4, #0
    19ea:	4908      	ldr	r1, [pc, #32]	; (1a0c <configure_usart_callbacks+0x28>)
    19ec:	2200      	movs	r2, #0
    19ee:	4d08      	ldr	r5, [pc, #32]	; (1a10 <configure_usart_callbacks+0x2c>)
    19f0:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    19f2:	1c20      	adds	r0, r4, #0
    19f4:	4907      	ldr	r1, [pc, #28]	; (1a14 <configure_usart_callbacks+0x30>)
    19f6:	2201      	movs	r2, #1
    19f8:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    19fa:	2321      	movs	r3, #33	; 0x21
    19fc:	5ce1      	ldrb	r1, [r4, r3]
    19fe:	2203      	movs	r2, #3
    1a00:	430a      	orrs	r2, r1
    1a02:	54e2      	strb	r2, [r4, r3]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    1a04:	bd38      	pop	{r3, r4, r5, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	200009c0 	.word	0x200009c0
    1a0c:	000018e5 	.word	0x000018e5
    1a10:	000005b9 	.word	0x000005b9
    1a14:	000018f5 	.word	0x000018f5

00001a18 <main>:
/************************************************************************/
/* Main                                                                 */
/************************************************************************/

int main (void)
{
    1a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1a:	464f      	mov	r7, r9
    1a1c:	b480      	push	{r7}
    1a1e:	b0a6      	sub	sp, #152	; 0x98
	system_init();
    1a20:	4b3d      	ldr	r3, [pc, #244]	; (1b18 <main+0x100>)
    1a22:	4798      	blx	r3
	system_clock_init();
    1a24:	4b3d      	ldr	r3, [pc, #244]	; (1b1c <main+0x104>)
    1a26:	4798      	blx	r3
	at30tse_init();
    1a28:	4b3d      	ldr	r3, [pc, #244]	; (1b20 <main+0x108>)
    1a2a:	4798      	blx	r3
	
	enable_tc_clocks();
    1a2c:	4b3d      	ldr	r3, [pc, #244]	; (1b24 <main+0x10c>)
    1a2e:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    1a30:	4b3d      	ldr	r3, [pc, #244]	; (1b28 <main+0x110>)
    1a32:	4a3e      	ldr	r2, [pc, #248]	; (1b2c <main+0x114>)
    1a34:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1a36:	4a3e      	ldr	r2, [pc, #248]	; (1b30 <main+0x118>)
    1a38:	6a10      	ldr	r0, [r2, #32]
    1a3a:	0200      	lsls	r0, r0, #8
    1a3c:	0a00      	lsrs	r0, r0, #8
    1a3e:	21c0      	movs	r1, #192	; 0xc0
    1a40:	0609      	lsls	r1, r1, #24
    1a42:	4301      	orrs	r1, r0
    1a44:	6211      	str	r1, [r2, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1a46:	2400      	movs	r4, #0
    1a48:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1a4a:	2207      	movs	r2, #7
    1a4c:	601a      	str	r2, [r3, #0]
	SysTick_Config(8000);
	
	configure_usart();
    1a4e:	4b39      	ldr	r3, [pc, #228]	; (1b34 <main+0x11c>)
    1a50:	4798      	blx	r3
	configure_usart_callbacks();
    1a52:	4b39      	ldr	r3, [pc, #228]	; (1b38 <main+0x120>)
    1a54:	4798      	blx	r3
	
	// Write a confirmation string to PC
	uint8_t string[] = "This is the SAMD20 with your Temp readings!\r\n";
    1a56:	a91a      	add	r1, sp, #104	; 0x68
    1a58:	4a38      	ldr	r2, [pc, #224]	; (1b3c <main+0x124>)
    1a5a:	1c0b      	adds	r3, r1, #0
    1a5c:	ca61      	ldmia	r2!, {r0, r5, r6}
    1a5e:	c361      	stmia	r3!, {r0, r5, r6}
    1a60:	ca61      	ldmia	r2!, {r0, r5, r6}
    1a62:	c361      	stmia	r3!, {r0, r5, r6}
    1a64:	ca61      	ldmia	r2!, {r0, r5, r6}
    1a66:	c361      	stmia	r3!, {r0, r5, r6}
    1a68:	ca21      	ldmia	r2!, {r0, r5}
    1a6a:	c321      	stmia	r3!, {r0, r5}
    1a6c:	8812      	ldrh	r2, [r2, #0]
    1a6e:	801a      	strh	r2, [r3, #0]
	usart_write_buffer_job(&usart_instance, string, sizeof(string));
    1a70:	4833      	ldr	r0, [pc, #204]	; (1b40 <main+0x128>)
    1a72:	222e      	movs	r2, #46	; 0x2e
    1a74:	4b33      	ldr	r3, [pc, #204]	; (1b44 <main+0x12c>)
    1a76:	4798      	blx	r3
	
	
	// Sometimes when I use ASF i feel like I am writing a novel.
	volatile uint16_t thigh = 0;
    1a78:	466d      	mov	r5, sp
    1a7a:	3566      	adds	r5, #102	; 0x66
    1a7c:	802c      	strh	r4, [r5, #0]
	thigh = at30tse_read_register(AT30TSE_THIGH_REG,
    1a7e:	2003      	movs	r0, #3
    1a80:	2100      	movs	r1, #0
    1a82:	2202      	movs	r2, #2
    1a84:	4e30      	ldr	r6, [pc, #192]	; (1b48 <main+0x130>)
    1a86:	47b0      	blx	r6
    1a88:	8028      	strh	r0, [r5, #0]
	AT30TSE_NON_VOLATILE_REG, AT30TSE_THIGH_REG_SIZE);
	volatile uint16_t tlow = 0;
    1a8a:	ad19      	add	r5, sp, #100	; 0x64
    1a8c:	802c      	strh	r4, [r5, #0]
	tlow = at30tse_read_register(AT30TSE_TLOW_REG,
    1a8e:	2002      	movs	r0, #2
    1a90:	2100      	movs	r1, #0
    1a92:	2202      	movs	r2, #2
    1a94:	47b0      	blx	r6
    1a96:	8028      	strh	r0, [r5, #0]
	AT30TSE_NON_VOLATILE_REG, AT30TSE_TLOW_REG_SIZE);
	/* Set 12-bit resolution mode. */
	at30tse_write_config_register(
    1a98:	20c0      	movs	r0, #192	; 0xc0
    1a9a:	01c0      	lsls	r0, r0, #7
    1a9c:	4b2b      	ldr	r3, [pc, #172]	; (1b4c <main+0x134>)
    1a9e:	4798      	blx	r3
	AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
	while (1) 
	{
		if (sys_timer1 > 1000)
    1aa0:	4e2b      	ldr	r6, [pc, #172]	; (1b50 <main+0x138>)
		{
			temp_res = at30tse_read_temperature();
    1aa2:	482c      	ldr	r0, [pc, #176]	; (1b54 <main+0x13c>)
    1aa4:	4681      	mov	r9, r0
	/* Set 12-bit resolution mode. */
	at30tse_write_config_register(
	AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
	while (1) 
	{
		if (sys_timer1 > 1000)
    1aa6:	22fa      	movs	r2, #250	; 0xfa
    1aa8:	0092      	lsls	r2, r2, #2
    1aaa:	6833      	ldr	r3, [r6, #0]
    1aac:	4293      	cmp	r3, r2
    1aae:	d9fc      	bls.n	1aaa <main+0x92>
		{
			temp_res = at30tse_read_temperature();
    1ab0:	47c8      	blx	r9
    1ab2:	1c04      	adds	r4, r0, #0
    1ab4:	1c0d      	adds	r5, r1, #0
			
			if (temp_res < 0.0)
    1ab6:	4b15      	ldr	r3, [pc, #84]	; (1b0c <main+0xf4>)
    1ab8:	4a13      	ldr	r2, [pc, #76]	; (1b08 <main+0xf0>)
    1aba:	4f27      	ldr	r7, [pc, #156]	; (1b58 <main+0x140>)
    1abc:	47b8      	blx	r7
    1abe:	2800      	cmp	r0, #0
    1ac0:	d103      	bne.n	1aca <main+0xb2>
	AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
	while (1) 
	{
		if (sys_timer1 > 1000)
		{
			temp_res = at30tse_read_temperature();
    1ac2:	4b26      	ldr	r3, [pc, #152]	; (1b5c <main+0x144>)
    1ac4:	601c      	str	r4, [r3, #0]
    1ac6:	605d      	str	r5, [r3, #4]
    1ac8:	e00b      	b.n	1ae2 <main+0xca>
			
			if (temp_res < 0.0)
			{
				temp_res = ((128 + temp_res)*-1);	
    1aca:	4f24      	ldr	r7, [pc, #144]	; (1b5c <main+0x144>)
    1acc:	1c20      	adds	r0, r4, #0
    1ace:	1c29      	adds	r1, r5, #0
    1ad0:	4a0f      	ldr	r2, [pc, #60]	; (1b10 <main+0xf8>)
    1ad2:	4b10      	ldr	r3, [pc, #64]	; (1b14 <main+0xfc>)
    1ad4:	4c22      	ldr	r4, [pc, #136]	; (1b60 <main+0x148>)
    1ad6:	47a0      	blx	r4
    1ad8:	6038      	str	r0, [r7, #0]
    1ada:	2380      	movs	r3, #128	; 0x80
    1adc:	061b      	lsls	r3, r3, #24
    1ade:	18c9      	adds	r1, r1, r3
    1ae0:	6079      	str	r1, [r7, #4]
			}
			
			char tx_buffer[100];
			sprintf(tx_buffer, "Temperature = %f \r\n", temp_res);
    1ae2:	4b1e      	ldr	r3, [pc, #120]	; (1b5c <main+0x144>)
    1ae4:	681a      	ldr	r2, [r3, #0]
    1ae6:	685b      	ldr	r3, [r3, #4]
    1ae8:	4668      	mov	r0, sp
    1aea:	491e      	ldr	r1, [pc, #120]	; (1b64 <main+0x14c>)
    1aec:	4c1e      	ldr	r4, [pc, #120]	; (1b68 <main+0x150>)
    1aee:	47a0      	blx	r4
			usart_write_buffer_job(&usart_instance, tx_buffer, sizeof(tx_buffer));
    1af0:	4813      	ldr	r0, [pc, #76]	; (1b40 <main+0x128>)
    1af2:	4669      	mov	r1, sp
    1af4:	2264      	movs	r2, #100	; 0x64
    1af6:	4b13      	ldr	r3, [pc, #76]	; (1b44 <main+0x12c>)
    1af8:	4798      	blx	r3
			
			// Reset sys_timer1
			sys_timer1 = 0;
    1afa:	2200      	movs	r2, #0
    1afc:	4b14      	ldr	r3, [pc, #80]	; (1b50 <main+0x138>)
    1afe:	601a      	str	r2, [r3, #0]
    1b00:	e7d1      	b.n	1aa6 <main+0x8e>
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	46c0      	nop			; (mov r8, r8)
    1b06:	46c0      	nop			; (mov r8, r8)
	...
    1b14:	40600000 	.word	0x40600000
    1b18:	00001809 	.word	0x00001809
    1b1c:	00001455 	.word	0x00001455
    1b20:	00000161 	.word	0x00000161
    1b24:	00001911 	.word	0x00001911
    1b28:	e000e010 	.word	0xe000e010
    1b2c:	00001f3f 	.word	0x00001f3f
    1b30:	e000ed00 	.word	0xe000ed00
    1b34:	00001945 	.word	0x00001945
    1b38:	000019e5 	.word	0x000019e5
    1b3c:	00007c44 	.word	0x00007c44
    1b40:	200009c0 	.word	0x200009c0
    1b44:	000005d1 	.word	0x000005d1
    1b48:	000001fd 	.word	0x000001fd
    1b4c:	0000028d 	.word	0x0000028d
    1b50:	20000928 	.word	0x20000928
    1b54:	000002b1 	.word	0x000002b1
    1b58:	00001c4d 	.word	0x00001c4d
    1b5c:	200009f0 	.word	0x200009f0
    1b60:	00001d8d 	.word	0x00001d8d
    1b64:	00007c30 	.word	0x00007c30
    1b68:	00003459 	.word	0x00003459
    1b6c:	46c0      	nop			; (mov r8, r8)
    1b6e:	46c0      	nop			; (mov r8, r8)

00001b70 <SysTick_Handler>:
	port_pin_toggle_output_level(LED_0_PIN);
}

void SysTick_Handler(void)
{
	sys_timer1++;
    1b70:	4b02      	ldr	r3, [pc, #8]	; (1b7c <SysTick_Handler+0xc>)
    1b72:	681a      	ldr	r2, [r3, #0]
    1b74:	3201      	adds	r2, #1
    1b76:	601a      	str	r2, [r3, #0]
}
    1b78:	4770      	bx	lr
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	20000928 	.word	0x20000928

00001b80 <__aeabi_uidiv>:
    1b80:	2900      	cmp	r1, #0
    1b82:	d034      	beq.n	1bee <.udivsi3_skip_div0_test+0x6a>

00001b84 <.udivsi3_skip_div0_test>:
    1b84:	2301      	movs	r3, #1
    1b86:	2200      	movs	r2, #0
    1b88:	b410      	push	{r4}
    1b8a:	4288      	cmp	r0, r1
    1b8c:	d32c      	bcc.n	1be8 <.udivsi3_skip_div0_test+0x64>
    1b8e:	2401      	movs	r4, #1
    1b90:	0724      	lsls	r4, r4, #28
    1b92:	42a1      	cmp	r1, r4
    1b94:	d204      	bcs.n	1ba0 <.udivsi3_skip_div0_test+0x1c>
    1b96:	4281      	cmp	r1, r0
    1b98:	d202      	bcs.n	1ba0 <.udivsi3_skip_div0_test+0x1c>
    1b9a:	0109      	lsls	r1, r1, #4
    1b9c:	011b      	lsls	r3, r3, #4
    1b9e:	e7f8      	b.n	1b92 <.udivsi3_skip_div0_test+0xe>
    1ba0:	00e4      	lsls	r4, r4, #3
    1ba2:	42a1      	cmp	r1, r4
    1ba4:	d204      	bcs.n	1bb0 <.udivsi3_skip_div0_test+0x2c>
    1ba6:	4281      	cmp	r1, r0
    1ba8:	d202      	bcs.n	1bb0 <.udivsi3_skip_div0_test+0x2c>
    1baa:	0049      	lsls	r1, r1, #1
    1bac:	005b      	lsls	r3, r3, #1
    1bae:	e7f8      	b.n	1ba2 <.udivsi3_skip_div0_test+0x1e>
    1bb0:	4288      	cmp	r0, r1
    1bb2:	d301      	bcc.n	1bb8 <.udivsi3_skip_div0_test+0x34>
    1bb4:	1a40      	subs	r0, r0, r1
    1bb6:	431a      	orrs	r2, r3
    1bb8:	084c      	lsrs	r4, r1, #1
    1bba:	42a0      	cmp	r0, r4
    1bbc:	d302      	bcc.n	1bc4 <.udivsi3_skip_div0_test+0x40>
    1bbe:	1b00      	subs	r0, r0, r4
    1bc0:	085c      	lsrs	r4, r3, #1
    1bc2:	4322      	orrs	r2, r4
    1bc4:	088c      	lsrs	r4, r1, #2
    1bc6:	42a0      	cmp	r0, r4
    1bc8:	d302      	bcc.n	1bd0 <.udivsi3_skip_div0_test+0x4c>
    1bca:	1b00      	subs	r0, r0, r4
    1bcc:	089c      	lsrs	r4, r3, #2
    1bce:	4322      	orrs	r2, r4
    1bd0:	08cc      	lsrs	r4, r1, #3
    1bd2:	42a0      	cmp	r0, r4
    1bd4:	d302      	bcc.n	1bdc <.udivsi3_skip_div0_test+0x58>
    1bd6:	1b00      	subs	r0, r0, r4
    1bd8:	08dc      	lsrs	r4, r3, #3
    1bda:	4322      	orrs	r2, r4
    1bdc:	2800      	cmp	r0, #0
    1bde:	d003      	beq.n	1be8 <.udivsi3_skip_div0_test+0x64>
    1be0:	091b      	lsrs	r3, r3, #4
    1be2:	d001      	beq.n	1be8 <.udivsi3_skip_div0_test+0x64>
    1be4:	0909      	lsrs	r1, r1, #4
    1be6:	e7e3      	b.n	1bb0 <.udivsi3_skip_div0_test+0x2c>
    1be8:	1c10      	adds	r0, r2, #0
    1bea:	bc10      	pop	{r4}
    1bec:	4770      	bx	lr
    1bee:	2800      	cmp	r0, #0
    1bf0:	d001      	beq.n	1bf6 <.udivsi3_skip_div0_test+0x72>
    1bf2:	2000      	movs	r0, #0
    1bf4:	43c0      	mvns	r0, r0
    1bf6:	b407      	push	{r0, r1, r2}
    1bf8:	4802      	ldr	r0, [pc, #8]	; (1c04 <.udivsi3_skip_div0_test+0x80>)
    1bfa:	a102      	add	r1, pc, #8	; (adr r1, 1c04 <.udivsi3_skip_div0_test+0x80>)
    1bfc:	1840      	adds	r0, r0, r1
    1bfe:	9002      	str	r0, [sp, #8]
    1c00:	bd03      	pop	{r0, r1, pc}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	00000019 	.word	0x00000019

00001c08 <__aeabi_uidivmod>:
    1c08:	2900      	cmp	r1, #0
    1c0a:	d0f0      	beq.n	1bee <.udivsi3_skip_div0_test+0x6a>
    1c0c:	b503      	push	{r0, r1, lr}
    1c0e:	f7ff ffb9 	bl	1b84 <.udivsi3_skip_div0_test>
    1c12:	bc0e      	pop	{r1, r2, r3}
    1c14:	4342      	muls	r2, r0
    1c16:	1a89      	subs	r1, r1, r2
    1c18:	4718      	bx	r3
    1c1a:	46c0      	nop			; (mov r8, r8)

00001c1c <__aeabi_idiv0>:
    1c1c:	4770      	bx	lr
    1c1e:	46c0      	nop			; (mov r8, r8)

00001c20 <__aeabi_cdrcmple>:
    1c20:	4684      	mov	ip, r0
    1c22:	1c10      	adds	r0, r2, #0
    1c24:	4662      	mov	r2, ip
    1c26:	468c      	mov	ip, r1
    1c28:	1c19      	adds	r1, r3, #0
    1c2a:	4663      	mov	r3, ip
    1c2c:	e000      	b.n	1c30 <__aeabi_cdcmpeq>
    1c2e:	46c0      	nop			; (mov r8, r8)

00001c30 <__aeabi_cdcmpeq>:
    1c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1c32:	f000 fc93 	bl	255c <__ledf2>
    1c36:	2800      	cmp	r0, #0
    1c38:	d401      	bmi.n	1c3e <__aeabi_cdcmpeq+0xe>
    1c3a:	2100      	movs	r1, #0
    1c3c:	42c8      	cmn	r0, r1
    1c3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001c40 <__aeabi_dcmpeq>:
    1c40:	b510      	push	{r4, lr}
    1c42:	f000 fbc7 	bl	23d4 <__eqdf2>
    1c46:	4240      	negs	r0, r0
    1c48:	3001      	adds	r0, #1
    1c4a:	bd10      	pop	{r4, pc}

00001c4c <__aeabi_dcmplt>:
    1c4c:	b510      	push	{r4, lr}
    1c4e:	f000 fc85 	bl	255c <__ledf2>
    1c52:	2800      	cmp	r0, #0
    1c54:	db01      	blt.n	1c5a <__aeabi_dcmplt+0xe>
    1c56:	2000      	movs	r0, #0
    1c58:	bd10      	pop	{r4, pc}
    1c5a:	2001      	movs	r0, #1
    1c5c:	bd10      	pop	{r4, pc}
    1c5e:	46c0      	nop			; (mov r8, r8)

00001c60 <__aeabi_dcmple>:
    1c60:	b510      	push	{r4, lr}
    1c62:	f000 fc7b 	bl	255c <__ledf2>
    1c66:	2800      	cmp	r0, #0
    1c68:	dd01      	ble.n	1c6e <__aeabi_dcmple+0xe>
    1c6a:	2000      	movs	r0, #0
    1c6c:	bd10      	pop	{r4, pc}
    1c6e:	2001      	movs	r0, #1
    1c70:	bd10      	pop	{r4, pc}
    1c72:	46c0      	nop			; (mov r8, r8)

00001c74 <__aeabi_dcmpgt>:
    1c74:	b510      	push	{r4, lr}
    1c76:	f000 fbf7 	bl	2468 <__gedf2>
    1c7a:	2800      	cmp	r0, #0
    1c7c:	dc01      	bgt.n	1c82 <__aeabi_dcmpgt+0xe>
    1c7e:	2000      	movs	r0, #0
    1c80:	bd10      	pop	{r4, pc}
    1c82:	2001      	movs	r0, #1
    1c84:	bd10      	pop	{r4, pc}
    1c86:	46c0      	nop			; (mov r8, r8)

00001c88 <__aeabi_dcmpge>:
    1c88:	b510      	push	{r4, lr}
    1c8a:	f000 fbed 	bl	2468 <__gedf2>
    1c8e:	2800      	cmp	r0, #0
    1c90:	da01      	bge.n	1c96 <__aeabi_dcmpge+0xe>
    1c92:	2000      	movs	r0, #0
    1c94:	bd10      	pop	{r4, pc}
    1c96:	2001      	movs	r0, #1
    1c98:	bd10      	pop	{r4, pc}
    1c9a:	46c0      	nop			; (mov r8, r8)

00001c9c <__aeabi_uldivmod>:
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d111      	bne.n	1cc4 <__aeabi_uldivmod+0x28>
    1ca0:	2a00      	cmp	r2, #0
    1ca2:	d10f      	bne.n	1cc4 <__aeabi_uldivmod+0x28>
    1ca4:	2900      	cmp	r1, #0
    1ca6:	d100      	bne.n	1caa <__aeabi_uldivmod+0xe>
    1ca8:	2800      	cmp	r0, #0
    1caa:	d002      	beq.n	1cb2 <__aeabi_uldivmod+0x16>
    1cac:	2100      	movs	r1, #0
    1cae:	43c9      	mvns	r1, r1
    1cb0:	1c08      	adds	r0, r1, #0
    1cb2:	b407      	push	{r0, r1, r2}
    1cb4:	4802      	ldr	r0, [pc, #8]	; (1cc0 <__aeabi_uldivmod+0x24>)
    1cb6:	a102      	add	r1, pc, #8	; (adr r1, 1cc0 <__aeabi_uldivmod+0x24>)
    1cb8:	1840      	adds	r0, r0, r1
    1cba:	9002      	str	r0, [sp, #8]
    1cbc:	bd03      	pop	{r0, r1, pc}
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	ffffff5d 	.word	0xffffff5d
    1cc4:	b403      	push	{r0, r1}
    1cc6:	4668      	mov	r0, sp
    1cc8:	b501      	push	{r0, lr}
    1cca:	9802      	ldr	r0, [sp, #8]
    1ccc:	f000 f844 	bl	1d58 <__gnu_uldivmod_helper>
    1cd0:	9b01      	ldr	r3, [sp, #4]
    1cd2:	469e      	mov	lr, r3
    1cd4:	b002      	add	sp, #8
    1cd6:	bc0c      	pop	{r2, r3}
    1cd8:	4770      	bx	lr
    1cda:	46c0      	nop			; (mov r8, r8)

00001cdc <__aeabi_lmul>:
    1cdc:	469c      	mov	ip, r3
    1cde:	0403      	lsls	r3, r0, #16
    1ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce2:	0c1b      	lsrs	r3, r3, #16
    1ce4:	0417      	lsls	r7, r2, #16
    1ce6:	0c3f      	lsrs	r7, r7, #16
    1ce8:	0c15      	lsrs	r5, r2, #16
    1cea:	1c1e      	adds	r6, r3, #0
    1cec:	1c04      	adds	r4, r0, #0
    1cee:	0c00      	lsrs	r0, r0, #16
    1cf0:	437e      	muls	r6, r7
    1cf2:	436b      	muls	r3, r5
    1cf4:	4347      	muls	r7, r0
    1cf6:	4345      	muls	r5, r0
    1cf8:	18fb      	adds	r3, r7, r3
    1cfa:	0c30      	lsrs	r0, r6, #16
    1cfc:	1818      	adds	r0, r3, r0
    1cfe:	4287      	cmp	r7, r0
    1d00:	d902      	bls.n	1d08 <__aeabi_lmul+0x2c>
    1d02:	2380      	movs	r3, #128	; 0x80
    1d04:	025b      	lsls	r3, r3, #9
    1d06:	18ed      	adds	r5, r5, r3
    1d08:	0c03      	lsrs	r3, r0, #16
    1d0a:	18ed      	adds	r5, r5, r3
    1d0c:	4663      	mov	r3, ip
    1d0e:	435c      	muls	r4, r3
    1d10:	434a      	muls	r2, r1
    1d12:	0436      	lsls	r6, r6, #16
    1d14:	0c36      	lsrs	r6, r6, #16
    1d16:	18a1      	adds	r1, r4, r2
    1d18:	0400      	lsls	r0, r0, #16
    1d1a:	1980      	adds	r0, r0, r6
    1d1c:	1949      	adds	r1, r1, r5
    1d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d20 <__gnu_ldivmod_helper>:
    1d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d22:	b083      	sub	sp, #12
    1d24:	1c16      	adds	r6, r2, #0
    1d26:	1c1f      	adds	r7, r3, #0
    1d28:	9000      	str	r0, [sp, #0]
    1d2a:	9101      	str	r1, [sp, #4]
    1d2c:	f000 ff88 	bl	2c40 <__divdi3>
    1d30:	1c04      	adds	r4, r0, #0
    1d32:	1c0d      	adds	r5, r1, #0
    1d34:	1c22      	adds	r2, r4, #0
    1d36:	1c2b      	adds	r3, r5, #0
    1d38:	1c30      	adds	r0, r6, #0
    1d3a:	1c39      	adds	r1, r7, #0
    1d3c:	f7ff ffce 	bl	1cdc <__aeabi_lmul>
    1d40:	9a00      	ldr	r2, [sp, #0]
    1d42:	9b01      	ldr	r3, [sp, #4]
    1d44:	1a12      	subs	r2, r2, r0
    1d46:	418b      	sbcs	r3, r1
    1d48:	9908      	ldr	r1, [sp, #32]
    1d4a:	1c20      	adds	r0, r4, #0
    1d4c:	600a      	str	r2, [r1, #0]
    1d4e:	604b      	str	r3, [r1, #4]
    1d50:	1c29      	adds	r1, r5, #0
    1d52:	b003      	add	sp, #12
    1d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d56:	46c0      	nop			; (mov r8, r8)

00001d58 <__gnu_uldivmod_helper>:
    1d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d5a:	b083      	sub	sp, #12
    1d5c:	1c14      	adds	r4, r2, #0
    1d5e:	1c1d      	adds	r5, r3, #0
    1d60:	9000      	str	r0, [sp, #0]
    1d62:	9101      	str	r1, [sp, #4]
    1d64:	f001 f944 	bl	2ff0 <__udivdi3>
    1d68:	1c22      	adds	r2, r4, #0
    1d6a:	1c2b      	adds	r3, r5, #0
    1d6c:	1c06      	adds	r6, r0, #0
    1d6e:	1c0f      	adds	r7, r1, #0
    1d70:	f7ff ffb4 	bl	1cdc <__aeabi_lmul>
    1d74:	9a00      	ldr	r2, [sp, #0]
    1d76:	9b01      	ldr	r3, [sp, #4]
    1d78:	1a12      	subs	r2, r2, r0
    1d7a:	418b      	sbcs	r3, r1
    1d7c:	9908      	ldr	r1, [sp, #32]
    1d7e:	1c30      	adds	r0, r6, #0
    1d80:	600a      	str	r2, [r1, #0]
    1d82:	604b      	str	r3, [r1, #4]
    1d84:	1c39      	adds	r1, r7, #0
    1d86:	b003      	add	sp, #12
    1d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)

00001d8c <__aeabi_dadd>:
    1d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d8e:	465f      	mov	r7, fp
    1d90:	4656      	mov	r6, sl
    1d92:	4644      	mov	r4, r8
    1d94:	464d      	mov	r5, r9
    1d96:	b4f0      	push	{r4, r5, r6, r7}
    1d98:	030c      	lsls	r4, r1, #12
    1d9a:	004d      	lsls	r5, r1, #1
    1d9c:	0fce      	lsrs	r6, r1, #31
    1d9e:	0a61      	lsrs	r1, r4, #9
    1da0:	0f44      	lsrs	r4, r0, #29
    1da2:	4321      	orrs	r1, r4
    1da4:	00c4      	lsls	r4, r0, #3
    1da6:	0318      	lsls	r0, r3, #12
    1da8:	4680      	mov	r8, r0
    1daa:	0058      	lsls	r0, r3, #1
    1dac:	0d40      	lsrs	r0, r0, #21
    1dae:	4682      	mov	sl, r0
    1db0:	0fd8      	lsrs	r0, r3, #31
    1db2:	4684      	mov	ip, r0
    1db4:	4640      	mov	r0, r8
    1db6:	0a40      	lsrs	r0, r0, #9
    1db8:	0f53      	lsrs	r3, r2, #29
    1dba:	4303      	orrs	r3, r0
    1dbc:	00d0      	lsls	r0, r2, #3
    1dbe:	0d6d      	lsrs	r5, r5, #21
    1dc0:	1c37      	adds	r7, r6, #0
    1dc2:	4683      	mov	fp, r0
    1dc4:	4652      	mov	r2, sl
    1dc6:	4566      	cmp	r6, ip
    1dc8:	d100      	bne.n	1dcc <__aeabi_dadd+0x40>
    1dca:	e0a4      	b.n	1f16 <__aeabi_dadd+0x18a>
    1dcc:	1aaf      	subs	r7, r5, r2
    1dce:	2f00      	cmp	r7, #0
    1dd0:	dc00      	bgt.n	1dd4 <__aeabi_dadd+0x48>
    1dd2:	e109      	b.n	1fe8 <__aeabi_dadd+0x25c>
    1dd4:	2a00      	cmp	r2, #0
    1dd6:	d13b      	bne.n	1e50 <__aeabi_dadd+0xc4>
    1dd8:	4318      	orrs	r0, r3
    1dda:	d000      	beq.n	1dde <__aeabi_dadd+0x52>
    1ddc:	e0ea      	b.n	1fb4 <__aeabi_dadd+0x228>
    1dde:	0763      	lsls	r3, r4, #29
    1de0:	d100      	bne.n	1de4 <__aeabi_dadd+0x58>
    1de2:	e087      	b.n	1ef4 <__aeabi_dadd+0x168>
    1de4:	230f      	movs	r3, #15
    1de6:	4023      	ands	r3, r4
    1de8:	2b04      	cmp	r3, #4
    1dea:	d100      	bne.n	1dee <__aeabi_dadd+0x62>
    1dec:	e082      	b.n	1ef4 <__aeabi_dadd+0x168>
    1dee:	1d22      	adds	r2, r4, #4
    1df0:	42a2      	cmp	r2, r4
    1df2:	41a4      	sbcs	r4, r4
    1df4:	4264      	negs	r4, r4
    1df6:	2380      	movs	r3, #128	; 0x80
    1df8:	1909      	adds	r1, r1, r4
    1dfa:	041b      	lsls	r3, r3, #16
    1dfc:	400b      	ands	r3, r1
    1dfe:	1c37      	adds	r7, r6, #0
    1e00:	1c14      	adds	r4, r2, #0
    1e02:	2b00      	cmp	r3, #0
    1e04:	d100      	bne.n	1e08 <__aeabi_dadd+0x7c>
    1e06:	e07c      	b.n	1f02 <__aeabi_dadd+0x176>
    1e08:	4bce      	ldr	r3, [pc, #824]	; (2144 <__stack_size__+0x144>)
    1e0a:	3501      	adds	r5, #1
    1e0c:	429d      	cmp	r5, r3
    1e0e:	d100      	bne.n	1e12 <__aeabi_dadd+0x86>
    1e10:	e105      	b.n	201e <__stack_size__+0x1e>
    1e12:	4bcd      	ldr	r3, [pc, #820]	; (2148 <__stack_size__+0x148>)
    1e14:	08e4      	lsrs	r4, r4, #3
    1e16:	4019      	ands	r1, r3
    1e18:	0748      	lsls	r0, r1, #29
    1e1a:	0249      	lsls	r1, r1, #9
    1e1c:	4304      	orrs	r4, r0
    1e1e:	0b0b      	lsrs	r3, r1, #12
    1e20:	2000      	movs	r0, #0
    1e22:	2100      	movs	r1, #0
    1e24:	031b      	lsls	r3, r3, #12
    1e26:	0b1a      	lsrs	r2, r3, #12
    1e28:	0d0b      	lsrs	r3, r1, #20
    1e2a:	056d      	lsls	r5, r5, #21
    1e2c:	051b      	lsls	r3, r3, #20
    1e2e:	4313      	orrs	r3, r2
    1e30:	086a      	lsrs	r2, r5, #1
    1e32:	4dc6      	ldr	r5, [pc, #792]	; (214c <__stack_size__+0x14c>)
    1e34:	07ff      	lsls	r7, r7, #31
    1e36:	401d      	ands	r5, r3
    1e38:	4315      	orrs	r5, r2
    1e3a:	006d      	lsls	r5, r5, #1
    1e3c:	086d      	lsrs	r5, r5, #1
    1e3e:	1c29      	adds	r1, r5, #0
    1e40:	4339      	orrs	r1, r7
    1e42:	1c20      	adds	r0, r4, #0
    1e44:	bc3c      	pop	{r2, r3, r4, r5}
    1e46:	4690      	mov	r8, r2
    1e48:	4699      	mov	r9, r3
    1e4a:	46a2      	mov	sl, r4
    1e4c:	46ab      	mov	fp, r5
    1e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e50:	48bc      	ldr	r0, [pc, #752]	; (2144 <__stack_size__+0x144>)
    1e52:	4285      	cmp	r5, r0
    1e54:	d0c3      	beq.n	1dde <__aeabi_dadd+0x52>
    1e56:	2080      	movs	r0, #128	; 0x80
    1e58:	0400      	lsls	r0, r0, #16
    1e5a:	4303      	orrs	r3, r0
    1e5c:	2f38      	cmp	r7, #56	; 0x38
    1e5e:	dd00      	ble.n	1e62 <__aeabi_dadd+0xd6>
    1e60:	e0f0      	b.n	2044 <__stack_size__+0x44>
    1e62:	2f1f      	cmp	r7, #31
    1e64:	dd00      	ble.n	1e68 <__aeabi_dadd+0xdc>
    1e66:	e124      	b.n	20b2 <__stack_size__+0xb2>
    1e68:	2020      	movs	r0, #32
    1e6a:	1bc0      	subs	r0, r0, r7
    1e6c:	1c1a      	adds	r2, r3, #0
    1e6e:	4681      	mov	r9, r0
    1e70:	4082      	lsls	r2, r0
    1e72:	4658      	mov	r0, fp
    1e74:	40f8      	lsrs	r0, r7
    1e76:	4302      	orrs	r2, r0
    1e78:	4694      	mov	ip, r2
    1e7a:	4658      	mov	r0, fp
    1e7c:	464a      	mov	r2, r9
    1e7e:	4090      	lsls	r0, r2
    1e80:	1e42      	subs	r2, r0, #1
    1e82:	4190      	sbcs	r0, r2
    1e84:	40fb      	lsrs	r3, r7
    1e86:	4662      	mov	r2, ip
    1e88:	4302      	orrs	r2, r0
    1e8a:	1c1f      	adds	r7, r3, #0
    1e8c:	1aa2      	subs	r2, r4, r2
    1e8e:	4294      	cmp	r4, r2
    1e90:	41a4      	sbcs	r4, r4
    1e92:	4264      	negs	r4, r4
    1e94:	1bc9      	subs	r1, r1, r7
    1e96:	1b09      	subs	r1, r1, r4
    1e98:	1c14      	adds	r4, r2, #0
    1e9a:	020b      	lsls	r3, r1, #8
    1e9c:	d59f      	bpl.n	1dde <__aeabi_dadd+0x52>
    1e9e:	0249      	lsls	r1, r1, #9
    1ea0:	0a4f      	lsrs	r7, r1, #9
    1ea2:	2f00      	cmp	r7, #0
    1ea4:	d100      	bne.n	1ea8 <__aeabi_dadd+0x11c>
    1ea6:	e0c8      	b.n	203a <__stack_size__+0x3a>
    1ea8:	1c38      	adds	r0, r7, #0
    1eaa:	f000 feab 	bl	2c04 <__clzsi2>
    1eae:	1c02      	adds	r2, r0, #0
    1eb0:	3a08      	subs	r2, #8
    1eb2:	2a1f      	cmp	r2, #31
    1eb4:	dd00      	ble.n	1eb8 <__aeabi_dadd+0x12c>
    1eb6:	e0b5      	b.n	2024 <__stack_size__+0x24>
    1eb8:	2128      	movs	r1, #40	; 0x28
    1eba:	1a09      	subs	r1, r1, r0
    1ebc:	1c20      	adds	r0, r4, #0
    1ebe:	4097      	lsls	r7, r2
    1ec0:	40c8      	lsrs	r0, r1
    1ec2:	4307      	orrs	r7, r0
    1ec4:	4094      	lsls	r4, r2
    1ec6:	4295      	cmp	r5, r2
    1ec8:	dd00      	ble.n	1ecc <__aeabi_dadd+0x140>
    1eca:	e0b2      	b.n	2032 <__stack_size__+0x32>
    1ecc:	1b55      	subs	r5, r2, r5
    1ece:	1c69      	adds	r1, r5, #1
    1ed0:	291f      	cmp	r1, #31
    1ed2:	dd00      	ble.n	1ed6 <__aeabi_dadd+0x14a>
    1ed4:	e0dc      	b.n	2090 <__stack_size__+0x90>
    1ed6:	221f      	movs	r2, #31
    1ed8:	1b55      	subs	r5, r2, r5
    1eda:	1c3b      	adds	r3, r7, #0
    1edc:	1c22      	adds	r2, r4, #0
    1ede:	40ab      	lsls	r3, r5
    1ee0:	40ca      	lsrs	r2, r1
    1ee2:	40ac      	lsls	r4, r5
    1ee4:	1e65      	subs	r5, r4, #1
    1ee6:	41ac      	sbcs	r4, r5
    1ee8:	4313      	orrs	r3, r2
    1eea:	40cf      	lsrs	r7, r1
    1eec:	431c      	orrs	r4, r3
    1eee:	1c39      	adds	r1, r7, #0
    1ef0:	2500      	movs	r5, #0
    1ef2:	e774      	b.n	1dde <__aeabi_dadd+0x52>
    1ef4:	2380      	movs	r3, #128	; 0x80
    1ef6:	041b      	lsls	r3, r3, #16
    1ef8:	400b      	ands	r3, r1
    1efa:	1c37      	adds	r7, r6, #0
    1efc:	2b00      	cmp	r3, #0
    1efe:	d000      	beq.n	1f02 <__aeabi_dadd+0x176>
    1f00:	e782      	b.n	1e08 <__aeabi_dadd+0x7c>
    1f02:	4b90      	ldr	r3, [pc, #576]	; (2144 <__stack_size__+0x144>)
    1f04:	0748      	lsls	r0, r1, #29
    1f06:	08e4      	lsrs	r4, r4, #3
    1f08:	4304      	orrs	r4, r0
    1f0a:	08c9      	lsrs	r1, r1, #3
    1f0c:	429d      	cmp	r5, r3
    1f0e:	d048      	beq.n	1fa2 <__aeabi_dadd+0x216>
    1f10:	0309      	lsls	r1, r1, #12
    1f12:	0b0b      	lsrs	r3, r1, #12
    1f14:	e784      	b.n	1e20 <__aeabi_dadd+0x94>
    1f16:	1aaa      	subs	r2, r5, r2
    1f18:	4694      	mov	ip, r2
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	dc00      	bgt.n	1f20 <__aeabi_dadd+0x194>
    1f1e:	e098      	b.n	2052 <__stack_size__+0x52>
    1f20:	4650      	mov	r0, sl
    1f22:	2800      	cmp	r0, #0
    1f24:	d052      	beq.n	1fcc <__aeabi_dadd+0x240>
    1f26:	4887      	ldr	r0, [pc, #540]	; (2144 <__stack_size__+0x144>)
    1f28:	4285      	cmp	r5, r0
    1f2a:	d100      	bne.n	1f2e <__aeabi_dadd+0x1a2>
    1f2c:	e757      	b.n	1dde <__aeabi_dadd+0x52>
    1f2e:	2080      	movs	r0, #128	; 0x80
    1f30:	0400      	lsls	r0, r0, #16
    1f32:	4303      	orrs	r3, r0
    1f34:	4662      	mov	r2, ip
    1f36:	2a38      	cmp	r2, #56	; 0x38
    1f38:	dd00      	ble.n	1f3c <__aeabi_dadd+0x1b0>
    1f3a:	e0fc      	b.n	2136 <__stack_size__+0x136>
    1f3c:	2a1f      	cmp	r2, #31
    1f3e:	dd00      	ble.n	1f42 <__aeabi_dadd+0x1b6>
    1f40:	e14a      	b.n	21d8 <__stack_size__+0x1d8>
    1f42:	2220      	movs	r2, #32
    1f44:	4660      	mov	r0, ip
    1f46:	1a10      	subs	r0, r2, r0
    1f48:	1c1a      	adds	r2, r3, #0
    1f4a:	4082      	lsls	r2, r0
    1f4c:	4682      	mov	sl, r0
    1f4e:	4691      	mov	r9, r2
    1f50:	4658      	mov	r0, fp
    1f52:	4662      	mov	r2, ip
    1f54:	40d0      	lsrs	r0, r2
    1f56:	464a      	mov	r2, r9
    1f58:	4302      	orrs	r2, r0
    1f5a:	4690      	mov	r8, r2
    1f5c:	4658      	mov	r0, fp
    1f5e:	4652      	mov	r2, sl
    1f60:	4090      	lsls	r0, r2
    1f62:	1e42      	subs	r2, r0, #1
    1f64:	4190      	sbcs	r0, r2
    1f66:	4642      	mov	r2, r8
    1f68:	4302      	orrs	r2, r0
    1f6a:	4660      	mov	r0, ip
    1f6c:	40c3      	lsrs	r3, r0
    1f6e:	1912      	adds	r2, r2, r4
    1f70:	42a2      	cmp	r2, r4
    1f72:	41a4      	sbcs	r4, r4
    1f74:	4264      	negs	r4, r4
    1f76:	1859      	adds	r1, r3, r1
    1f78:	1909      	adds	r1, r1, r4
    1f7a:	1c14      	adds	r4, r2, #0
    1f7c:	0208      	lsls	r0, r1, #8
    1f7e:	d400      	bmi.n	1f82 <__aeabi_dadd+0x1f6>
    1f80:	e72d      	b.n	1dde <__aeabi_dadd+0x52>
    1f82:	4b70      	ldr	r3, [pc, #448]	; (2144 <__stack_size__+0x144>)
    1f84:	3501      	adds	r5, #1
    1f86:	429d      	cmp	r5, r3
    1f88:	d100      	bne.n	1f8c <__aeabi_dadd+0x200>
    1f8a:	e122      	b.n	21d2 <__stack_size__+0x1d2>
    1f8c:	4b6e      	ldr	r3, [pc, #440]	; (2148 <__stack_size__+0x148>)
    1f8e:	0860      	lsrs	r0, r4, #1
    1f90:	4019      	ands	r1, r3
    1f92:	2301      	movs	r3, #1
    1f94:	4023      	ands	r3, r4
    1f96:	1c1c      	adds	r4, r3, #0
    1f98:	4304      	orrs	r4, r0
    1f9a:	07cb      	lsls	r3, r1, #31
    1f9c:	431c      	orrs	r4, r3
    1f9e:	0849      	lsrs	r1, r1, #1
    1fa0:	e71d      	b.n	1dde <__aeabi_dadd+0x52>
    1fa2:	1c23      	adds	r3, r4, #0
    1fa4:	430b      	orrs	r3, r1
    1fa6:	d03a      	beq.n	201e <__stack_size__+0x1e>
    1fa8:	2380      	movs	r3, #128	; 0x80
    1faa:	031b      	lsls	r3, r3, #12
    1fac:	430b      	orrs	r3, r1
    1fae:	031b      	lsls	r3, r3, #12
    1fb0:	0b1b      	lsrs	r3, r3, #12
    1fb2:	e735      	b.n	1e20 <__aeabi_dadd+0x94>
    1fb4:	3f01      	subs	r7, #1
    1fb6:	2f00      	cmp	r7, #0
    1fb8:	d165      	bne.n	2086 <__stack_size__+0x86>
    1fba:	4658      	mov	r0, fp
    1fbc:	1a22      	subs	r2, r4, r0
    1fbe:	4294      	cmp	r4, r2
    1fc0:	41a4      	sbcs	r4, r4
    1fc2:	4264      	negs	r4, r4
    1fc4:	1ac9      	subs	r1, r1, r3
    1fc6:	1b09      	subs	r1, r1, r4
    1fc8:	1c14      	adds	r4, r2, #0
    1fca:	e766      	b.n	1e9a <__aeabi_dadd+0x10e>
    1fcc:	4658      	mov	r0, fp
    1fce:	4318      	orrs	r0, r3
    1fd0:	d100      	bne.n	1fd4 <__aeabi_dadd+0x248>
    1fd2:	e704      	b.n	1dde <__aeabi_dadd+0x52>
    1fd4:	2201      	movs	r2, #1
    1fd6:	4252      	negs	r2, r2
    1fd8:	4494      	add	ip, r2
    1fda:	4660      	mov	r0, ip
    1fdc:	2800      	cmp	r0, #0
    1fde:	d000      	beq.n	1fe2 <__aeabi_dadd+0x256>
    1fe0:	e0c5      	b.n	216e <__stack_size__+0x16e>
    1fe2:	4658      	mov	r0, fp
    1fe4:	1902      	adds	r2, r0, r4
    1fe6:	e7c3      	b.n	1f70 <__aeabi_dadd+0x1e4>
    1fe8:	2f00      	cmp	r7, #0
    1fea:	d173      	bne.n	20d4 <__stack_size__+0xd4>
    1fec:	1c68      	adds	r0, r5, #1
    1fee:	0540      	lsls	r0, r0, #21
    1ff0:	0d40      	lsrs	r0, r0, #21
    1ff2:	2801      	cmp	r0, #1
    1ff4:	dc00      	bgt.n	1ff8 <__aeabi_dadd+0x26c>
    1ff6:	e0de      	b.n	21b6 <__stack_size__+0x1b6>
    1ff8:	465a      	mov	r2, fp
    1ffa:	1aa2      	subs	r2, r4, r2
    1ffc:	4294      	cmp	r4, r2
    1ffe:	41bf      	sbcs	r7, r7
    2000:	1ac8      	subs	r0, r1, r3
    2002:	427f      	negs	r7, r7
    2004:	1bc7      	subs	r7, r0, r7
    2006:	0238      	lsls	r0, r7, #8
    2008:	d400      	bmi.n	200c <__stack_size__+0xc>
    200a:	e089      	b.n	2120 <__stack_size__+0x120>
    200c:	465a      	mov	r2, fp
    200e:	1b14      	subs	r4, r2, r4
    2010:	45a3      	cmp	fp, r4
    2012:	4192      	sbcs	r2, r2
    2014:	1a59      	subs	r1, r3, r1
    2016:	4252      	negs	r2, r2
    2018:	1a8f      	subs	r7, r1, r2
    201a:	4666      	mov	r6, ip
    201c:	e741      	b.n	1ea2 <__aeabi_dadd+0x116>
    201e:	2300      	movs	r3, #0
    2020:	2400      	movs	r4, #0
    2022:	e6fd      	b.n	1e20 <__aeabi_dadd+0x94>
    2024:	1c27      	adds	r7, r4, #0
    2026:	3828      	subs	r0, #40	; 0x28
    2028:	4087      	lsls	r7, r0
    202a:	2400      	movs	r4, #0
    202c:	4295      	cmp	r5, r2
    202e:	dc00      	bgt.n	2032 <__stack_size__+0x32>
    2030:	e74c      	b.n	1ecc <__aeabi_dadd+0x140>
    2032:	4945      	ldr	r1, [pc, #276]	; (2148 <__stack_size__+0x148>)
    2034:	1aad      	subs	r5, r5, r2
    2036:	4039      	ands	r1, r7
    2038:	e6d1      	b.n	1dde <__aeabi_dadd+0x52>
    203a:	1c20      	adds	r0, r4, #0
    203c:	f000 fde2 	bl	2c04 <__clzsi2>
    2040:	3020      	adds	r0, #32
    2042:	e734      	b.n	1eae <__aeabi_dadd+0x122>
    2044:	465a      	mov	r2, fp
    2046:	431a      	orrs	r2, r3
    2048:	1e53      	subs	r3, r2, #1
    204a:	419a      	sbcs	r2, r3
    204c:	b2d2      	uxtb	r2, r2
    204e:	2700      	movs	r7, #0
    2050:	e71c      	b.n	1e8c <__aeabi_dadd+0x100>
    2052:	2a00      	cmp	r2, #0
    2054:	d000      	beq.n	2058 <__stack_size__+0x58>
    2056:	e0dc      	b.n	2212 <__stack_size__+0x212>
    2058:	1c68      	adds	r0, r5, #1
    205a:	0542      	lsls	r2, r0, #21
    205c:	0d52      	lsrs	r2, r2, #21
    205e:	2a01      	cmp	r2, #1
    2060:	dc00      	bgt.n	2064 <__stack_size__+0x64>
    2062:	e08d      	b.n	2180 <__stack_size__+0x180>
    2064:	4d37      	ldr	r5, [pc, #220]	; (2144 <__stack_size__+0x144>)
    2066:	42a8      	cmp	r0, r5
    2068:	d100      	bne.n	206c <__stack_size__+0x6c>
    206a:	e0f3      	b.n	2254 <__stack_size__+0x254>
    206c:	465d      	mov	r5, fp
    206e:	192a      	adds	r2, r5, r4
    2070:	42a2      	cmp	r2, r4
    2072:	41a4      	sbcs	r4, r4
    2074:	4264      	negs	r4, r4
    2076:	1859      	adds	r1, r3, r1
    2078:	1909      	adds	r1, r1, r4
    207a:	07cc      	lsls	r4, r1, #31
    207c:	0852      	lsrs	r2, r2, #1
    207e:	4314      	orrs	r4, r2
    2080:	0849      	lsrs	r1, r1, #1
    2082:	1c05      	adds	r5, r0, #0
    2084:	e6ab      	b.n	1dde <__aeabi_dadd+0x52>
    2086:	482f      	ldr	r0, [pc, #188]	; (2144 <__stack_size__+0x144>)
    2088:	4285      	cmp	r5, r0
    208a:	d000      	beq.n	208e <__stack_size__+0x8e>
    208c:	e6e6      	b.n	1e5c <__aeabi_dadd+0xd0>
    208e:	e6a6      	b.n	1dde <__aeabi_dadd+0x52>
    2090:	1c2b      	adds	r3, r5, #0
    2092:	3b1f      	subs	r3, #31
    2094:	1c3a      	adds	r2, r7, #0
    2096:	40da      	lsrs	r2, r3
    2098:	1c13      	adds	r3, r2, #0
    209a:	2920      	cmp	r1, #32
    209c:	d06c      	beq.n	2178 <__stack_size__+0x178>
    209e:	223f      	movs	r2, #63	; 0x3f
    20a0:	1b55      	subs	r5, r2, r5
    20a2:	40af      	lsls	r7, r5
    20a4:	433c      	orrs	r4, r7
    20a6:	1e60      	subs	r0, r4, #1
    20a8:	4184      	sbcs	r4, r0
    20aa:	431c      	orrs	r4, r3
    20ac:	2100      	movs	r1, #0
    20ae:	2500      	movs	r5, #0
    20b0:	e695      	b.n	1dde <__aeabi_dadd+0x52>
    20b2:	1c38      	adds	r0, r7, #0
    20b4:	3820      	subs	r0, #32
    20b6:	1c1a      	adds	r2, r3, #0
    20b8:	40c2      	lsrs	r2, r0
    20ba:	1c10      	adds	r0, r2, #0
    20bc:	2f20      	cmp	r7, #32
    20be:	d05d      	beq.n	217c <__stack_size__+0x17c>
    20c0:	2240      	movs	r2, #64	; 0x40
    20c2:	1bd7      	subs	r7, r2, r7
    20c4:	40bb      	lsls	r3, r7
    20c6:	465a      	mov	r2, fp
    20c8:	431a      	orrs	r2, r3
    20ca:	1e53      	subs	r3, r2, #1
    20cc:	419a      	sbcs	r2, r3
    20ce:	4302      	orrs	r2, r0
    20d0:	2700      	movs	r7, #0
    20d2:	e6db      	b.n	1e8c <__aeabi_dadd+0x100>
    20d4:	2d00      	cmp	r5, #0
    20d6:	d03b      	beq.n	2150 <__stack_size__+0x150>
    20d8:	4d1a      	ldr	r5, [pc, #104]	; (2144 <__stack_size__+0x144>)
    20da:	45aa      	cmp	sl, r5
    20dc:	d100      	bne.n	20e0 <__stack_size__+0xe0>
    20de:	e093      	b.n	2208 <__stack_size__+0x208>
    20e0:	2580      	movs	r5, #128	; 0x80
    20e2:	042d      	lsls	r5, r5, #16
    20e4:	427f      	negs	r7, r7
    20e6:	4329      	orrs	r1, r5
    20e8:	2f38      	cmp	r7, #56	; 0x38
    20ea:	dd00      	ble.n	20ee <__stack_size__+0xee>
    20ec:	e0ac      	b.n	2248 <__stack_size__+0x248>
    20ee:	2f1f      	cmp	r7, #31
    20f0:	dd00      	ble.n	20f4 <__stack_size__+0xf4>
    20f2:	e129      	b.n	2348 <__stack_size__+0x348>
    20f4:	2520      	movs	r5, #32
    20f6:	1bed      	subs	r5, r5, r7
    20f8:	1c08      	adds	r0, r1, #0
    20fa:	1c26      	adds	r6, r4, #0
    20fc:	40a8      	lsls	r0, r5
    20fe:	40fe      	lsrs	r6, r7
    2100:	40ac      	lsls	r4, r5
    2102:	4306      	orrs	r6, r0
    2104:	1e65      	subs	r5, r4, #1
    2106:	41ac      	sbcs	r4, r5
    2108:	4334      	orrs	r4, r6
    210a:	40f9      	lsrs	r1, r7
    210c:	465d      	mov	r5, fp
    210e:	1b2c      	subs	r4, r5, r4
    2110:	45a3      	cmp	fp, r4
    2112:	4192      	sbcs	r2, r2
    2114:	1a5b      	subs	r3, r3, r1
    2116:	4252      	negs	r2, r2
    2118:	1a99      	subs	r1, r3, r2
    211a:	4655      	mov	r5, sl
    211c:	4666      	mov	r6, ip
    211e:	e6bc      	b.n	1e9a <__aeabi_dadd+0x10e>
    2120:	1c13      	adds	r3, r2, #0
    2122:	433b      	orrs	r3, r7
    2124:	1c14      	adds	r4, r2, #0
    2126:	2b00      	cmp	r3, #0
    2128:	d000      	beq.n	212c <__stack_size__+0x12c>
    212a:	e6ba      	b.n	1ea2 <__aeabi_dadd+0x116>
    212c:	2700      	movs	r7, #0
    212e:	2100      	movs	r1, #0
    2130:	2400      	movs	r4, #0
    2132:	2500      	movs	r5, #0
    2134:	e6e5      	b.n	1f02 <__aeabi_dadd+0x176>
    2136:	465a      	mov	r2, fp
    2138:	431a      	orrs	r2, r3
    213a:	1e53      	subs	r3, r2, #1
    213c:	419a      	sbcs	r2, r3
    213e:	b2d2      	uxtb	r2, r2
    2140:	2300      	movs	r3, #0
    2142:	e714      	b.n	1f6e <__aeabi_dadd+0x1e2>
    2144:	000007ff 	.word	0x000007ff
    2148:	ff7fffff 	.word	0xff7fffff
    214c:	800fffff 	.word	0x800fffff
    2150:	1c0d      	adds	r5, r1, #0
    2152:	4325      	orrs	r5, r4
    2154:	d058      	beq.n	2208 <__stack_size__+0x208>
    2156:	43ff      	mvns	r7, r7
    2158:	2f00      	cmp	r7, #0
    215a:	d151      	bne.n	2200 <__stack_size__+0x200>
    215c:	1b04      	subs	r4, r0, r4
    215e:	45a3      	cmp	fp, r4
    2160:	4192      	sbcs	r2, r2
    2162:	1a59      	subs	r1, r3, r1
    2164:	4252      	negs	r2, r2
    2166:	1a89      	subs	r1, r1, r2
    2168:	4655      	mov	r5, sl
    216a:	4666      	mov	r6, ip
    216c:	e695      	b.n	1e9a <__aeabi_dadd+0x10e>
    216e:	4896      	ldr	r0, [pc, #600]	; (23c8 <__stack_size__+0x3c8>)
    2170:	4285      	cmp	r5, r0
    2172:	d000      	beq.n	2176 <__stack_size__+0x176>
    2174:	e6de      	b.n	1f34 <__aeabi_dadd+0x1a8>
    2176:	e632      	b.n	1dde <__aeabi_dadd+0x52>
    2178:	2700      	movs	r7, #0
    217a:	e793      	b.n	20a4 <__stack_size__+0xa4>
    217c:	2300      	movs	r3, #0
    217e:	e7a2      	b.n	20c6 <__stack_size__+0xc6>
    2180:	1c08      	adds	r0, r1, #0
    2182:	4320      	orrs	r0, r4
    2184:	2d00      	cmp	r5, #0
    2186:	d000      	beq.n	218a <__stack_size__+0x18a>
    2188:	e0c4      	b.n	2314 <__stack_size__+0x314>
    218a:	2800      	cmp	r0, #0
    218c:	d100      	bne.n	2190 <__stack_size__+0x190>
    218e:	e0f7      	b.n	2380 <__stack_size__+0x380>
    2190:	4658      	mov	r0, fp
    2192:	4318      	orrs	r0, r3
    2194:	d100      	bne.n	2198 <__stack_size__+0x198>
    2196:	e622      	b.n	1dde <__aeabi_dadd+0x52>
    2198:	4658      	mov	r0, fp
    219a:	1902      	adds	r2, r0, r4
    219c:	42a2      	cmp	r2, r4
    219e:	41a4      	sbcs	r4, r4
    21a0:	4264      	negs	r4, r4
    21a2:	1859      	adds	r1, r3, r1
    21a4:	1909      	adds	r1, r1, r4
    21a6:	1c14      	adds	r4, r2, #0
    21a8:	020a      	lsls	r2, r1, #8
    21aa:	d400      	bmi.n	21ae <__stack_size__+0x1ae>
    21ac:	e617      	b.n	1dde <__aeabi_dadd+0x52>
    21ae:	4b87      	ldr	r3, [pc, #540]	; (23cc <__stack_size__+0x3cc>)
    21b0:	2501      	movs	r5, #1
    21b2:	4019      	ands	r1, r3
    21b4:	e613      	b.n	1dde <__aeabi_dadd+0x52>
    21b6:	1c08      	adds	r0, r1, #0
    21b8:	4320      	orrs	r0, r4
    21ba:	2d00      	cmp	r5, #0
    21bc:	d139      	bne.n	2232 <__stack_size__+0x232>
    21be:	2800      	cmp	r0, #0
    21c0:	d171      	bne.n	22a6 <__stack_size__+0x2a6>
    21c2:	4659      	mov	r1, fp
    21c4:	4319      	orrs	r1, r3
    21c6:	d003      	beq.n	21d0 <__stack_size__+0x1d0>
    21c8:	1c19      	adds	r1, r3, #0
    21ca:	465c      	mov	r4, fp
    21cc:	4666      	mov	r6, ip
    21ce:	e606      	b.n	1dde <__aeabi_dadd+0x52>
    21d0:	2700      	movs	r7, #0
    21d2:	2100      	movs	r1, #0
    21d4:	2400      	movs	r4, #0
    21d6:	e694      	b.n	1f02 <__aeabi_dadd+0x176>
    21d8:	4660      	mov	r0, ip
    21da:	3820      	subs	r0, #32
    21dc:	1c1a      	adds	r2, r3, #0
    21de:	40c2      	lsrs	r2, r0
    21e0:	4660      	mov	r0, ip
    21e2:	4691      	mov	r9, r2
    21e4:	2820      	cmp	r0, #32
    21e6:	d100      	bne.n	21ea <__stack_size__+0x1ea>
    21e8:	e0ac      	b.n	2344 <__stack_size__+0x344>
    21ea:	2240      	movs	r2, #64	; 0x40
    21ec:	1a12      	subs	r2, r2, r0
    21ee:	4093      	lsls	r3, r2
    21f0:	465a      	mov	r2, fp
    21f2:	431a      	orrs	r2, r3
    21f4:	1e53      	subs	r3, r2, #1
    21f6:	419a      	sbcs	r2, r3
    21f8:	464b      	mov	r3, r9
    21fa:	431a      	orrs	r2, r3
    21fc:	2300      	movs	r3, #0
    21fe:	e6b6      	b.n	1f6e <__aeabi_dadd+0x1e2>
    2200:	4d71      	ldr	r5, [pc, #452]	; (23c8 <__stack_size__+0x3c8>)
    2202:	45aa      	cmp	sl, r5
    2204:	d000      	beq.n	2208 <__stack_size__+0x208>
    2206:	e76f      	b.n	20e8 <__stack_size__+0xe8>
    2208:	1c19      	adds	r1, r3, #0
    220a:	465c      	mov	r4, fp
    220c:	4655      	mov	r5, sl
    220e:	4666      	mov	r6, ip
    2210:	e5e5      	b.n	1dde <__aeabi_dadd+0x52>
    2212:	2d00      	cmp	r5, #0
    2214:	d122      	bne.n	225c <__stack_size__+0x25c>
    2216:	1c0d      	adds	r5, r1, #0
    2218:	4325      	orrs	r5, r4
    221a:	d077      	beq.n	230c <__stack_size__+0x30c>
    221c:	43d5      	mvns	r5, r2
    221e:	2d00      	cmp	r5, #0
    2220:	d171      	bne.n	2306 <__stack_size__+0x306>
    2222:	445c      	add	r4, fp
    2224:	455c      	cmp	r4, fp
    2226:	4192      	sbcs	r2, r2
    2228:	1859      	adds	r1, r3, r1
    222a:	4252      	negs	r2, r2
    222c:	1889      	adds	r1, r1, r2
    222e:	4655      	mov	r5, sl
    2230:	e6a4      	b.n	1f7c <__aeabi_dadd+0x1f0>
    2232:	2800      	cmp	r0, #0
    2234:	d14d      	bne.n	22d2 <__stack_size__+0x2d2>
    2236:	4659      	mov	r1, fp
    2238:	4319      	orrs	r1, r3
    223a:	d100      	bne.n	223e <__stack_size__+0x23e>
    223c:	e094      	b.n	2368 <__stack_size__+0x368>
    223e:	1c19      	adds	r1, r3, #0
    2240:	465c      	mov	r4, fp
    2242:	4666      	mov	r6, ip
    2244:	4d60      	ldr	r5, [pc, #384]	; (23c8 <__stack_size__+0x3c8>)
    2246:	e5ca      	b.n	1dde <__aeabi_dadd+0x52>
    2248:	430c      	orrs	r4, r1
    224a:	1e61      	subs	r1, r4, #1
    224c:	418c      	sbcs	r4, r1
    224e:	b2e4      	uxtb	r4, r4
    2250:	2100      	movs	r1, #0
    2252:	e75b      	b.n	210c <__stack_size__+0x10c>
    2254:	1c05      	adds	r5, r0, #0
    2256:	2100      	movs	r1, #0
    2258:	2400      	movs	r4, #0
    225a:	e652      	b.n	1f02 <__aeabi_dadd+0x176>
    225c:	4d5a      	ldr	r5, [pc, #360]	; (23c8 <__stack_size__+0x3c8>)
    225e:	45aa      	cmp	sl, r5
    2260:	d054      	beq.n	230c <__stack_size__+0x30c>
    2262:	4255      	negs	r5, r2
    2264:	2280      	movs	r2, #128	; 0x80
    2266:	0410      	lsls	r0, r2, #16
    2268:	4301      	orrs	r1, r0
    226a:	2d38      	cmp	r5, #56	; 0x38
    226c:	dd00      	ble.n	2270 <__stack_size__+0x270>
    226e:	e081      	b.n	2374 <__stack_size__+0x374>
    2270:	2d1f      	cmp	r5, #31
    2272:	dd00      	ble.n	2276 <__stack_size__+0x276>
    2274:	e092      	b.n	239c <__stack_size__+0x39c>
    2276:	2220      	movs	r2, #32
    2278:	1b50      	subs	r0, r2, r5
    227a:	1c0a      	adds	r2, r1, #0
    227c:	4684      	mov	ip, r0
    227e:	4082      	lsls	r2, r0
    2280:	1c20      	adds	r0, r4, #0
    2282:	40e8      	lsrs	r0, r5
    2284:	4302      	orrs	r2, r0
    2286:	4690      	mov	r8, r2
    2288:	4662      	mov	r2, ip
    228a:	4094      	lsls	r4, r2
    228c:	1e60      	subs	r0, r4, #1
    228e:	4184      	sbcs	r4, r0
    2290:	4642      	mov	r2, r8
    2292:	4314      	orrs	r4, r2
    2294:	40e9      	lsrs	r1, r5
    2296:	445c      	add	r4, fp
    2298:	455c      	cmp	r4, fp
    229a:	4192      	sbcs	r2, r2
    229c:	18cb      	adds	r3, r1, r3
    229e:	4252      	negs	r2, r2
    22a0:	1899      	adds	r1, r3, r2
    22a2:	4655      	mov	r5, sl
    22a4:	e66a      	b.n	1f7c <__aeabi_dadd+0x1f0>
    22a6:	4658      	mov	r0, fp
    22a8:	4318      	orrs	r0, r3
    22aa:	d100      	bne.n	22ae <__stack_size__+0x2ae>
    22ac:	e597      	b.n	1dde <__aeabi_dadd+0x52>
    22ae:	4658      	mov	r0, fp
    22b0:	1a27      	subs	r7, r4, r0
    22b2:	42bc      	cmp	r4, r7
    22b4:	4192      	sbcs	r2, r2
    22b6:	1ac8      	subs	r0, r1, r3
    22b8:	4252      	negs	r2, r2
    22ba:	1a80      	subs	r0, r0, r2
    22bc:	0202      	lsls	r2, r0, #8
    22be:	d566      	bpl.n	238e <__stack_size__+0x38e>
    22c0:	4658      	mov	r0, fp
    22c2:	1b04      	subs	r4, r0, r4
    22c4:	45a3      	cmp	fp, r4
    22c6:	4192      	sbcs	r2, r2
    22c8:	1a59      	subs	r1, r3, r1
    22ca:	4252      	negs	r2, r2
    22cc:	1a89      	subs	r1, r1, r2
    22ce:	4666      	mov	r6, ip
    22d0:	e585      	b.n	1dde <__aeabi_dadd+0x52>
    22d2:	4658      	mov	r0, fp
    22d4:	4318      	orrs	r0, r3
    22d6:	d033      	beq.n	2340 <__stack_size__+0x340>
    22d8:	0748      	lsls	r0, r1, #29
    22da:	08e4      	lsrs	r4, r4, #3
    22dc:	4304      	orrs	r4, r0
    22de:	2080      	movs	r0, #128	; 0x80
    22e0:	08c9      	lsrs	r1, r1, #3
    22e2:	0300      	lsls	r0, r0, #12
    22e4:	4201      	tst	r1, r0
    22e6:	d008      	beq.n	22fa <__stack_size__+0x2fa>
    22e8:	08dd      	lsrs	r5, r3, #3
    22ea:	4205      	tst	r5, r0
    22ec:	d105      	bne.n	22fa <__stack_size__+0x2fa>
    22ee:	4659      	mov	r1, fp
    22f0:	08ca      	lsrs	r2, r1, #3
    22f2:	075c      	lsls	r4, r3, #29
    22f4:	4314      	orrs	r4, r2
    22f6:	1c29      	adds	r1, r5, #0
    22f8:	4666      	mov	r6, ip
    22fa:	0f63      	lsrs	r3, r4, #29
    22fc:	00c9      	lsls	r1, r1, #3
    22fe:	4319      	orrs	r1, r3
    2300:	00e4      	lsls	r4, r4, #3
    2302:	4d31      	ldr	r5, [pc, #196]	; (23c8 <__stack_size__+0x3c8>)
    2304:	e56b      	b.n	1dde <__aeabi_dadd+0x52>
    2306:	4a30      	ldr	r2, [pc, #192]	; (23c8 <__stack_size__+0x3c8>)
    2308:	4592      	cmp	sl, r2
    230a:	d1ae      	bne.n	226a <__stack_size__+0x26a>
    230c:	1c19      	adds	r1, r3, #0
    230e:	465c      	mov	r4, fp
    2310:	4655      	mov	r5, sl
    2312:	e564      	b.n	1dde <__aeabi_dadd+0x52>
    2314:	2800      	cmp	r0, #0
    2316:	d036      	beq.n	2386 <__stack_size__+0x386>
    2318:	4658      	mov	r0, fp
    231a:	4318      	orrs	r0, r3
    231c:	d010      	beq.n	2340 <__stack_size__+0x340>
    231e:	2580      	movs	r5, #128	; 0x80
    2320:	0748      	lsls	r0, r1, #29
    2322:	08e4      	lsrs	r4, r4, #3
    2324:	08c9      	lsrs	r1, r1, #3
    2326:	032d      	lsls	r5, r5, #12
    2328:	4304      	orrs	r4, r0
    232a:	4229      	tst	r1, r5
    232c:	d0e5      	beq.n	22fa <__stack_size__+0x2fa>
    232e:	08d8      	lsrs	r0, r3, #3
    2330:	4228      	tst	r0, r5
    2332:	d1e2      	bne.n	22fa <__stack_size__+0x2fa>
    2334:	465d      	mov	r5, fp
    2336:	08ea      	lsrs	r2, r5, #3
    2338:	075c      	lsls	r4, r3, #29
    233a:	4314      	orrs	r4, r2
    233c:	1c01      	adds	r1, r0, #0
    233e:	e7dc      	b.n	22fa <__stack_size__+0x2fa>
    2340:	4d21      	ldr	r5, [pc, #132]	; (23c8 <__stack_size__+0x3c8>)
    2342:	e54c      	b.n	1dde <__aeabi_dadd+0x52>
    2344:	2300      	movs	r3, #0
    2346:	e753      	b.n	21f0 <__stack_size__+0x1f0>
    2348:	1c3d      	adds	r5, r7, #0
    234a:	3d20      	subs	r5, #32
    234c:	1c0a      	adds	r2, r1, #0
    234e:	40ea      	lsrs	r2, r5
    2350:	1c15      	adds	r5, r2, #0
    2352:	2f20      	cmp	r7, #32
    2354:	d034      	beq.n	23c0 <__stack_size__+0x3c0>
    2356:	2640      	movs	r6, #64	; 0x40
    2358:	1bf7      	subs	r7, r6, r7
    235a:	40b9      	lsls	r1, r7
    235c:	430c      	orrs	r4, r1
    235e:	1e61      	subs	r1, r4, #1
    2360:	418c      	sbcs	r4, r1
    2362:	432c      	orrs	r4, r5
    2364:	2100      	movs	r1, #0
    2366:	e6d1      	b.n	210c <__stack_size__+0x10c>
    2368:	2408      	movs	r4, #8
    236a:	2700      	movs	r7, #0
    236c:	4918      	ldr	r1, [pc, #96]	; (23d0 <__stack_size__+0x3d0>)
    236e:	4264      	negs	r4, r4
    2370:	4d15      	ldr	r5, [pc, #84]	; (23c8 <__stack_size__+0x3c8>)
    2372:	e5c6      	b.n	1f02 <__aeabi_dadd+0x176>
    2374:	430c      	orrs	r4, r1
    2376:	1e61      	subs	r1, r4, #1
    2378:	418c      	sbcs	r4, r1
    237a:	b2e4      	uxtb	r4, r4
    237c:	2100      	movs	r1, #0
    237e:	e78a      	b.n	2296 <__stack_size__+0x296>
    2380:	1c19      	adds	r1, r3, #0
    2382:	465c      	mov	r4, fp
    2384:	e52b      	b.n	1dde <__aeabi_dadd+0x52>
    2386:	1c19      	adds	r1, r3, #0
    2388:	465c      	mov	r4, fp
    238a:	4d0f      	ldr	r5, [pc, #60]	; (23c8 <__stack_size__+0x3c8>)
    238c:	e527      	b.n	1dde <__aeabi_dadd+0x52>
    238e:	1c03      	adds	r3, r0, #0
    2390:	433b      	orrs	r3, r7
    2392:	d100      	bne.n	2396 <__stack_size__+0x396>
    2394:	e71c      	b.n	21d0 <__stack_size__+0x1d0>
    2396:	1c01      	adds	r1, r0, #0
    2398:	1c3c      	adds	r4, r7, #0
    239a:	e520      	b.n	1dde <__aeabi_dadd+0x52>
    239c:	2020      	movs	r0, #32
    239e:	4240      	negs	r0, r0
    23a0:	1940      	adds	r0, r0, r5
    23a2:	1c0a      	adds	r2, r1, #0
    23a4:	40c2      	lsrs	r2, r0
    23a6:	4690      	mov	r8, r2
    23a8:	2d20      	cmp	r5, #32
    23aa:	d00b      	beq.n	23c4 <__stack_size__+0x3c4>
    23ac:	2040      	movs	r0, #64	; 0x40
    23ae:	1b45      	subs	r5, r0, r5
    23b0:	40a9      	lsls	r1, r5
    23b2:	430c      	orrs	r4, r1
    23b4:	1e61      	subs	r1, r4, #1
    23b6:	418c      	sbcs	r4, r1
    23b8:	4645      	mov	r5, r8
    23ba:	432c      	orrs	r4, r5
    23bc:	2100      	movs	r1, #0
    23be:	e76a      	b.n	2296 <__stack_size__+0x296>
    23c0:	2100      	movs	r1, #0
    23c2:	e7cb      	b.n	235c <__stack_size__+0x35c>
    23c4:	2100      	movs	r1, #0
    23c6:	e7f4      	b.n	23b2 <__stack_size__+0x3b2>
    23c8:	000007ff 	.word	0x000007ff
    23cc:	ff7fffff 	.word	0xff7fffff
    23d0:	007fffff 	.word	0x007fffff

000023d4 <__eqdf2>:
    23d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d6:	465f      	mov	r7, fp
    23d8:	4656      	mov	r6, sl
    23da:	464d      	mov	r5, r9
    23dc:	4644      	mov	r4, r8
    23de:	b4f0      	push	{r4, r5, r6, r7}
    23e0:	1c0d      	adds	r5, r1, #0
    23e2:	1c04      	adds	r4, r0, #0
    23e4:	4680      	mov	r8, r0
    23e6:	0fe8      	lsrs	r0, r5, #31
    23e8:	4681      	mov	r9, r0
    23ea:	0318      	lsls	r0, r3, #12
    23ec:	030f      	lsls	r7, r1, #12
    23ee:	0b00      	lsrs	r0, r0, #12
    23f0:	0b3f      	lsrs	r7, r7, #12
    23f2:	b083      	sub	sp, #12
    23f4:	4684      	mov	ip, r0
    23f6:	481b      	ldr	r0, [pc, #108]	; (2464 <__eqdf2+0x90>)
    23f8:	9700      	str	r7, [sp, #0]
    23fa:	0049      	lsls	r1, r1, #1
    23fc:	005e      	lsls	r6, r3, #1
    23fe:	0fdf      	lsrs	r7, r3, #31
    2400:	0d49      	lsrs	r1, r1, #21
    2402:	4692      	mov	sl, r2
    2404:	0d76      	lsrs	r6, r6, #21
    2406:	46bb      	mov	fp, r7
    2408:	4281      	cmp	r1, r0
    240a:	d00c      	beq.n	2426 <__eqdf2+0x52>
    240c:	4815      	ldr	r0, [pc, #84]	; (2464 <__eqdf2+0x90>)
    240e:	4286      	cmp	r6, r0
    2410:	d010      	beq.n	2434 <__eqdf2+0x60>
    2412:	2001      	movs	r0, #1
    2414:	42b1      	cmp	r1, r6
    2416:	d015      	beq.n	2444 <__eqdf2+0x70>
    2418:	b003      	add	sp, #12
    241a:	bc3c      	pop	{r2, r3, r4, r5}
    241c:	4690      	mov	r8, r2
    241e:	4699      	mov	r9, r3
    2420:	46a2      	mov	sl, r4
    2422:	46ab      	mov	fp, r5
    2424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2426:	9f00      	ldr	r7, [sp, #0]
    2428:	2001      	movs	r0, #1
    242a:	4327      	orrs	r7, r4
    242c:	d1f4      	bne.n	2418 <__eqdf2+0x44>
    242e:	480d      	ldr	r0, [pc, #52]	; (2464 <__eqdf2+0x90>)
    2430:	4286      	cmp	r6, r0
    2432:	d1ee      	bne.n	2412 <__eqdf2+0x3e>
    2434:	4660      	mov	r0, ip
    2436:	4302      	orrs	r2, r0
    2438:	2001      	movs	r0, #1
    243a:	2a00      	cmp	r2, #0
    243c:	d1ec      	bne.n	2418 <__eqdf2+0x44>
    243e:	2001      	movs	r0, #1
    2440:	42b1      	cmp	r1, r6
    2442:	d1e9      	bne.n	2418 <__eqdf2+0x44>
    2444:	9b00      	ldr	r3, [sp, #0]
    2446:	4563      	cmp	r3, ip
    2448:	d1e6      	bne.n	2418 <__eqdf2+0x44>
    244a:	45d0      	cmp	r8, sl
    244c:	d1e4      	bne.n	2418 <__eqdf2+0x44>
    244e:	45d9      	cmp	r9, fp
    2450:	d006      	beq.n	2460 <__eqdf2+0x8c>
    2452:	2900      	cmp	r1, #0
    2454:	d1e0      	bne.n	2418 <__eqdf2+0x44>
    2456:	431c      	orrs	r4, r3
    2458:	1c20      	adds	r0, r4, #0
    245a:	1e44      	subs	r4, r0, #1
    245c:	41a0      	sbcs	r0, r4
    245e:	e7db      	b.n	2418 <__eqdf2+0x44>
    2460:	2000      	movs	r0, #0
    2462:	e7d9      	b.n	2418 <__eqdf2+0x44>
    2464:	000007ff 	.word	0x000007ff

00002468 <__gedf2>:
    2468:	b5f0      	push	{r4, r5, r6, r7, lr}
    246a:	465f      	mov	r7, fp
    246c:	4656      	mov	r6, sl
    246e:	464d      	mov	r5, r9
    2470:	4644      	mov	r4, r8
    2472:	b4f0      	push	{r4, r5, r6, r7}
    2474:	0fcd      	lsrs	r5, r1, #31
    2476:	0fde      	lsrs	r6, r3, #31
    2478:	46ac      	mov	ip, r5
    247a:	031d      	lsls	r5, r3, #12
    247c:	0b2d      	lsrs	r5, r5, #12
    247e:	46b1      	mov	r9, r6
    2480:	4e35      	ldr	r6, [pc, #212]	; (2558 <__gedf2+0xf0>)
    2482:	030f      	lsls	r7, r1, #12
    2484:	004c      	lsls	r4, r1, #1
    2486:	46ab      	mov	fp, r5
    2488:	005d      	lsls	r5, r3, #1
    248a:	4680      	mov	r8, r0
    248c:	0b3f      	lsrs	r7, r7, #12
    248e:	0d64      	lsrs	r4, r4, #21
    2490:	4692      	mov	sl, r2
    2492:	0d6d      	lsrs	r5, r5, #21
    2494:	42b4      	cmp	r4, r6
    2496:	d031      	beq.n	24fc <__gedf2+0x94>
    2498:	4e2f      	ldr	r6, [pc, #188]	; (2558 <__gedf2+0xf0>)
    249a:	42b5      	cmp	r5, r6
    249c:	d034      	beq.n	2508 <__gedf2+0xa0>
    249e:	2c00      	cmp	r4, #0
    24a0:	d10e      	bne.n	24c0 <__gedf2+0x58>
    24a2:	4338      	orrs	r0, r7
    24a4:	4241      	negs	r1, r0
    24a6:	4141      	adcs	r1, r0
    24a8:	1c08      	adds	r0, r1, #0
    24aa:	2d00      	cmp	r5, #0
    24ac:	d00b      	beq.n	24c6 <__gedf2+0x5e>
    24ae:	2900      	cmp	r1, #0
    24b0:	d119      	bne.n	24e6 <__gedf2+0x7e>
    24b2:	45cc      	cmp	ip, r9
    24b4:	d02c      	beq.n	2510 <__gedf2+0xa8>
    24b6:	4666      	mov	r6, ip
    24b8:	2e00      	cmp	r6, #0
    24ba:	d117      	bne.n	24ec <__gedf2+0x84>
    24bc:	2001      	movs	r0, #1
    24be:	e017      	b.n	24f0 <__gedf2+0x88>
    24c0:	2d00      	cmp	r5, #0
    24c2:	d1f6      	bne.n	24b2 <__gedf2+0x4a>
    24c4:	1c28      	adds	r0, r5, #0
    24c6:	4659      	mov	r1, fp
    24c8:	430a      	orrs	r2, r1
    24ca:	4253      	negs	r3, r2
    24cc:	4153      	adcs	r3, r2
    24ce:	2800      	cmp	r0, #0
    24d0:	d106      	bne.n	24e0 <__gedf2+0x78>
    24d2:	2b00      	cmp	r3, #0
    24d4:	d0ed      	beq.n	24b2 <__gedf2+0x4a>
    24d6:	4665      	mov	r5, ip
    24d8:	2001      	movs	r0, #1
    24da:	2d00      	cmp	r5, #0
    24dc:	d008      	beq.n	24f0 <__gedf2+0x88>
    24de:	e005      	b.n	24ec <__gedf2+0x84>
    24e0:	2000      	movs	r0, #0
    24e2:	2b00      	cmp	r3, #0
    24e4:	d104      	bne.n	24f0 <__gedf2+0x88>
    24e6:	464b      	mov	r3, r9
    24e8:	2b00      	cmp	r3, #0
    24ea:	d1e7      	bne.n	24bc <__gedf2+0x54>
    24ec:	2001      	movs	r0, #1
    24ee:	4240      	negs	r0, r0
    24f0:	bc3c      	pop	{r2, r3, r4, r5}
    24f2:	4690      	mov	r8, r2
    24f4:	4699      	mov	r9, r3
    24f6:	46a2      	mov	sl, r4
    24f8:	46ab      	mov	fp, r5
    24fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24fc:	1c3e      	adds	r6, r7, #0
    24fe:	4306      	orrs	r6, r0
    2500:	d0ca      	beq.n	2498 <__gedf2+0x30>
    2502:	2002      	movs	r0, #2
    2504:	4240      	negs	r0, r0
    2506:	e7f3      	b.n	24f0 <__gedf2+0x88>
    2508:	465e      	mov	r6, fp
    250a:	4316      	orrs	r6, r2
    250c:	d0c7      	beq.n	249e <__gedf2+0x36>
    250e:	e7f8      	b.n	2502 <__gedf2+0x9a>
    2510:	42ac      	cmp	r4, r5
    2512:	dc05      	bgt.n	2520 <__gedf2+0xb8>
    2514:	da09      	bge.n	252a <__gedf2+0xc2>
    2516:	4663      	mov	r3, ip
    2518:	2b00      	cmp	r3, #0
    251a:	d0e7      	beq.n	24ec <__gedf2+0x84>
    251c:	2001      	movs	r0, #1
    251e:	e7e7      	b.n	24f0 <__gedf2+0x88>
    2520:	4661      	mov	r1, ip
    2522:	2900      	cmp	r1, #0
    2524:	d1e2      	bne.n	24ec <__gedf2+0x84>
    2526:	2001      	movs	r0, #1
    2528:	e7e2      	b.n	24f0 <__gedf2+0x88>
    252a:	455f      	cmp	r7, fp
    252c:	d808      	bhi.n	2540 <__gedf2+0xd8>
    252e:	d00c      	beq.n	254a <__gedf2+0xe2>
    2530:	2000      	movs	r0, #0
    2532:	455f      	cmp	r7, fp
    2534:	d2dc      	bcs.n	24f0 <__gedf2+0x88>
    2536:	4666      	mov	r6, ip
    2538:	2e00      	cmp	r6, #0
    253a:	d0d7      	beq.n	24ec <__gedf2+0x84>
    253c:	2001      	movs	r0, #1
    253e:	e7d7      	b.n	24f0 <__gedf2+0x88>
    2540:	4665      	mov	r5, ip
    2542:	2d00      	cmp	r5, #0
    2544:	d1d2      	bne.n	24ec <__gedf2+0x84>
    2546:	2001      	movs	r0, #1
    2548:	e7d2      	b.n	24f0 <__gedf2+0x88>
    254a:	45d0      	cmp	r8, sl
    254c:	d8f8      	bhi.n	2540 <__gedf2+0xd8>
    254e:	2000      	movs	r0, #0
    2550:	45d0      	cmp	r8, sl
    2552:	d3f0      	bcc.n	2536 <__gedf2+0xce>
    2554:	e7cc      	b.n	24f0 <__gedf2+0x88>
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	000007ff 	.word	0x000007ff

0000255c <__ledf2>:
    255c:	b5f0      	push	{r4, r5, r6, r7, lr}
    255e:	4656      	mov	r6, sl
    2560:	464d      	mov	r5, r9
    2562:	4644      	mov	r4, r8
    2564:	465f      	mov	r7, fp
    2566:	b4f0      	push	{r4, r5, r6, r7}
    2568:	1c0d      	adds	r5, r1, #0
    256a:	b083      	sub	sp, #12
    256c:	1c04      	adds	r4, r0, #0
    256e:	9001      	str	r0, [sp, #4]
    2570:	0fe8      	lsrs	r0, r5, #31
    2572:	4681      	mov	r9, r0
    2574:	0318      	lsls	r0, r3, #12
    2576:	030f      	lsls	r7, r1, #12
    2578:	0b00      	lsrs	r0, r0, #12
    257a:	0b3f      	lsrs	r7, r7, #12
    257c:	4684      	mov	ip, r0
    257e:	4838      	ldr	r0, [pc, #224]	; (2660 <__ledf2+0x104>)
    2580:	9700      	str	r7, [sp, #0]
    2582:	0049      	lsls	r1, r1, #1
    2584:	005e      	lsls	r6, r3, #1
    2586:	0fdf      	lsrs	r7, r3, #31
    2588:	0d49      	lsrs	r1, r1, #21
    258a:	4692      	mov	sl, r2
    258c:	0d76      	lsrs	r6, r6, #21
    258e:	46b8      	mov	r8, r7
    2590:	4281      	cmp	r1, r0
    2592:	d033      	beq.n	25fc <__ledf2+0xa0>
    2594:	4832      	ldr	r0, [pc, #200]	; (2660 <__ledf2+0x104>)
    2596:	4286      	cmp	r6, r0
    2598:	d035      	beq.n	2606 <__ledf2+0xaa>
    259a:	2900      	cmp	r1, #0
    259c:	d017      	beq.n	25ce <__ledf2+0x72>
    259e:	2e00      	cmp	r6, #0
    25a0:	d11e      	bne.n	25e0 <__ledf2+0x84>
    25a2:	1c34      	adds	r4, r6, #0
    25a4:	4667      	mov	r7, ip
    25a6:	433a      	orrs	r2, r7
    25a8:	4253      	negs	r3, r2
    25aa:	4153      	adcs	r3, r2
    25ac:	2c00      	cmp	r4, #0
    25ae:	d01e      	beq.n	25ee <__ledf2+0x92>
    25b0:	2000      	movs	r0, #0
    25b2:	2b00      	cmp	r3, #0
    25b4:	d104      	bne.n	25c0 <__ledf2+0x64>
    25b6:	4640      	mov	r0, r8
    25b8:	2800      	cmp	r0, #0
    25ba:	d116      	bne.n	25ea <__ledf2+0x8e>
    25bc:	2001      	movs	r0, #1
    25be:	4240      	negs	r0, r0
    25c0:	b003      	add	sp, #12
    25c2:	bc3c      	pop	{r2, r3, r4, r5}
    25c4:	4690      	mov	r8, r2
    25c6:	4699      	mov	r9, r3
    25c8:	46a2      	mov	sl, r4
    25ca:	46ab      	mov	fp, r5
    25cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ce:	9800      	ldr	r0, [sp, #0]
    25d0:	4304      	orrs	r4, r0
    25d2:	4260      	negs	r0, r4
    25d4:	4160      	adcs	r0, r4
    25d6:	1c04      	adds	r4, r0, #0
    25d8:	2e00      	cmp	r6, #0
    25da:	d0e3      	beq.n	25a4 <__ledf2+0x48>
    25dc:	2800      	cmp	r0, #0
    25de:	d1ea      	bne.n	25b6 <__ledf2+0x5a>
    25e0:	45c1      	cmp	r9, r8
    25e2:	d015      	beq.n	2610 <__ledf2+0xb4>
    25e4:	464f      	mov	r7, r9
    25e6:	2f00      	cmp	r7, #0
    25e8:	d1e8      	bne.n	25bc <__ledf2+0x60>
    25ea:	2001      	movs	r0, #1
    25ec:	e7e8      	b.n	25c0 <__ledf2+0x64>
    25ee:	2b00      	cmp	r3, #0
    25f0:	d0f6      	beq.n	25e0 <__ledf2+0x84>
    25f2:	464b      	mov	r3, r9
    25f4:	2001      	movs	r0, #1
    25f6:	2b00      	cmp	r3, #0
    25f8:	d0e2      	beq.n	25c0 <__ledf2+0x64>
    25fa:	e7df      	b.n	25bc <__ledf2+0x60>
    25fc:	9f00      	ldr	r7, [sp, #0]
    25fe:	2002      	movs	r0, #2
    2600:	4327      	orrs	r7, r4
    2602:	d1dd      	bne.n	25c0 <__ledf2+0x64>
    2604:	e7c6      	b.n	2594 <__ledf2+0x38>
    2606:	4667      	mov	r7, ip
    2608:	2002      	movs	r0, #2
    260a:	4317      	orrs	r7, r2
    260c:	d1d8      	bne.n	25c0 <__ledf2+0x64>
    260e:	e7c4      	b.n	259a <__ledf2+0x3e>
    2610:	42b1      	cmp	r1, r6
    2612:	dd04      	ble.n	261e <__ledf2+0xc2>
    2614:	4648      	mov	r0, r9
    2616:	2800      	cmp	r0, #0
    2618:	d1d0      	bne.n	25bc <__ledf2+0x60>
    261a:	2001      	movs	r0, #1
    261c:	e7d0      	b.n	25c0 <__ledf2+0x64>
    261e:	42b1      	cmp	r1, r6
    2620:	da04      	bge.n	262c <__ledf2+0xd0>
    2622:	464b      	mov	r3, r9
    2624:	2b00      	cmp	r3, #0
    2626:	d0c9      	beq.n	25bc <__ledf2+0x60>
    2628:	2001      	movs	r0, #1
    262a:	e7c9      	b.n	25c0 <__ledf2+0x64>
    262c:	9f00      	ldr	r7, [sp, #0]
    262e:	4567      	cmp	r7, ip
    2630:	d809      	bhi.n	2646 <__ledf2+0xea>
    2632:	d00d      	beq.n	2650 <__ledf2+0xf4>
    2634:	9f00      	ldr	r7, [sp, #0]
    2636:	2000      	movs	r0, #0
    2638:	4567      	cmp	r7, ip
    263a:	d2c1      	bcs.n	25c0 <__ledf2+0x64>
    263c:	464f      	mov	r7, r9
    263e:	2f00      	cmp	r7, #0
    2640:	d0bc      	beq.n	25bc <__ledf2+0x60>
    2642:	2001      	movs	r0, #1
    2644:	e7bc      	b.n	25c0 <__ledf2+0x64>
    2646:	464b      	mov	r3, r9
    2648:	2b00      	cmp	r3, #0
    264a:	d1b7      	bne.n	25bc <__ledf2+0x60>
    264c:	2001      	movs	r0, #1
    264e:	e7b7      	b.n	25c0 <__ledf2+0x64>
    2650:	9801      	ldr	r0, [sp, #4]
    2652:	4550      	cmp	r0, sl
    2654:	d8f7      	bhi.n	2646 <__ledf2+0xea>
    2656:	9b01      	ldr	r3, [sp, #4]
    2658:	2000      	movs	r0, #0
    265a:	4553      	cmp	r3, sl
    265c:	d3ee      	bcc.n	263c <__ledf2+0xe0>
    265e:	e7af      	b.n	25c0 <__ledf2+0x64>
    2660:	000007ff 	.word	0x000007ff

00002664 <__aeabi_dmul>:
    2664:	b5f0      	push	{r4, r5, r6, r7, lr}
    2666:	4656      	mov	r6, sl
    2668:	4644      	mov	r4, r8
    266a:	465f      	mov	r7, fp
    266c:	464d      	mov	r5, r9
    266e:	b4f0      	push	{r4, r5, r6, r7}
    2670:	1c1f      	adds	r7, r3, #0
    2672:	030b      	lsls	r3, r1, #12
    2674:	0b1b      	lsrs	r3, r3, #12
    2676:	469a      	mov	sl, r3
    2678:	004b      	lsls	r3, r1, #1
    267a:	b087      	sub	sp, #28
    267c:	1c04      	adds	r4, r0, #0
    267e:	4680      	mov	r8, r0
    2680:	0d5b      	lsrs	r3, r3, #21
    2682:	0fc8      	lsrs	r0, r1, #31
    2684:	1c16      	adds	r6, r2, #0
    2686:	9302      	str	r3, [sp, #8]
    2688:	4681      	mov	r9, r0
    268a:	2b00      	cmp	r3, #0
    268c:	d068      	beq.n	2760 <__aeabi_dmul+0xfc>
    268e:	4b69      	ldr	r3, [pc, #420]	; (2834 <__aeabi_dmul+0x1d0>)
    2690:	9902      	ldr	r1, [sp, #8]
    2692:	4299      	cmp	r1, r3
    2694:	d032      	beq.n	26fc <__aeabi_dmul+0x98>
    2696:	2280      	movs	r2, #128	; 0x80
    2698:	4653      	mov	r3, sl
    269a:	0352      	lsls	r2, r2, #13
    269c:	431a      	orrs	r2, r3
    269e:	00d2      	lsls	r2, r2, #3
    26a0:	0f63      	lsrs	r3, r4, #29
    26a2:	431a      	orrs	r2, r3
    26a4:	4692      	mov	sl, r2
    26a6:	4a64      	ldr	r2, [pc, #400]	; (2838 <__aeabi_dmul+0x1d4>)
    26a8:	00e0      	lsls	r0, r4, #3
    26aa:	1889      	adds	r1, r1, r2
    26ac:	4680      	mov	r8, r0
    26ae:	9102      	str	r1, [sp, #8]
    26b0:	2400      	movs	r4, #0
    26b2:	2500      	movs	r5, #0
    26b4:	033b      	lsls	r3, r7, #12
    26b6:	0b1b      	lsrs	r3, r3, #12
    26b8:	469b      	mov	fp, r3
    26ba:	0078      	lsls	r0, r7, #1
    26bc:	0ffb      	lsrs	r3, r7, #31
    26be:	1c32      	adds	r2, r6, #0
    26c0:	0d40      	lsrs	r0, r0, #21
    26c2:	9303      	str	r3, [sp, #12]
    26c4:	d100      	bne.n	26c8 <__aeabi_dmul+0x64>
    26c6:	e075      	b.n	27b4 <__aeabi_dmul+0x150>
    26c8:	4b5a      	ldr	r3, [pc, #360]	; (2834 <__aeabi_dmul+0x1d0>)
    26ca:	4298      	cmp	r0, r3
    26cc:	d069      	beq.n	27a2 <__aeabi_dmul+0x13e>
    26ce:	2280      	movs	r2, #128	; 0x80
    26d0:	4659      	mov	r1, fp
    26d2:	0352      	lsls	r2, r2, #13
    26d4:	430a      	orrs	r2, r1
    26d6:	0f73      	lsrs	r3, r6, #29
    26d8:	00d2      	lsls	r2, r2, #3
    26da:	431a      	orrs	r2, r3
    26dc:	4b56      	ldr	r3, [pc, #344]	; (2838 <__aeabi_dmul+0x1d4>)
    26de:	4693      	mov	fp, r2
    26e0:	18c0      	adds	r0, r0, r3
    26e2:	00f2      	lsls	r2, r6, #3
    26e4:	2300      	movs	r3, #0
    26e6:	9903      	ldr	r1, [sp, #12]
    26e8:	464e      	mov	r6, r9
    26ea:	4071      	eors	r1, r6
    26ec:	431c      	orrs	r4, r3
    26ee:	2c0f      	cmp	r4, #15
    26f0:	d900      	bls.n	26f4 <__aeabi_dmul+0x90>
    26f2:	e0ab      	b.n	284c <__aeabi_dmul+0x1e8>
    26f4:	4e51      	ldr	r6, [pc, #324]	; (283c <__aeabi_dmul+0x1d8>)
    26f6:	00a4      	lsls	r4, r4, #2
    26f8:	5934      	ldr	r4, [r6, r4]
    26fa:	46a7      	mov	pc, r4
    26fc:	4653      	mov	r3, sl
    26fe:	431c      	orrs	r4, r3
    2700:	d000      	beq.n	2704 <__aeabi_dmul+0xa0>
    2702:	e087      	b.n	2814 <__aeabi_dmul+0x1b0>
    2704:	2500      	movs	r5, #0
    2706:	46aa      	mov	sl, r5
    2708:	46a8      	mov	r8, r5
    270a:	2408      	movs	r4, #8
    270c:	2502      	movs	r5, #2
    270e:	e7d1      	b.n	26b4 <__aeabi_dmul+0x50>
    2710:	4649      	mov	r1, r9
    2712:	2d02      	cmp	r5, #2
    2714:	d06c      	beq.n	27f0 <__aeabi_dmul+0x18c>
    2716:	2d03      	cmp	r5, #3
    2718:	d100      	bne.n	271c <__aeabi_dmul+0xb8>
    271a:	e219      	b.n	2b50 <__aeabi_dmul+0x4ec>
    271c:	2d01      	cmp	r5, #1
    271e:	d000      	beq.n	2722 <__aeabi_dmul+0xbe>
    2720:	e15a      	b.n	29d8 <__aeabi_dmul+0x374>
    2722:	400d      	ands	r5, r1
    2724:	b2ed      	uxtb	r5, r5
    2726:	2400      	movs	r4, #0
    2728:	46a9      	mov	r9, r5
    272a:	2300      	movs	r3, #0
    272c:	46a0      	mov	r8, r4
    272e:	2000      	movs	r0, #0
    2730:	2100      	movs	r1, #0
    2732:	0325      	lsls	r5, r4, #12
    2734:	0d0a      	lsrs	r2, r1, #20
    2736:	051c      	lsls	r4, r3, #20
    2738:	0b2d      	lsrs	r5, r5, #12
    273a:	0512      	lsls	r2, r2, #20
    273c:	4b40      	ldr	r3, [pc, #256]	; (2840 <__aeabi_dmul+0x1dc>)
    273e:	432a      	orrs	r2, r5
    2740:	4013      	ands	r3, r2
    2742:	4323      	orrs	r3, r4
    2744:	005b      	lsls	r3, r3, #1
    2746:	464c      	mov	r4, r9
    2748:	085b      	lsrs	r3, r3, #1
    274a:	07e2      	lsls	r2, r4, #31
    274c:	1c19      	adds	r1, r3, #0
    274e:	4640      	mov	r0, r8
    2750:	4311      	orrs	r1, r2
    2752:	b007      	add	sp, #28
    2754:	bc3c      	pop	{r2, r3, r4, r5}
    2756:	4690      	mov	r8, r2
    2758:	4699      	mov	r9, r3
    275a:	46a2      	mov	sl, r4
    275c:	46ab      	mov	fp, r5
    275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2760:	4653      	mov	r3, sl
    2762:	4323      	orrs	r3, r4
    2764:	d050      	beq.n	2808 <__aeabi_dmul+0x1a4>
    2766:	4653      	mov	r3, sl
    2768:	2b00      	cmp	r3, #0
    276a:	d100      	bne.n	276e <__aeabi_dmul+0x10a>
    276c:	e186      	b.n	2a7c <__aeabi_dmul+0x418>
    276e:	4650      	mov	r0, sl
    2770:	f000 fa48 	bl	2c04 <__clzsi2>
    2774:	1e03      	subs	r3, r0, #0
    2776:	2b27      	cmp	r3, #39	; 0x27
    2778:	dd00      	ble.n	277c <__aeabi_dmul+0x118>
    277a:	e178      	b.n	2a6e <__aeabi_dmul+0x40a>
    277c:	2128      	movs	r1, #40	; 0x28
    277e:	1a0d      	subs	r5, r1, r0
    2780:	1c21      	adds	r1, r4, #0
    2782:	3b08      	subs	r3, #8
    2784:	4652      	mov	r2, sl
    2786:	40e9      	lsrs	r1, r5
    2788:	409a      	lsls	r2, r3
    278a:	1c0d      	adds	r5, r1, #0
    278c:	4315      	orrs	r5, r2
    278e:	1c22      	adds	r2, r4, #0
    2790:	409a      	lsls	r2, r3
    2792:	46aa      	mov	sl, r5
    2794:	4690      	mov	r8, r2
    2796:	4b2b      	ldr	r3, [pc, #172]	; (2844 <__aeabi_dmul+0x1e0>)
    2798:	2400      	movs	r4, #0
    279a:	1a1b      	subs	r3, r3, r0
    279c:	9302      	str	r3, [sp, #8]
    279e:	2500      	movs	r5, #0
    27a0:	e788      	b.n	26b4 <__aeabi_dmul+0x50>
    27a2:	465b      	mov	r3, fp
    27a4:	431e      	orrs	r6, r3
    27a6:	2303      	movs	r3, #3
    27a8:	2e00      	cmp	r6, #0
    27aa:	d19c      	bne.n	26e6 <__aeabi_dmul+0x82>
    27ac:	46b3      	mov	fp, r6
    27ae:	2200      	movs	r2, #0
    27b0:	2302      	movs	r3, #2
    27b2:	e798      	b.n	26e6 <__aeabi_dmul+0x82>
    27b4:	465b      	mov	r3, fp
    27b6:	4333      	orrs	r3, r6
    27b8:	d021      	beq.n	27fe <__aeabi_dmul+0x19a>
    27ba:	4658      	mov	r0, fp
    27bc:	2800      	cmp	r0, #0
    27be:	d100      	bne.n	27c2 <__aeabi_dmul+0x15e>
    27c0:	e150      	b.n	2a64 <__aeabi_dmul+0x400>
    27c2:	f000 fa1f 	bl	2c04 <__clzsi2>
    27c6:	2827      	cmp	r0, #39	; 0x27
    27c8:	dd00      	ble.n	27cc <__aeabi_dmul+0x168>
    27ca:	e144      	b.n	2a56 <__aeabi_dmul+0x3f2>
    27cc:	2128      	movs	r1, #40	; 0x28
    27ce:	1a0f      	subs	r7, r1, r0
    27d0:	1c02      	adds	r2, r0, #0
    27d2:	1c31      	adds	r1, r6, #0
    27d4:	3a08      	subs	r2, #8
    27d6:	465b      	mov	r3, fp
    27d8:	40f9      	lsrs	r1, r7
    27da:	4093      	lsls	r3, r2
    27dc:	1c0f      	adds	r7, r1, #0
    27de:	431f      	orrs	r7, r3
    27e0:	1c33      	adds	r3, r6, #0
    27e2:	4093      	lsls	r3, r2
    27e4:	46bb      	mov	fp, r7
    27e6:	1c1a      	adds	r2, r3, #0
    27e8:	4b16      	ldr	r3, [pc, #88]	; (2844 <__aeabi_dmul+0x1e0>)
    27ea:	1a18      	subs	r0, r3, r0
    27ec:	2300      	movs	r3, #0
    27ee:	e77a      	b.n	26e6 <__aeabi_dmul+0x82>
    27f0:	2301      	movs	r3, #1
    27f2:	400b      	ands	r3, r1
    27f4:	2400      	movs	r4, #0
    27f6:	4699      	mov	r9, r3
    27f8:	46a0      	mov	r8, r4
    27fa:	4b0e      	ldr	r3, [pc, #56]	; (2834 <__aeabi_dmul+0x1d0>)
    27fc:	e797      	b.n	272e <__aeabi_dmul+0xca>
    27fe:	2700      	movs	r7, #0
    2800:	46bb      	mov	fp, r7
    2802:	2200      	movs	r2, #0
    2804:	2301      	movs	r3, #1
    2806:	e76e      	b.n	26e6 <__aeabi_dmul+0x82>
    2808:	2100      	movs	r1, #0
    280a:	2404      	movs	r4, #4
    280c:	468a      	mov	sl, r1
    280e:	4688      	mov	r8, r1
    2810:	2501      	movs	r5, #1
    2812:	e74f      	b.n	26b4 <__aeabi_dmul+0x50>
    2814:	240c      	movs	r4, #12
    2816:	2503      	movs	r5, #3
    2818:	e74c      	b.n	26b4 <__aeabi_dmul+0x50>
    281a:	2301      	movs	r3, #1
    281c:	425b      	negs	r3, r3
    281e:	2500      	movs	r5, #0
    2820:	4698      	mov	r8, r3
    2822:	46a9      	mov	r9, r5
    2824:	4c08      	ldr	r4, [pc, #32]	; (2848 <__aeabi_dmul+0x1e4>)
    2826:	4b03      	ldr	r3, [pc, #12]	; (2834 <__aeabi_dmul+0x1d0>)
    2828:	e781      	b.n	272e <__aeabi_dmul+0xca>
    282a:	46da      	mov	sl, fp
    282c:	4690      	mov	r8, r2
    282e:	9903      	ldr	r1, [sp, #12]
    2830:	1c1d      	adds	r5, r3, #0
    2832:	e76e      	b.n	2712 <__aeabi_dmul+0xae>
    2834:	000007ff 	.word	0x000007ff
    2838:	fffffc01 	.word	0xfffffc01
    283c:	00007c74 	.word	0x00007c74
    2840:	800fffff 	.word	0x800fffff
    2844:	fffffc0d 	.word	0xfffffc0d
    2848:	000fffff 	.word	0x000fffff
    284c:	9f02      	ldr	r7, [sp, #8]
    284e:	0c16      	lsrs	r6, r2, #16
    2850:	1838      	adds	r0, r7, r0
    2852:	9004      	str	r0, [sp, #16]
    2854:	4640      	mov	r0, r8
    2856:	0c07      	lsrs	r7, r0, #16
    2858:	0400      	lsls	r0, r0, #16
    285a:	0c00      	lsrs	r0, r0, #16
    285c:	0412      	lsls	r2, r2, #16
    285e:	0c12      	lsrs	r2, r2, #16
    2860:	1c03      	adds	r3, r0, #0
    2862:	4353      	muls	r3, r2
    2864:	1c04      	adds	r4, r0, #0
    2866:	1c3d      	adds	r5, r7, #0
    2868:	4374      	muls	r4, r6
    286a:	4355      	muls	r5, r2
    286c:	4698      	mov	r8, r3
    286e:	1c3b      	adds	r3, r7, #0
    2870:	4373      	muls	r3, r6
    2872:	1964      	adds	r4, r4, r5
    2874:	46a4      	mov	ip, r4
    2876:	4644      	mov	r4, r8
    2878:	9302      	str	r3, [sp, #8]
    287a:	0c23      	lsrs	r3, r4, #16
    287c:	4463      	add	r3, ip
    287e:	429d      	cmp	r5, r3
    2880:	d904      	bls.n	288c <__aeabi_dmul+0x228>
    2882:	9d02      	ldr	r5, [sp, #8]
    2884:	2480      	movs	r4, #128	; 0x80
    2886:	0264      	lsls	r4, r4, #9
    2888:	192d      	adds	r5, r5, r4
    288a:	9502      	str	r5, [sp, #8]
    288c:	0c1d      	lsrs	r5, r3, #16
    288e:	9503      	str	r5, [sp, #12]
    2890:	4645      	mov	r5, r8
    2892:	042c      	lsls	r4, r5, #16
    2894:	041b      	lsls	r3, r3, #16
    2896:	0c24      	lsrs	r4, r4, #16
    2898:	191c      	adds	r4, r3, r4
    289a:	9405      	str	r4, [sp, #20]
    289c:	465c      	mov	r4, fp
    289e:	0c23      	lsrs	r3, r4, #16
    28a0:	1c05      	adds	r5, r0, #0
    28a2:	4358      	muls	r0, r3
    28a4:	0424      	lsls	r4, r4, #16
    28a6:	0c24      	lsrs	r4, r4, #16
    28a8:	4684      	mov	ip, r0
    28aa:	1c38      	adds	r0, r7, #0
    28ac:	4360      	muls	r0, r4
    28ae:	4365      	muls	r5, r4
    28b0:	435f      	muls	r7, r3
    28b2:	4681      	mov	r9, r0
    28b4:	44cc      	add	ip, r9
    28b6:	0c28      	lsrs	r0, r5, #16
    28b8:	4460      	add	r0, ip
    28ba:	46bb      	mov	fp, r7
    28bc:	4581      	cmp	r9, r0
    28be:	d902      	bls.n	28c6 <__aeabi_dmul+0x262>
    28c0:	2780      	movs	r7, #128	; 0x80
    28c2:	027f      	lsls	r7, r7, #9
    28c4:	44bb      	add	fp, r7
    28c6:	042d      	lsls	r5, r5, #16
    28c8:	0c07      	lsrs	r7, r0, #16
    28ca:	0c2d      	lsrs	r5, r5, #16
    28cc:	0400      	lsls	r0, r0, #16
    28ce:	1940      	adds	r0, r0, r5
    28d0:	4655      	mov	r5, sl
    28d2:	46bc      	mov	ip, r7
    28d4:	042f      	lsls	r7, r5, #16
    28d6:	44e3      	add	fp, ip
    28d8:	4684      	mov	ip, r0
    28da:	0c28      	lsrs	r0, r5, #16
    28dc:	0c3d      	lsrs	r5, r7, #16
    28de:	1c2f      	adds	r7, r5, #0
    28e0:	4357      	muls	r7, r2
    28e2:	46b8      	mov	r8, r7
    28e4:	1c2f      	adds	r7, r5, #0
    28e6:	4377      	muls	r7, r6
    28e8:	4342      	muls	r2, r0
    28ea:	46b9      	mov	r9, r7
    28ec:	4647      	mov	r7, r8
    28ee:	0c3f      	lsrs	r7, r7, #16
    28f0:	4491      	add	r9, r2
    28f2:	46ba      	mov	sl, r7
    28f4:	44d1      	add	r9, sl
    28f6:	4346      	muls	r6, r0
    28f8:	454a      	cmp	r2, r9
    28fa:	d902      	bls.n	2902 <__aeabi_dmul+0x29e>
    28fc:	2280      	movs	r2, #128	; 0x80
    28fe:	0252      	lsls	r2, r2, #9
    2900:	18b6      	adds	r6, r6, r2
    2902:	464f      	mov	r7, r9
    2904:	0c3a      	lsrs	r2, r7, #16
    2906:	18b6      	adds	r6, r6, r2
    2908:	043a      	lsls	r2, r7, #16
    290a:	4647      	mov	r7, r8
    290c:	043f      	lsls	r7, r7, #16
    290e:	0c3f      	lsrs	r7, r7, #16
    2910:	46b8      	mov	r8, r7
    2912:	1c2f      	adds	r7, r5, #0
    2914:	4367      	muls	r7, r4
    2916:	435d      	muls	r5, r3
    2918:	4344      	muls	r4, r0
    291a:	4358      	muls	r0, r3
    291c:	1965      	adds	r5, r4, r5
    291e:	9001      	str	r0, [sp, #4]
    2920:	0c38      	lsrs	r0, r7, #16
    2922:	182d      	adds	r5, r5, r0
    2924:	4442      	add	r2, r8
    2926:	46b8      	mov	r8, r7
    2928:	42ac      	cmp	r4, r5
    292a:	d904      	bls.n	2936 <__aeabi_dmul+0x2d2>
    292c:	9801      	ldr	r0, [sp, #4]
    292e:	2380      	movs	r3, #128	; 0x80
    2930:	025b      	lsls	r3, r3, #9
    2932:	18c0      	adds	r0, r0, r3
    2934:	9001      	str	r0, [sp, #4]
    2936:	9c03      	ldr	r4, [sp, #12]
    2938:	9f02      	ldr	r7, [sp, #8]
    293a:	1c20      	adds	r0, r4, #0
    293c:	4460      	add	r0, ip
    293e:	19c0      	adds	r0, r0, r7
    2940:	4560      	cmp	r0, ip
    2942:	41a4      	sbcs	r4, r4
    2944:	4647      	mov	r7, r8
    2946:	4264      	negs	r4, r4
    2948:	46a4      	mov	ip, r4
    294a:	042b      	lsls	r3, r5, #16
    294c:	043c      	lsls	r4, r7, #16
    294e:	4699      	mov	r9, r3
    2950:	0c24      	lsrs	r4, r4, #16
    2952:	444c      	add	r4, r9
    2954:	46a0      	mov	r8, r4
    2956:	44d8      	add	r8, fp
    2958:	1880      	adds	r0, r0, r2
    295a:	46c2      	mov	sl, r8
    295c:	44e2      	add	sl, ip
    295e:	4290      	cmp	r0, r2
    2960:	4192      	sbcs	r2, r2
    2962:	4657      	mov	r7, sl
    2964:	4252      	negs	r2, r2
    2966:	4691      	mov	r9, r2
    2968:	19f2      	adds	r2, r6, r7
    296a:	45e2      	cmp	sl, ip
    296c:	41bf      	sbcs	r7, r7
    296e:	427f      	negs	r7, r7
    2970:	464b      	mov	r3, r9
    2972:	46bc      	mov	ip, r7
    2974:	45d8      	cmp	r8, fp
    2976:	41bf      	sbcs	r7, r7
    2978:	18d4      	adds	r4, r2, r3
    297a:	427f      	negs	r7, r7
    297c:	4663      	mov	r3, ip
    297e:	431f      	orrs	r7, r3
    2980:	0c2d      	lsrs	r5, r5, #16
    2982:	197f      	adds	r7, r7, r5
    2984:	42b2      	cmp	r2, r6
    2986:	4192      	sbcs	r2, r2
    2988:	454c      	cmp	r4, r9
    298a:	41ad      	sbcs	r5, r5
    298c:	4252      	negs	r2, r2
    298e:	426d      	negs	r5, r5
    2990:	4315      	orrs	r5, r2
    2992:	9e01      	ldr	r6, [sp, #4]
    2994:	197d      	adds	r5, r7, r5
    2996:	19ab      	adds	r3, r5, r6
    2998:	0de2      	lsrs	r2, r4, #23
    299a:	025b      	lsls	r3, r3, #9
    299c:	9f05      	ldr	r7, [sp, #20]
    299e:	4313      	orrs	r3, r2
    29a0:	0242      	lsls	r2, r0, #9
    29a2:	433a      	orrs	r2, r7
    29a4:	469a      	mov	sl, r3
    29a6:	1e53      	subs	r3, r2, #1
    29a8:	419a      	sbcs	r2, r3
    29aa:	0dc3      	lsrs	r3, r0, #23
    29ac:	1c10      	adds	r0, r2, #0
    29ae:	4318      	orrs	r0, r3
    29b0:	0264      	lsls	r4, r4, #9
    29b2:	4320      	orrs	r0, r4
    29b4:	4680      	mov	r8, r0
    29b6:	4650      	mov	r0, sl
    29b8:	01c0      	lsls	r0, r0, #7
    29ba:	d50d      	bpl.n	29d8 <__aeabi_dmul+0x374>
    29bc:	4645      	mov	r5, r8
    29be:	2201      	movs	r2, #1
    29c0:	4656      	mov	r6, sl
    29c2:	9c04      	ldr	r4, [sp, #16]
    29c4:	086b      	lsrs	r3, r5, #1
    29c6:	402a      	ands	r2, r5
    29c8:	431a      	orrs	r2, r3
    29ca:	07f3      	lsls	r3, r6, #31
    29cc:	3401      	adds	r4, #1
    29ce:	431a      	orrs	r2, r3
    29d0:	0876      	lsrs	r6, r6, #1
    29d2:	9404      	str	r4, [sp, #16]
    29d4:	4690      	mov	r8, r2
    29d6:	46b2      	mov	sl, r6
    29d8:	9e04      	ldr	r6, [sp, #16]
    29da:	4f63      	ldr	r7, [pc, #396]	; (2b68 <__aeabi_dmul+0x504>)
    29dc:	19f3      	adds	r3, r6, r7
    29de:	2b00      	cmp	r3, #0
    29e0:	dd61      	ble.n	2aa6 <__aeabi_dmul+0x442>
    29e2:	4640      	mov	r0, r8
    29e4:	0740      	lsls	r0, r0, #29
    29e6:	d00b      	beq.n	2a00 <__aeabi_dmul+0x39c>
    29e8:	220f      	movs	r2, #15
    29ea:	4644      	mov	r4, r8
    29ec:	4022      	ands	r2, r4
    29ee:	2a04      	cmp	r2, #4
    29f0:	d006      	beq.n	2a00 <__aeabi_dmul+0x39c>
    29f2:	4642      	mov	r2, r8
    29f4:	3204      	adds	r2, #4
    29f6:	4542      	cmp	r2, r8
    29f8:	4180      	sbcs	r0, r0
    29fa:	4240      	negs	r0, r0
    29fc:	4482      	add	sl, r0
    29fe:	4690      	mov	r8, r2
    2a00:	4655      	mov	r5, sl
    2a02:	01ed      	lsls	r5, r5, #7
    2a04:	d507      	bpl.n	2a16 <__aeabi_dmul+0x3b2>
    2a06:	4b59      	ldr	r3, [pc, #356]	; (2b6c <__aeabi_dmul+0x508>)
    2a08:	4656      	mov	r6, sl
    2a0a:	9f04      	ldr	r7, [sp, #16]
    2a0c:	2080      	movs	r0, #128	; 0x80
    2a0e:	401e      	ands	r6, r3
    2a10:	00c0      	lsls	r0, r0, #3
    2a12:	46b2      	mov	sl, r6
    2a14:	183b      	adds	r3, r7, r0
    2a16:	4a56      	ldr	r2, [pc, #344]	; (2b70 <__aeabi_dmul+0x50c>)
    2a18:	4293      	cmp	r3, r2
    2a1a:	dd00      	ble.n	2a1e <__aeabi_dmul+0x3ba>
    2a1c:	e6e8      	b.n	27f0 <__aeabi_dmul+0x18c>
    2a1e:	4644      	mov	r4, r8
    2a20:	4655      	mov	r5, sl
    2a22:	08e2      	lsrs	r2, r4, #3
    2a24:	0768      	lsls	r0, r5, #29
    2a26:	4310      	orrs	r0, r2
    2a28:	2201      	movs	r2, #1
    2a2a:	026c      	lsls	r4, r5, #9
    2a2c:	055b      	lsls	r3, r3, #21
    2a2e:	400a      	ands	r2, r1
    2a30:	4680      	mov	r8, r0
    2a32:	0b24      	lsrs	r4, r4, #12
    2a34:	0d5b      	lsrs	r3, r3, #21
    2a36:	4691      	mov	r9, r2
    2a38:	e679      	b.n	272e <__aeabi_dmul+0xca>
    2a3a:	46da      	mov	sl, fp
    2a3c:	4690      	mov	r8, r2
    2a3e:	1c1d      	adds	r5, r3, #0
    2a40:	e667      	b.n	2712 <__aeabi_dmul+0xae>
    2a42:	2480      	movs	r4, #128	; 0x80
    2a44:	0324      	lsls	r4, r4, #12
    2a46:	4657      	mov	r7, sl
    2a48:	4227      	tst	r7, r4
    2a4a:	d11c      	bne.n	2a86 <__aeabi_dmul+0x422>
    2a4c:	433c      	orrs	r4, r7
    2a4e:	0324      	lsls	r4, r4, #12
    2a50:	0b24      	lsrs	r4, r4, #12
    2a52:	4b48      	ldr	r3, [pc, #288]	; (2b74 <__aeabi_dmul+0x510>)
    2a54:	e66b      	b.n	272e <__aeabi_dmul+0xca>
    2a56:	1c03      	adds	r3, r0, #0
    2a58:	3b28      	subs	r3, #40	; 0x28
    2a5a:	1c31      	adds	r1, r6, #0
    2a5c:	4099      	lsls	r1, r3
    2a5e:	468b      	mov	fp, r1
    2a60:	2200      	movs	r2, #0
    2a62:	e6c1      	b.n	27e8 <__aeabi_dmul+0x184>
    2a64:	1c30      	adds	r0, r6, #0
    2a66:	f000 f8cd 	bl	2c04 <__clzsi2>
    2a6a:	3020      	adds	r0, #32
    2a6c:	e6ab      	b.n	27c6 <__aeabi_dmul+0x162>
    2a6e:	3b28      	subs	r3, #40	; 0x28
    2a70:	1c21      	adds	r1, r4, #0
    2a72:	4099      	lsls	r1, r3
    2a74:	2200      	movs	r2, #0
    2a76:	468a      	mov	sl, r1
    2a78:	4690      	mov	r8, r2
    2a7a:	e68c      	b.n	2796 <__aeabi_dmul+0x132>
    2a7c:	1c20      	adds	r0, r4, #0
    2a7e:	f000 f8c1 	bl	2c04 <__clzsi2>
    2a82:	3020      	adds	r0, #32
    2a84:	e676      	b.n	2774 <__aeabi_dmul+0x110>
    2a86:	4658      	mov	r0, fp
    2a88:	4220      	tst	r0, r4
    2a8a:	d107      	bne.n	2a9c <__aeabi_dmul+0x438>
    2a8c:	4304      	orrs	r4, r0
    2a8e:	9903      	ldr	r1, [sp, #12]
    2a90:	0324      	lsls	r4, r4, #12
    2a92:	0b24      	lsrs	r4, r4, #12
    2a94:	4689      	mov	r9, r1
    2a96:	4690      	mov	r8, r2
    2a98:	4b36      	ldr	r3, [pc, #216]	; (2b74 <__aeabi_dmul+0x510>)
    2a9a:	e648      	b.n	272e <__aeabi_dmul+0xca>
    2a9c:	433c      	orrs	r4, r7
    2a9e:	0324      	lsls	r4, r4, #12
    2aa0:	0b24      	lsrs	r4, r4, #12
    2aa2:	4b34      	ldr	r3, [pc, #208]	; (2b74 <__aeabi_dmul+0x510>)
    2aa4:	e643      	b.n	272e <__aeabi_dmul+0xca>
    2aa6:	4b34      	ldr	r3, [pc, #208]	; (2b78 <__aeabi_dmul+0x514>)
    2aa8:	9e04      	ldr	r6, [sp, #16]
    2aaa:	1b9b      	subs	r3, r3, r6
    2aac:	2b38      	cmp	r3, #56	; 0x38
    2aae:	dd06      	ble.n	2abe <__aeabi_dmul+0x45a>
    2ab0:	2301      	movs	r3, #1
    2ab2:	400b      	ands	r3, r1
    2ab4:	2400      	movs	r4, #0
    2ab6:	4699      	mov	r9, r3
    2ab8:	46a0      	mov	r8, r4
    2aba:	2300      	movs	r3, #0
    2abc:	e637      	b.n	272e <__aeabi_dmul+0xca>
    2abe:	2b1f      	cmp	r3, #31
    2ac0:	dc25      	bgt.n	2b0e <__aeabi_dmul+0x4aa>
    2ac2:	9c04      	ldr	r4, [sp, #16]
    2ac4:	4d2d      	ldr	r5, [pc, #180]	; (2b7c <__aeabi_dmul+0x518>)
    2ac6:	4646      	mov	r6, r8
    2ac8:	1960      	adds	r0, r4, r5
    2aca:	4652      	mov	r2, sl
    2acc:	4644      	mov	r4, r8
    2ace:	4086      	lsls	r6, r0
    2ad0:	40dc      	lsrs	r4, r3
    2ad2:	4082      	lsls	r2, r0
    2ad4:	4657      	mov	r7, sl
    2ad6:	1c30      	adds	r0, r6, #0
    2ad8:	4322      	orrs	r2, r4
    2ada:	40df      	lsrs	r7, r3
    2adc:	1e44      	subs	r4, r0, #1
    2ade:	41a0      	sbcs	r0, r4
    2ae0:	4302      	orrs	r2, r0
    2ae2:	1c3b      	adds	r3, r7, #0
    2ae4:	0754      	lsls	r4, r2, #29
    2ae6:	d009      	beq.n	2afc <__aeabi_dmul+0x498>
    2ae8:	200f      	movs	r0, #15
    2aea:	4010      	ands	r0, r2
    2aec:	2804      	cmp	r0, #4
    2aee:	d005      	beq.n	2afc <__aeabi_dmul+0x498>
    2af0:	1d10      	adds	r0, r2, #4
    2af2:	4290      	cmp	r0, r2
    2af4:	4192      	sbcs	r2, r2
    2af6:	4252      	negs	r2, r2
    2af8:	189b      	adds	r3, r3, r2
    2afa:	1c02      	adds	r2, r0, #0
    2afc:	021d      	lsls	r5, r3, #8
    2afe:	d51a      	bpl.n	2b36 <__aeabi_dmul+0x4d2>
    2b00:	2301      	movs	r3, #1
    2b02:	400b      	ands	r3, r1
    2b04:	2400      	movs	r4, #0
    2b06:	4699      	mov	r9, r3
    2b08:	46a0      	mov	r8, r4
    2b0a:	2301      	movs	r3, #1
    2b0c:	e60f      	b.n	272e <__aeabi_dmul+0xca>
    2b0e:	481c      	ldr	r0, [pc, #112]	; (2b80 <__aeabi_dmul+0x51c>)
    2b10:	9c04      	ldr	r4, [sp, #16]
    2b12:	4655      	mov	r5, sl
    2b14:	1b00      	subs	r0, r0, r4
    2b16:	40c5      	lsrs	r5, r0
    2b18:	1c28      	adds	r0, r5, #0
    2b1a:	2b20      	cmp	r3, #32
    2b1c:	d016      	beq.n	2b4c <__aeabi_dmul+0x4e8>
    2b1e:	4e19      	ldr	r6, [pc, #100]	; (2b84 <__aeabi_dmul+0x520>)
    2b20:	4657      	mov	r7, sl
    2b22:	19a2      	adds	r2, r4, r6
    2b24:	4097      	lsls	r7, r2
    2b26:	1c3a      	adds	r2, r7, #0
    2b28:	4643      	mov	r3, r8
    2b2a:	431a      	orrs	r2, r3
    2b2c:	1e53      	subs	r3, r2, #1
    2b2e:	419a      	sbcs	r2, r3
    2b30:	4302      	orrs	r2, r0
    2b32:	2300      	movs	r3, #0
    2b34:	e7d6      	b.n	2ae4 <__aeabi_dmul+0x480>
    2b36:	0758      	lsls	r0, r3, #29
    2b38:	025b      	lsls	r3, r3, #9
    2b3a:	08d2      	lsrs	r2, r2, #3
    2b3c:	0b1c      	lsrs	r4, r3, #12
    2b3e:	2301      	movs	r3, #1
    2b40:	400b      	ands	r3, r1
    2b42:	4310      	orrs	r0, r2
    2b44:	4699      	mov	r9, r3
    2b46:	4680      	mov	r8, r0
    2b48:	2300      	movs	r3, #0
    2b4a:	e5f0      	b.n	272e <__aeabi_dmul+0xca>
    2b4c:	2200      	movs	r2, #0
    2b4e:	e7eb      	b.n	2b28 <__aeabi_dmul+0x4c4>
    2b50:	2480      	movs	r4, #128	; 0x80
    2b52:	0324      	lsls	r4, r4, #12
    2b54:	4650      	mov	r0, sl
    2b56:	2301      	movs	r3, #1
    2b58:	4304      	orrs	r4, r0
    2b5a:	4019      	ands	r1, r3
    2b5c:	0324      	lsls	r4, r4, #12
    2b5e:	0b24      	lsrs	r4, r4, #12
    2b60:	4689      	mov	r9, r1
    2b62:	4b04      	ldr	r3, [pc, #16]	; (2b74 <__aeabi_dmul+0x510>)
    2b64:	e5e3      	b.n	272e <__aeabi_dmul+0xca>
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	000003ff 	.word	0x000003ff
    2b6c:	feffffff 	.word	0xfeffffff
    2b70:	000007fe 	.word	0x000007fe
    2b74:	000007ff 	.word	0x000007ff
    2b78:	fffffc02 	.word	0xfffffc02
    2b7c:	0000041e 	.word	0x0000041e
    2b80:	fffffbe2 	.word	0xfffffbe2
    2b84:	0000043e 	.word	0x0000043e

00002b88 <__aeabi_i2d>:
    2b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b8a:	1e04      	subs	r4, r0, #0
    2b8c:	d031      	beq.n	2bf2 <__aeabi_i2d+0x6a>
    2b8e:	0fc7      	lsrs	r7, r0, #31
    2b90:	d000      	beq.n	2b94 <__aeabi_i2d+0xc>
    2b92:	4244      	negs	r4, r0
    2b94:	1c20      	adds	r0, r4, #0
    2b96:	f000 f835 	bl	2c04 <__clzsi2>
    2b9a:	4d18      	ldr	r5, [pc, #96]	; (2bfc <__aeabi_i2d+0x74>)
    2b9c:	1a2d      	subs	r5, r5, r0
    2b9e:	280a      	cmp	r0, #10
    2ba0:	dd19      	ble.n	2bd6 <__aeabi_i2d+0x4e>
    2ba2:	380b      	subs	r0, #11
    2ba4:	4084      	lsls	r4, r0
    2ba6:	0324      	lsls	r4, r4, #12
    2ba8:	056d      	lsls	r5, r5, #21
    2baa:	0b24      	lsrs	r4, r4, #12
    2bac:	0d6d      	lsrs	r5, r5, #21
    2bae:	1c3a      	adds	r2, r7, #0
    2bb0:	2600      	movs	r6, #0
    2bb2:	2000      	movs	r0, #0
    2bb4:	2100      	movs	r1, #0
    2bb6:	0d0b      	lsrs	r3, r1, #20
    2bb8:	0324      	lsls	r4, r4, #12
    2bba:	0b24      	lsrs	r4, r4, #12
    2bbc:	051b      	lsls	r3, r3, #20
    2bbe:	4323      	orrs	r3, r4
    2bc0:	4c0f      	ldr	r4, [pc, #60]	; (2c00 <__aeabi_i2d+0x78>)
    2bc2:	052d      	lsls	r5, r5, #20
    2bc4:	401c      	ands	r4, r3
    2bc6:	432c      	orrs	r4, r5
    2bc8:	0064      	lsls	r4, r4, #1
    2bca:	0864      	lsrs	r4, r4, #1
    2bcc:	07d3      	lsls	r3, r2, #31
    2bce:	1c21      	adds	r1, r4, #0
    2bd0:	1c30      	adds	r0, r6, #0
    2bd2:	4319      	orrs	r1, r3
    2bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2bd6:	1c06      	adds	r6, r0, #0
    2bd8:	3615      	adds	r6, #21
    2bda:	1c23      	adds	r3, r4, #0
    2bdc:	40b3      	lsls	r3, r6
    2bde:	1c1e      	adds	r6, r3, #0
    2be0:	230b      	movs	r3, #11
    2be2:	1a18      	subs	r0, r3, r0
    2be4:	40c4      	lsrs	r4, r0
    2be6:	0324      	lsls	r4, r4, #12
    2be8:	056d      	lsls	r5, r5, #21
    2bea:	0b24      	lsrs	r4, r4, #12
    2bec:	0d6d      	lsrs	r5, r5, #21
    2bee:	1c3a      	adds	r2, r7, #0
    2bf0:	e7df      	b.n	2bb2 <__aeabi_i2d+0x2a>
    2bf2:	2200      	movs	r2, #0
    2bf4:	2500      	movs	r5, #0
    2bf6:	2400      	movs	r4, #0
    2bf8:	2600      	movs	r6, #0
    2bfa:	e7da      	b.n	2bb2 <__aeabi_i2d+0x2a>
    2bfc:	0000041e 	.word	0x0000041e
    2c00:	800fffff 	.word	0x800fffff

00002c04 <__clzsi2>:
    2c04:	211c      	movs	r1, #28
    2c06:	2301      	movs	r3, #1
    2c08:	041b      	lsls	r3, r3, #16
    2c0a:	4298      	cmp	r0, r3
    2c0c:	d301      	bcc.n	2c12 <__clzsi2+0xe>
    2c0e:	0c00      	lsrs	r0, r0, #16
    2c10:	3910      	subs	r1, #16
    2c12:	0a1b      	lsrs	r3, r3, #8
    2c14:	4298      	cmp	r0, r3
    2c16:	d301      	bcc.n	2c1c <__clzsi2+0x18>
    2c18:	0a00      	lsrs	r0, r0, #8
    2c1a:	3908      	subs	r1, #8
    2c1c:	091b      	lsrs	r3, r3, #4
    2c1e:	4298      	cmp	r0, r3
    2c20:	d301      	bcc.n	2c26 <__clzsi2+0x22>
    2c22:	0900      	lsrs	r0, r0, #4
    2c24:	3904      	subs	r1, #4
    2c26:	a202      	add	r2, pc, #8	; (adr r2, 2c30 <__clzsi2+0x2c>)
    2c28:	5c10      	ldrb	r0, [r2, r0]
    2c2a:	1840      	adds	r0, r0, r1
    2c2c:	4770      	bx	lr
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	02020304 	.word	0x02020304
    2c34:	01010101 	.word	0x01010101
	...

00002c40 <__divdi3>:
    2c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c42:	4644      	mov	r4, r8
    2c44:	465f      	mov	r7, fp
    2c46:	4656      	mov	r6, sl
    2c48:	464d      	mov	r5, r9
    2c4a:	b4f0      	push	{r4, r5, r6, r7}
    2c4c:	1c1c      	adds	r4, r3, #0
    2c4e:	b085      	sub	sp, #20
    2c50:	2900      	cmp	r1, #0
    2c52:	da00      	bge.n	2c56 <__divdi3+0x16>
    2c54:	e0d9      	b.n	2e0a <__divdi3+0x1ca>
    2c56:	1c0f      	adds	r7, r1, #0
    2c58:	2100      	movs	r1, #0
    2c5a:	1c06      	adds	r6, r0, #0
    2c5c:	468a      	mov	sl, r1
    2c5e:	1c10      	adds	r0, r2, #0
    2c60:	1c19      	adds	r1, r3, #0
    2c62:	2c00      	cmp	r4, #0
    2c64:	da00      	bge.n	2c68 <__divdi3+0x28>
    2c66:	e0c7      	b.n	2df8 <__divdi3+0x1b8>
    2c68:	9601      	str	r6, [sp, #4]
    2c6a:	9000      	str	r0, [sp, #0]
    2c6c:	4689      	mov	r9, r1
    2c6e:	4680      	mov	r8, r0
    2c70:	2900      	cmp	r1, #0
    2c72:	d150      	bne.n	2d16 <__divdi3+0xd6>
    2c74:	42b8      	cmp	r0, r7
    2c76:	d962      	bls.n	2d3e <__divdi3+0xfe>
    2c78:	f7ff ffc4 	bl	2c04 <__clzsi2>
    2c7c:	2800      	cmp	r0, #0
    2c7e:	d009      	beq.n	2c94 <__divdi3+0x54>
    2c80:	2320      	movs	r3, #32
    2c82:	4645      	mov	r5, r8
    2c84:	1c31      	adds	r1, r6, #0
    2c86:	1a1b      	subs	r3, r3, r0
    2c88:	4085      	lsls	r5, r0
    2c8a:	4087      	lsls	r7, r0
    2c8c:	40d9      	lsrs	r1, r3
    2c8e:	46a8      	mov	r8, r5
    2c90:	430f      	orrs	r7, r1
    2c92:	4086      	lsls	r6, r0
    2c94:	4642      	mov	r2, r8
    2c96:	0c14      	lsrs	r4, r2, #16
    2c98:	0413      	lsls	r3, r2, #16
    2c9a:	0c1b      	lsrs	r3, r3, #16
    2c9c:	1c21      	adds	r1, r4, #0
    2c9e:	1c38      	adds	r0, r7, #0
    2ca0:	469b      	mov	fp, r3
    2ca2:	f7fe ff6d 	bl	1b80 <__aeabi_uidiv>
    2ca6:	465b      	mov	r3, fp
    2ca8:	4343      	muls	r3, r0
    2caa:	1c05      	adds	r5, r0, #0
    2cac:	1c21      	adds	r1, r4, #0
    2cae:	1c38      	adds	r0, r7, #0
    2cb0:	4699      	mov	r9, r3
    2cb2:	f7fe ffa9 	bl	1c08 <__aeabi_uidivmod>
    2cb6:	0c33      	lsrs	r3, r6, #16
    2cb8:	0408      	lsls	r0, r1, #16
    2cba:	4318      	orrs	r0, r3
    2cbc:	4581      	cmp	r9, r0
    2cbe:	d909      	bls.n	2cd4 <__divdi3+0x94>
    2cc0:	4440      	add	r0, r8
    2cc2:	1e6b      	subs	r3, r5, #1
    2cc4:	4580      	cmp	r8, r0
    2cc6:	d900      	bls.n	2cca <__divdi3+0x8a>
    2cc8:	e177      	b.n	2fba <__divdi3+0x37a>
    2cca:	4581      	cmp	r9, r0
    2ccc:	d800      	bhi.n	2cd0 <__divdi3+0x90>
    2cce:	e174      	b.n	2fba <__divdi3+0x37a>
    2cd0:	3d02      	subs	r5, #2
    2cd2:	4440      	add	r0, r8
    2cd4:	4649      	mov	r1, r9
    2cd6:	1a41      	subs	r1, r0, r1
    2cd8:	4689      	mov	r9, r1
    2cda:	1c08      	adds	r0, r1, #0
    2cdc:	1c21      	adds	r1, r4, #0
    2cde:	f7fe ff4f 	bl	1b80 <__aeabi_uidiv>
    2ce2:	465a      	mov	r2, fp
    2ce4:	4342      	muls	r2, r0
    2ce6:	1c07      	adds	r7, r0, #0
    2ce8:	1c21      	adds	r1, r4, #0
    2cea:	4648      	mov	r0, r9
    2cec:	4693      	mov	fp, r2
    2cee:	f7fe ff8b 	bl	1c08 <__aeabi_uidivmod>
    2cf2:	0436      	lsls	r6, r6, #16
    2cf4:	0409      	lsls	r1, r1, #16
    2cf6:	0c36      	lsrs	r6, r6, #16
    2cf8:	430e      	orrs	r6, r1
    2cfa:	45b3      	cmp	fp, r6
    2cfc:	d907      	bls.n	2d0e <__divdi3+0xce>
    2cfe:	4446      	add	r6, r8
    2d00:	1e7b      	subs	r3, r7, #1
    2d02:	45b0      	cmp	r8, r6
    2d04:	d802      	bhi.n	2d0c <__divdi3+0xcc>
    2d06:	3f02      	subs	r7, #2
    2d08:	45b3      	cmp	fp, r6
    2d0a:	d800      	bhi.n	2d0e <__divdi3+0xce>
    2d0c:	1c1f      	adds	r7, r3, #0
    2d0e:	042d      	lsls	r5, r5, #16
    2d10:	432f      	orrs	r7, r5
    2d12:	2400      	movs	r4, #0
    2d14:	e003      	b.n	2d1e <__divdi3+0xde>
    2d16:	42b9      	cmp	r1, r7
    2d18:	d960      	bls.n	2ddc <__divdi3+0x19c>
    2d1a:	2400      	movs	r4, #0
    2d1c:	2700      	movs	r7, #0
    2d1e:	4652      	mov	r2, sl
    2d20:	1c38      	adds	r0, r7, #0
    2d22:	1c21      	adds	r1, r4, #0
    2d24:	2a00      	cmp	r2, #0
    2d26:	d003      	beq.n	2d30 <__divdi3+0xf0>
    2d28:	1c3b      	adds	r3, r7, #0
    2d2a:	2100      	movs	r1, #0
    2d2c:	4258      	negs	r0, r3
    2d2e:	41a1      	sbcs	r1, r4
    2d30:	b005      	add	sp, #20
    2d32:	bc3c      	pop	{r2, r3, r4, r5}
    2d34:	4690      	mov	r8, r2
    2d36:	4699      	mov	r9, r3
    2d38:	46a2      	mov	sl, r4
    2d3a:	46ab      	mov	fp, r5
    2d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d3e:	2800      	cmp	r0, #0
    2d40:	d104      	bne.n	2d4c <__divdi3+0x10c>
    2d42:	2001      	movs	r0, #1
    2d44:	2100      	movs	r1, #0
    2d46:	f7fe ff1b 	bl	1b80 <__aeabi_uidiv>
    2d4a:	4680      	mov	r8, r0
    2d4c:	4640      	mov	r0, r8
    2d4e:	f7ff ff59 	bl	2c04 <__clzsi2>
    2d52:	2800      	cmp	r0, #0
    2d54:	d160      	bne.n	2e18 <__divdi3+0x1d8>
    2d56:	4641      	mov	r1, r8
    2d58:	4644      	mov	r4, r8
    2d5a:	040b      	lsls	r3, r1, #16
    2d5c:	1b3c      	subs	r4, r7, r4
    2d5e:	0c1b      	lsrs	r3, r3, #16
    2d60:	46a3      	mov	fp, r4
    2d62:	0c0d      	lsrs	r5, r1, #16
    2d64:	9300      	str	r3, [sp, #0]
    2d66:	2401      	movs	r4, #1
    2d68:	1c29      	adds	r1, r5, #0
    2d6a:	4658      	mov	r0, fp
    2d6c:	f7fe ff08 	bl	1b80 <__aeabi_uidiv>
    2d70:	9f00      	ldr	r7, [sp, #0]
    2d72:	4681      	mov	r9, r0
    2d74:	4347      	muls	r7, r0
    2d76:	1c29      	adds	r1, r5, #0
    2d78:	4658      	mov	r0, fp
    2d7a:	f7fe ff45 	bl	1c08 <__aeabi_uidivmod>
    2d7e:	0c33      	lsrs	r3, r6, #16
    2d80:	0409      	lsls	r1, r1, #16
    2d82:	4319      	orrs	r1, r3
    2d84:	428f      	cmp	r7, r1
    2d86:	d908      	bls.n	2d9a <__divdi3+0x15a>
    2d88:	464b      	mov	r3, r9
    2d8a:	4441      	add	r1, r8
    2d8c:	3b01      	subs	r3, #1
    2d8e:	4588      	cmp	r8, r1
    2d90:	d802      	bhi.n	2d98 <__divdi3+0x158>
    2d92:	428f      	cmp	r7, r1
    2d94:	d900      	bls.n	2d98 <__divdi3+0x158>
    2d96:	e125      	b.n	2fe4 <__divdi3+0x3a4>
    2d98:	4699      	mov	r9, r3
    2d9a:	1bc9      	subs	r1, r1, r7
    2d9c:	468b      	mov	fp, r1
    2d9e:	1c08      	adds	r0, r1, #0
    2da0:	1c29      	adds	r1, r5, #0
    2da2:	f7fe feed 	bl	1b80 <__aeabi_uidiv>
    2da6:	9b00      	ldr	r3, [sp, #0]
    2da8:	1c29      	adds	r1, r5, #0
    2daa:	4343      	muls	r3, r0
    2dac:	1c07      	adds	r7, r0, #0
    2dae:	4658      	mov	r0, fp
    2db0:	9300      	str	r3, [sp, #0]
    2db2:	f7fe ff29 	bl	1c08 <__aeabi_uidivmod>
    2db6:	0436      	lsls	r6, r6, #16
    2db8:	9d00      	ldr	r5, [sp, #0]
    2dba:	0409      	lsls	r1, r1, #16
    2dbc:	0c36      	lsrs	r6, r6, #16
    2dbe:	430e      	orrs	r6, r1
    2dc0:	42b5      	cmp	r5, r6
    2dc2:	d907      	bls.n	2dd4 <__divdi3+0x194>
    2dc4:	4446      	add	r6, r8
    2dc6:	1e7b      	subs	r3, r7, #1
    2dc8:	45b0      	cmp	r8, r6
    2dca:	d802      	bhi.n	2dd2 <__divdi3+0x192>
    2dcc:	3f02      	subs	r7, #2
    2dce:	42b5      	cmp	r5, r6
    2dd0:	d800      	bhi.n	2dd4 <__divdi3+0x194>
    2dd2:	1c1f      	adds	r7, r3, #0
    2dd4:	4649      	mov	r1, r9
    2dd6:	040b      	lsls	r3, r1, #16
    2dd8:	431f      	orrs	r7, r3
    2dda:	e7a0      	b.n	2d1e <__divdi3+0xde>
    2ddc:	1c08      	adds	r0, r1, #0
    2dde:	f7ff ff11 	bl	2c04 <__clzsi2>
    2de2:	1e04      	subs	r4, r0, #0
    2de4:	d170      	bne.n	2ec8 <__divdi3+0x288>
    2de6:	45b9      	cmp	r9, r7
    2de8:	d303      	bcc.n	2df2 <__divdi3+0x1b2>
    2dea:	9c00      	ldr	r4, [sp, #0]
    2dec:	9d01      	ldr	r5, [sp, #4]
    2dee:	42ac      	cmp	r4, r5
    2df0:	d893      	bhi.n	2d1a <__divdi3+0xda>
    2df2:	2400      	movs	r4, #0
    2df4:	2701      	movs	r7, #1
    2df6:	e792      	b.n	2d1e <__divdi3+0xde>
    2df8:	4652      	mov	r2, sl
    2dfa:	43d2      	mvns	r2, r2
    2dfc:	1c03      	adds	r3, r0, #0
    2dfe:	1c0c      	adds	r4, r1, #0
    2e00:	4692      	mov	sl, r2
    2e02:	2100      	movs	r1, #0
    2e04:	4258      	negs	r0, r3
    2e06:	41a1      	sbcs	r1, r4
    2e08:	e72e      	b.n	2c68 <__divdi3+0x28>
    2e0a:	2700      	movs	r7, #0
    2e0c:	4246      	negs	r6, r0
    2e0e:	418f      	sbcs	r7, r1
    2e10:	2101      	movs	r1, #1
    2e12:	4249      	negs	r1, r1
    2e14:	468a      	mov	sl, r1
    2e16:	e722      	b.n	2c5e <__divdi3+0x1e>
    2e18:	2320      	movs	r3, #32
    2e1a:	1a1b      	subs	r3, r3, r0
    2e1c:	4642      	mov	r2, r8
    2e1e:	1c35      	adds	r5, r6, #0
    2e20:	4082      	lsls	r2, r0
    2e22:	1c3c      	adds	r4, r7, #0
    2e24:	40dd      	lsrs	r5, r3
    2e26:	40dc      	lsrs	r4, r3
    2e28:	4087      	lsls	r7, r0
    2e2a:	1c2b      	adds	r3, r5, #0
    2e2c:	0c15      	lsrs	r5, r2, #16
    2e2e:	433b      	orrs	r3, r7
    2e30:	1c29      	adds	r1, r5, #0
    2e32:	4086      	lsls	r6, r0
    2e34:	1c20      	adds	r0, r4, #0
    2e36:	9300      	str	r3, [sp, #0]
    2e38:	0417      	lsls	r7, r2, #16
    2e3a:	4690      	mov	r8, r2
    2e3c:	f7fe fea0 	bl	1b80 <__aeabi_uidiv>
    2e40:	0c3f      	lsrs	r7, r7, #16
    2e42:	1c01      	adds	r1, r0, #0
    2e44:	4379      	muls	r1, r7
    2e46:	4681      	mov	r9, r0
    2e48:	468b      	mov	fp, r1
    2e4a:	1c20      	adds	r0, r4, #0
    2e4c:	1c29      	adds	r1, r5, #0
    2e4e:	f7fe fedb 	bl	1c08 <__aeabi_uidivmod>
    2e52:	9c00      	ldr	r4, [sp, #0]
    2e54:	0409      	lsls	r1, r1, #16
    2e56:	0c23      	lsrs	r3, r4, #16
    2e58:	4319      	orrs	r1, r3
    2e5a:	458b      	cmp	fp, r1
    2e5c:	d90c      	bls.n	2e78 <__divdi3+0x238>
    2e5e:	464b      	mov	r3, r9
    2e60:	4441      	add	r1, r8
    2e62:	3b01      	subs	r3, #1
    2e64:	4588      	cmp	r8, r1
    2e66:	d900      	bls.n	2e6a <__divdi3+0x22a>
    2e68:	e0ba      	b.n	2fe0 <__divdi3+0x3a0>
    2e6a:	458b      	cmp	fp, r1
    2e6c:	d800      	bhi.n	2e70 <__divdi3+0x230>
    2e6e:	e0b7      	b.n	2fe0 <__divdi3+0x3a0>
    2e70:	2202      	movs	r2, #2
    2e72:	4252      	negs	r2, r2
    2e74:	4491      	add	r9, r2
    2e76:	4441      	add	r1, r8
    2e78:	465c      	mov	r4, fp
    2e7a:	1b0c      	subs	r4, r1, r4
    2e7c:	1c20      	adds	r0, r4, #0
    2e7e:	1c29      	adds	r1, r5, #0
    2e80:	9401      	str	r4, [sp, #4]
    2e82:	f7fe fe7d 	bl	1b80 <__aeabi_uidiv>
    2e86:	1c39      	adds	r1, r7, #0
    2e88:	4341      	muls	r1, r0
    2e8a:	1c04      	adds	r4, r0, #0
    2e8c:	468b      	mov	fp, r1
    2e8e:	9801      	ldr	r0, [sp, #4]
    2e90:	1c29      	adds	r1, r5, #0
    2e92:	f7fe feb9 	bl	1c08 <__aeabi_uidivmod>
    2e96:	9a00      	ldr	r2, [sp, #0]
    2e98:	0409      	lsls	r1, r1, #16
    2e9a:	0413      	lsls	r3, r2, #16
    2e9c:	0c1b      	lsrs	r3, r3, #16
    2e9e:	4319      	orrs	r1, r3
    2ea0:	458b      	cmp	fp, r1
    2ea2:	d909      	bls.n	2eb8 <__divdi3+0x278>
    2ea4:	4441      	add	r1, r8
    2ea6:	1e63      	subs	r3, r4, #1
    2ea8:	4588      	cmp	r8, r1
    2eaa:	d900      	bls.n	2eae <__divdi3+0x26e>
    2eac:	e094      	b.n	2fd8 <__divdi3+0x398>
    2eae:	458b      	cmp	fp, r1
    2eb0:	d800      	bhi.n	2eb4 <__divdi3+0x274>
    2eb2:	e091      	b.n	2fd8 <__divdi3+0x398>
    2eb4:	3c02      	subs	r4, #2
    2eb6:	4441      	add	r1, r8
    2eb8:	465b      	mov	r3, fp
    2eba:	1acb      	subs	r3, r1, r3
    2ebc:	4649      	mov	r1, r9
    2ebe:	469b      	mov	fp, r3
    2ec0:	040b      	lsls	r3, r1, #16
    2ec2:	431c      	orrs	r4, r3
    2ec4:	9700      	str	r7, [sp, #0]
    2ec6:	e74f      	b.n	2d68 <__divdi3+0x128>
    2ec8:	9d00      	ldr	r5, [sp, #0]
    2eca:	2320      	movs	r3, #32
    2ecc:	1a1b      	subs	r3, r3, r0
    2ece:	464a      	mov	r2, r9
    2ed0:	9900      	ldr	r1, [sp, #0]
    2ed2:	4082      	lsls	r2, r0
    2ed4:	40dd      	lsrs	r5, r3
    2ed6:	4315      	orrs	r5, r2
    2ed8:	4081      	lsls	r1, r0
    2eda:	1c3a      	adds	r2, r7, #0
    2edc:	40da      	lsrs	r2, r3
    2ede:	9100      	str	r1, [sp, #0]
    2ee0:	1c31      	adds	r1, r6, #0
    2ee2:	4690      	mov	r8, r2
    2ee4:	40d9      	lsrs	r1, r3
    2ee6:	1c3a      	adds	r2, r7, #0
    2ee8:	4082      	lsls	r2, r0
    2eea:	1c0b      	adds	r3, r1, #0
    2eec:	4313      	orrs	r3, r2
    2eee:	9301      	str	r3, [sp, #4]
    2ef0:	0c2f      	lsrs	r7, r5, #16
    2ef2:	042b      	lsls	r3, r5, #16
    2ef4:	0c1b      	lsrs	r3, r3, #16
    2ef6:	1c39      	adds	r1, r7, #0
    2ef8:	4640      	mov	r0, r8
    2efa:	9302      	str	r3, [sp, #8]
    2efc:	f7fe fe40 	bl	1b80 <__aeabi_uidiv>
    2f00:	9a02      	ldr	r2, [sp, #8]
    2f02:	4681      	mov	r9, r0
    2f04:	4342      	muls	r2, r0
    2f06:	1c39      	adds	r1, r7, #0
    2f08:	4640      	mov	r0, r8
    2f0a:	4693      	mov	fp, r2
    2f0c:	f7fe fe7c 	bl	1c08 <__aeabi_uidivmod>
    2f10:	9a01      	ldr	r2, [sp, #4]
    2f12:	0409      	lsls	r1, r1, #16
    2f14:	0c13      	lsrs	r3, r2, #16
    2f16:	4319      	orrs	r1, r3
    2f18:	458b      	cmp	fp, r1
    2f1a:	d90a      	bls.n	2f32 <__divdi3+0x2f2>
    2f1c:	464b      	mov	r3, r9
    2f1e:	1949      	adds	r1, r1, r5
    2f20:	3b01      	subs	r3, #1
    2f22:	428d      	cmp	r5, r1
    2f24:	d85a      	bhi.n	2fdc <__divdi3+0x39c>
    2f26:	458b      	cmp	fp, r1
    2f28:	d958      	bls.n	2fdc <__divdi3+0x39c>
    2f2a:	2302      	movs	r3, #2
    2f2c:	425b      	negs	r3, r3
    2f2e:	4499      	add	r9, r3
    2f30:	1949      	adds	r1, r1, r5
    2f32:	465a      	mov	r2, fp
    2f34:	1a8a      	subs	r2, r1, r2
    2f36:	1c10      	adds	r0, r2, #0
    2f38:	1c39      	adds	r1, r7, #0
    2f3a:	9203      	str	r2, [sp, #12]
    2f3c:	f7fe fe20 	bl	1b80 <__aeabi_uidiv>
    2f40:	9b02      	ldr	r3, [sp, #8]
    2f42:	4680      	mov	r8, r0
    2f44:	4343      	muls	r3, r0
    2f46:	1c39      	adds	r1, r7, #0
    2f48:	9803      	ldr	r0, [sp, #12]
    2f4a:	469b      	mov	fp, r3
    2f4c:	f7fe fe5c 	bl	1c08 <__aeabi_uidivmod>
    2f50:	9a01      	ldr	r2, [sp, #4]
    2f52:	0409      	lsls	r1, r1, #16
    2f54:	0413      	lsls	r3, r2, #16
    2f56:	0c1b      	lsrs	r3, r3, #16
    2f58:	4319      	orrs	r1, r3
    2f5a:	458b      	cmp	fp, r1
    2f5c:	d90a      	bls.n	2f74 <__divdi3+0x334>
    2f5e:	4643      	mov	r3, r8
    2f60:	1949      	adds	r1, r1, r5
    2f62:	3b01      	subs	r3, #1
    2f64:	428d      	cmp	r5, r1
    2f66:	d835      	bhi.n	2fd4 <__divdi3+0x394>
    2f68:	458b      	cmp	fp, r1
    2f6a:	d933      	bls.n	2fd4 <__divdi3+0x394>
    2f6c:	2302      	movs	r3, #2
    2f6e:	425b      	negs	r3, r3
    2f70:	4498      	add	r8, r3
    2f72:	1949      	adds	r1, r1, r5
    2f74:	465d      	mov	r5, fp
    2f76:	1b4d      	subs	r5, r1, r5
    2f78:	46ab      	mov	fp, r5
    2f7a:	4649      	mov	r1, r9
    2f7c:	9d00      	ldr	r5, [sp, #0]
    2f7e:	040f      	lsls	r7, r1, #16
    2f80:	4642      	mov	r2, r8
    2f82:	4317      	orrs	r7, r2
    2f84:	042a      	lsls	r2, r5, #16
    2f86:	0c12      	lsrs	r2, r2, #16
    2f88:	043b      	lsls	r3, r7, #16
    2f8a:	0c2d      	lsrs	r5, r5, #16
    2f8c:	0c1b      	lsrs	r3, r3, #16
    2f8e:	0c38      	lsrs	r0, r7, #16
    2f90:	1c11      	adds	r1, r2, #0
    2f92:	4359      	muls	r1, r3
    2f94:	4342      	muls	r2, r0
    2f96:	436b      	muls	r3, r5
    2f98:	4368      	muls	r0, r5
    2f9a:	18d3      	adds	r3, r2, r3
    2f9c:	0c0d      	lsrs	r5, r1, #16
    2f9e:	195b      	adds	r3, r3, r5
    2fa0:	468c      	mov	ip, r1
    2fa2:	429a      	cmp	r2, r3
    2fa4:	d902      	bls.n	2fac <__divdi3+0x36c>
    2fa6:	2280      	movs	r2, #128	; 0x80
    2fa8:	0252      	lsls	r2, r2, #9
    2faa:	1880      	adds	r0, r0, r2
    2fac:	0c1d      	lsrs	r5, r3, #16
    2fae:	1940      	adds	r0, r0, r5
    2fb0:	4583      	cmp	fp, r0
    2fb2:	d30c      	bcc.n	2fce <__divdi3+0x38e>
    2fb4:	d003      	beq.n	2fbe <__divdi3+0x37e>
    2fb6:	2400      	movs	r4, #0
    2fb8:	e6b1      	b.n	2d1e <__divdi3+0xde>
    2fba:	1c1d      	adds	r5, r3, #0
    2fbc:	e68a      	b.n	2cd4 <__divdi3+0x94>
    2fbe:	4665      	mov	r5, ip
    2fc0:	042a      	lsls	r2, r5, #16
    2fc2:	041b      	lsls	r3, r3, #16
    2fc4:	0c12      	lsrs	r2, r2, #16
    2fc6:	189b      	adds	r3, r3, r2
    2fc8:	40a6      	lsls	r6, r4
    2fca:	429e      	cmp	r6, r3
    2fcc:	d2f3      	bcs.n	2fb6 <__divdi3+0x376>
    2fce:	3f01      	subs	r7, #1
    2fd0:	2400      	movs	r4, #0
    2fd2:	e6a4      	b.n	2d1e <__divdi3+0xde>
    2fd4:	4698      	mov	r8, r3
    2fd6:	e7cd      	b.n	2f74 <__divdi3+0x334>
    2fd8:	1c1c      	adds	r4, r3, #0
    2fda:	e76d      	b.n	2eb8 <__divdi3+0x278>
    2fdc:	4699      	mov	r9, r3
    2fde:	e7a8      	b.n	2f32 <__divdi3+0x2f2>
    2fe0:	4699      	mov	r9, r3
    2fe2:	e749      	b.n	2e78 <__divdi3+0x238>
    2fe4:	2202      	movs	r2, #2
    2fe6:	4252      	negs	r2, r2
    2fe8:	4491      	add	r9, r2
    2fea:	4441      	add	r1, r8
    2fec:	e6d5      	b.n	2d9a <__divdi3+0x15a>
    2fee:	46c0      	nop			; (mov r8, r8)

00002ff0 <__udivdi3>:
    2ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ff2:	465f      	mov	r7, fp
    2ff4:	4656      	mov	r6, sl
    2ff6:	464d      	mov	r5, r9
    2ff8:	4644      	mov	r4, r8
    2ffa:	b4f0      	push	{r4, r5, r6, r7}
    2ffc:	1c0d      	adds	r5, r1, #0
    2ffe:	b085      	sub	sp, #20
    3000:	1c06      	adds	r6, r0, #0
    3002:	4692      	mov	sl, r2
    3004:	4698      	mov	r8, r3
    3006:	9002      	str	r0, [sp, #8]
    3008:	9101      	str	r1, [sp, #4]
    300a:	9203      	str	r2, [sp, #12]
    300c:	1c1f      	adds	r7, r3, #0
    300e:	1c14      	adds	r4, r2, #0
    3010:	4683      	mov	fp, r0
    3012:	46a9      	mov	r9, r5
    3014:	2b00      	cmp	r3, #0
    3016:	d152      	bne.n	30be <__udivdi3+0xce>
    3018:	42aa      	cmp	r2, r5
    301a:	d96b      	bls.n	30f4 <__udivdi3+0x104>
    301c:	1c10      	adds	r0, r2, #0
    301e:	f7ff fdf1 	bl	2c04 <__clzsi2>
    3022:	2800      	cmp	r0, #0
    3024:	d00a      	beq.n	303c <__udivdi3+0x4c>
    3026:	2320      	movs	r3, #32
    3028:	1a1b      	subs	r3, r3, r0
    302a:	1c31      	adds	r1, r6, #0
    302c:	40d9      	lsrs	r1, r3
    302e:	4085      	lsls	r5, r0
    3030:	1c0b      	adds	r3, r1, #0
    3032:	432b      	orrs	r3, r5
    3034:	4086      	lsls	r6, r0
    3036:	4084      	lsls	r4, r0
    3038:	4699      	mov	r9, r3
    303a:	46b3      	mov	fp, r6
    303c:	0c25      	lsrs	r5, r4, #16
    303e:	0423      	lsls	r3, r4, #16
    3040:	0c1b      	lsrs	r3, r3, #16
    3042:	1c29      	adds	r1, r5, #0
    3044:	4648      	mov	r0, r9
    3046:	4698      	mov	r8, r3
    3048:	f7fe fd9a 	bl	1b80 <__aeabi_uidiv>
    304c:	4646      	mov	r6, r8
    304e:	1c07      	adds	r7, r0, #0
    3050:	4346      	muls	r6, r0
    3052:	1c29      	adds	r1, r5, #0
    3054:	4648      	mov	r0, r9
    3056:	f7fe fdd7 	bl	1c08 <__aeabi_uidivmod>
    305a:	465a      	mov	r2, fp
    305c:	0409      	lsls	r1, r1, #16
    305e:	0c13      	lsrs	r3, r2, #16
    3060:	4319      	orrs	r1, r3
    3062:	428e      	cmp	r6, r1
    3064:	d909      	bls.n	307a <__udivdi3+0x8a>
    3066:	1909      	adds	r1, r1, r4
    3068:	1e7b      	subs	r3, r7, #1
    306a:	428c      	cmp	r4, r1
    306c:	d900      	bls.n	3070 <__udivdi3+0x80>
    306e:	e159      	b.n	3324 <__udivdi3+0x334>
    3070:	428e      	cmp	r6, r1
    3072:	d800      	bhi.n	3076 <__udivdi3+0x86>
    3074:	e156      	b.n	3324 <__udivdi3+0x334>
    3076:	3f02      	subs	r7, #2
    3078:	1909      	adds	r1, r1, r4
    307a:	1b89      	subs	r1, r1, r6
    307c:	4689      	mov	r9, r1
    307e:	1c08      	adds	r0, r1, #0
    3080:	1c29      	adds	r1, r5, #0
    3082:	f7fe fd7d 	bl	1b80 <__aeabi_uidiv>
    3086:	4643      	mov	r3, r8
    3088:	4343      	muls	r3, r0
    308a:	1c06      	adds	r6, r0, #0
    308c:	1c29      	adds	r1, r5, #0
    308e:	4648      	mov	r0, r9
    3090:	4698      	mov	r8, r3
    3092:	f7fe fdb9 	bl	1c08 <__aeabi_uidivmod>
    3096:	465a      	mov	r2, fp
    3098:	0413      	lsls	r3, r2, #16
    309a:	0409      	lsls	r1, r1, #16
    309c:	0c1b      	lsrs	r3, r3, #16
    309e:	4319      	orrs	r1, r3
    30a0:	4588      	cmp	r8, r1
    30a2:	d908      	bls.n	30b6 <__udivdi3+0xc6>
    30a4:	1909      	adds	r1, r1, r4
    30a6:	1e73      	subs	r3, r6, #1
    30a8:	428c      	cmp	r4, r1
    30aa:	d900      	bls.n	30ae <__udivdi3+0xbe>
    30ac:	e138      	b.n	3320 <__udivdi3+0x330>
    30ae:	3e02      	subs	r6, #2
    30b0:	4588      	cmp	r8, r1
    30b2:	d800      	bhi.n	30b6 <__udivdi3+0xc6>
    30b4:	e134      	b.n	3320 <__udivdi3+0x330>
    30b6:	0438      	lsls	r0, r7, #16
    30b8:	4330      	orrs	r0, r6
    30ba:	2700      	movs	r7, #0
    30bc:	e012      	b.n	30e4 <__udivdi3+0xf4>
    30be:	9a01      	ldr	r2, [sp, #4]
    30c0:	4293      	cmp	r3, r2
    30c2:	d80d      	bhi.n	30e0 <__udivdi3+0xf0>
    30c4:	1c18      	adds	r0, r3, #0
    30c6:	f7ff fd9d 	bl	2c04 <__clzsi2>
    30ca:	1e04      	subs	r4, r0, #0
    30cc:	d166      	bne.n	319c <__udivdi3+0x1ac>
    30ce:	9b01      	ldr	r3, [sp, #4]
    30d0:	429f      	cmp	r7, r3
    30d2:	d200      	bcs.n	30d6 <__udivdi3+0xe6>
    30d4:	e121      	b.n	331a <__udivdi3+0x32a>
    30d6:	9f03      	ldr	r7, [sp, #12]
    30d8:	9902      	ldr	r1, [sp, #8]
    30da:	428f      	cmp	r7, r1
    30dc:	d800      	bhi.n	30e0 <__udivdi3+0xf0>
    30de:	e11c      	b.n	331a <__udivdi3+0x32a>
    30e0:	2700      	movs	r7, #0
    30e2:	2000      	movs	r0, #0
    30e4:	1c39      	adds	r1, r7, #0
    30e6:	b005      	add	sp, #20
    30e8:	bc3c      	pop	{r2, r3, r4, r5}
    30ea:	4690      	mov	r8, r2
    30ec:	4699      	mov	r9, r3
    30ee:	46a2      	mov	sl, r4
    30f0:	46ab      	mov	fp, r5
    30f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30f4:	2a00      	cmp	r2, #0
    30f6:	d104      	bne.n	3102 <__udivdi3+0x112>
    30f8:	2001      	movs	r0, #1
    30fa:	2100      	movs	r1, #0
    30fc:	f7fe fd40 	bl	1b80 <__aeabi_uidiv>
    3100:	1c04      	adds	r4, r0, #0
    3102:	1c20      	adds	r0, r4, #0
    3104:	f7ff fd7e 	bl	2c04 <__clzsi2>
    3108:	2800      	cmp	r0, #0
    310a:	d000      	beq.n	310e <__udivdi3+0x11e>
    310c:	e0b6      	b.n	327c <__udivdi3+0x28c>
    310e:	0423      	lsls	r3, r4, #16
    3110:	1b2d      	subs	r5, r5, r4
    3112:	0c1b      	lsrs	r3, r3, #16
    3114:	46a9      	mov	r9, r5
    3116:	0c26      	lsrs	r6, r4, #16
    3118:	4698      	mov	r8, r3
    311a:	2701      	movs	r7, #1
    311c:	1c31      	adds	r1, r6, #0
    311e:	4648      	mov	r0, r9
    3120:	f7fe fd2e 	bl	1b80 <__aeabi_uidiv>
    3124:	4641      	mov	r1, r8
    3126:	4341      	muls	r1, r0
    3128:	1c05      	adds	r5, r0, #0
    312a:	468a      	mov	sl, r1
    312c:	4648      	mov	r0, r9
    312e:	1c31      	adds	r1, r6, #0
    3130:	f7fe fd6a 	bl	1c08 <__aeabi_uidivmod>
    3134:	465a      	mov	r2, fp
    3136:	0408      	lsls	r0, r1, #16
    3138:	0c13      	lsrs	r3, r2, #16
    313a:	4318      	orrs	r0, r3
    313c:	4582      	cmp	sl, r0
    313e:	d907      	bls.n	3150 <__udivdi3+0x160>
    3140:	1900      	adds	r0, r0, r4
    3142:	1e6b      	subs	r3, r5, #1
    3144:	4284      	cmp	r4, r0
    3146:	d802      	bhi.n	314e <__udivdi3+0x15e>
    3148:	4582      	cmp	sl, r0
    314a:	d900      	bls.n	314e <__udivdi3+0x15e>
    314c:	e10d      	b.n	336a <__udivdi3+0x37a>
    314e:	1c1d      	adds	r5, r3, #0
    3150:	4653      	mov	r3, sl
    3152:	1ac3      	subs	r3, r0, r3
    3154:	1c18      	adds	r0, r3, #0
    3156:	1c31      	adds	r1, r6, #0
    3158:	469a      	mov	sl, r3
    315a:	f7fe fd11 	bl	1b80 <__aeabi_uidiv>
    315e:	4641      	mov	r1, r8
    3160:	4341      	muls	r1, r0
    3162:	4681      	mov	r9, r0
    3164:	4688      	mov	r8, r1
    3166:	4650      	mov	r0, sl
    3168:	1c31      	adds	r1, r6, #0
    316a:	f7fe fd4d 	bl	1c08 <__aeabi_uidivmod>
    316e:	465a      	mov	r2, fp
    3170:	0413      	lsls	r3, r2, #16
    3172:	0409      	lsls	r1, r1, #16
    3174:	0c1b      	lsrs	r3, r3, #16
    3176:	4319      	orrs	r1, r3
    3178:	4588      	cmp	r8, r1
    317a:	d90b      	bls.n	3194 <__udivdi3+0x1a4>
    317c:	464b      	mov	r3, r9
    317e:	1909      	adds	r1, r1, r4
    3180:	3b01      	subs	r3, #1
    3182:	428c      	cmp	r4, r1
    3184:	d900      	bls.n	3188 <__udivdi3+0x198>
    3186:	e0cf      	b.n	3328 <__udivdi3+0x338>
    3188:	4588      	cmp	r8, r1
    318a:	d800      	bhi.n	318e <__udivdi3+0x19e>
    318c:	e0cc      	b.n	3328 <__udivdi3+0x338>
    318e:	2302      	movs	r3, #2
    3190:	425b      	negs	r3, r3
    3192:	4499      	add	r9, r3
    3194:	0428      	lsls	r0, r5, #16
    3196:	4649      	mov	r1, r9
    3198:	4308      	orrs	r0, r1
    319a:	e7a3      	b.n	30e4 <__udivdi3+0xf4>
    319c:	2320      	movs	r3, #32
    319e:	1a1b      	subs	r3, r3, r0
    31a0:	4642      	mov	r2, r8
    31a2:	4657      	mov	r7, sl
    31a4:	4082      	lsls	r2, r0
    31a6:	40df      	lsrs	r7, r3
    31a8:	4317      	orrs	r7, r2
    31aa:	4652      	mov	r2, sl
    31ac:	4082      	lsls	r2, r0
    31ae:	9201      	str	r2, [sp, #4]
    31b0:	1c32      	adds	r2, r6, #0
    31b2:	40da      	lsrs	r2, r3
    31b4:	1c29      	adds	r1, r5, #0
    31b6:	40d9      	lsrs	r1, r3
    31b8:	4085      	lsls	r5, r0
    31ba:	1c13      	adds	r3, r2, #0
    31bc:	432b      	orrs	r3, r5
    31be:	9302      	str	r3, [sp, #8]
    31c0:	0c3d      	lsrs	r5, r7, #16
    31c2:	043b      	lsls	r3, r7, #16
    31c4:	0c1b      	lsrs	r3, r3, #16
    31c6:	4688      	mov	r8, r1
    31c8:	1c08      	adds	r0, r1, #0
    31ca:	1c29      	adds	r1, r5, #0
    31cc:	469a      	mov	sl, r3
    31ce:	f7fe fcd7 	bl	1b80 <__aeabi_uidiv>
    31d2:	4653      	mov	r3, sl
    31d4:	4343      	muls	r3, r0
    31d6:	4681      	mov	r9, r0
    31d8:	1c29      	adds	r1, r5, #0
    31da:	4640      	mov	r0, r8
    31dc:	469b      	mov	fp, r3
    31de:	f7fe fd13 	bl	1c08 <__aeabi_uidivmod>
    31e2:	9a02      	ldr	r2, [sp, #8]
    31e4:	0409      	lsls	r1, r1, #16
    31e6:	0c13      	lsrs	r3, r2, #16
    31e8:	4319      	orrs	r1, r3
    31ea:	458b      	cmp	fp, r1
    31ec:	d906      	bls.n	31fc <__udivdi3+0x20c>
    31ee:	464b      	mov	r3, r9
    31f0:	19c9      	adds	r1, r1, r7
    31f2:	3b01      	subs	r3, #1
    31f4:	428f      	cmp	r7, r1
    31f6:	d800      	bhi.n	31fa <__udivdi3+0x20a>
    31f8:	e0ab      	b.n	3352 <__udivdi3+0x362>
    31fa:	4699      	mov	r9, r3
    31fc:	465a      	mov	r2, fp
    31fe:	1a8a      	subs	r2, r1, r2
    3200:	1c10      	adds	r0, r2, #0
    3202:	1c29      	adds	r1, r5, #0
    3204:	4693      	mov	fp, r2
    3206:	f7fe fcbb 	bl	1b80 <__aeabi_uidiv>
    320a:	4653      	mov	r3, sl
    320c:	4343      	muls	r3, r0
    320e:	1c29      	adds	r1, r5, #0
    3210:	4680      	mov	r8, r0
    3212:	4658      	mov	r0, fp
    3214:	469a      	mov	sl, r3
    3216:	f7fe fcf7 	bl	1c08 <__aeabi_uidivmod>
    321a:	9a02      	ldr	r2, [sp, #8]
    321c:	0409      	lsls	r1, r1, #16
    321e:	0415      	lsls	r5, r2, #16
    3220:	0c2d      	lsrs	r5, r5, #16
    3222:	4329      	orrs	r1, r5
    3224:	458a      	cmp	sl, r1
    3226:	d906      	bls.n	3236 <__udivdi3+0x246>
    3228:	4643      	mov	r3, r8
    322a:	19c9      	adds	r1, r1, r7
    322c:	3b01      	subs	r3, #1
    322e:	428f      	cmp	r7, r1
    3230:	d800      	bhi.n	3234 <__udivdi3+0x244>
    3232:	e086      	b.n	3342 <__udivdi3+0x352>
    3234:	4698      	mov	r8, r3
    3236:	4657      	mov	r7, sl
    3238:	1bcf      	subs	r7, r1, r7
    323a:	46ba      	mov	sl, r7
    323c:	4649      	mov	r1, r9
    323e:	9f01      	ldr	r7, [sp, #4]
    3240:	0408      	lsls	r0, r1, #16
    3242:	4642      	mov	r2, r8
    3244:	4310      	orrs	r0, r2
    3246:	043d      	lsls	r5, r7, #16
    3248:	0c2d      	lsrs	r5, r5, #16
    324a:	0403      	lsls	r3, r0, #16
    324c:	0c3f      	lsrs	r7, r7, #16
    324e:	0c1b      	lsrs	r3, r3, #16
    3250:	0c02      	lsrs	r2, r0, #16
    3252:	1c29      	adds	r1, r5, #0
    3254:	4359      	muls	r1, r3
    3256:	4355      	muls	r5, r2
    3258:	437b      	muls	r3, r7
    325a:	437a      	muls	r2, r7
    325c:	18eb      	adds	r3, r5, r3
    325e:	0c0f      	lsrs	r7, r1, #16
    3260:	19db      	adds	r3, r3, r7
    3262:	468c      	mov	ip, r1
    3264:	429d      	cmp	r5, r3
    3266:	d902      	bls.n	326e <__udivdi3+0x27e>
    3268:	2780      	movs	r7, #128	; 0x80
    326a:	027f      	lsls	r7, r7, #9
    326c:	19d2      	adds	r2, r2, r7
    326e:	0c1d      	lsrs	r5, r3, #16
    3270:	1952      	adds	r2, r2, r5
    3272:	4592      	cmp	sl, r2
    3274:	d362      	bcc.n	333c <__udivdi3+0x34c>
    3276:	d059      	beq.n	332c <__udivdi3+0x33c>
    3278:	2700      	movs	r7, #0
    327a:	e733      	b.n	30e4 <__udivdi3+0xf4>
    327c:	2320      	movs	r3, #32
    327e:	1a1b      	subs	r3, r3, r0
    3280:	1c31      	adds	r1, r6, #0
    3282:	1c2f      	adds	r7, r5, #0
    3284:	40d9      	lsrs	r1, r3
    3286:	40df      	lsrs	r7, r3
    3288:	4085      	lsls	r5, r0
    328a:	1c0b      	adds	r3, r1, #0
    328c:	4084      	lsls	r4, r0
    328e:	432b      	orrs	r3, r5
    3290:	4086      	lsls	r6, r0
    3292:	9301      	str	r3, [sp, #4]
    3294:	46b3      	mov	fp, r6
    3296:	0423      	lsls	r3, r4, #16
    3298:	0c26      	lsrs	r6, r4, #16
    329a:	0c1b      	lsrs	r3, r3, #16
    329c:	1c38      	adds	r0, r7, #0
    329e:	1c31      	adds	r1, r6, #0
    32a0:	4698      	mov	r8, r3
    32a2:	f7fe fc6d 	bl	1b80 <__aeabi_uidiv>
    32a6:	4642      	mov	r2, r8
    32a8:	4342      	muls	r2, r0
    32aa:	1c05      	adds	r5, r0, #0
    32ac:	1c31      	adds	r1, r6, #0
    32ae:	1c38      	adds	r0, r7, #0
    32b0:	4691      	mov	r9, r2
    32b2:	f7fe fca9 	bl	1c08 <__aeabi_uidivmod>
    32b6:	9f01      	ldr	r7, [sp, #4]
    32b8:	0409      	lsls	r1, r1, #16
    32ba:	0c3b      	lsrs	r3, r7, #16
    32bc:	4319      	orrs	r1, r3
    32be:	4589      	cmp	r9, r1
    32c0:	d907      	bls.n	32d2 <__udivdi3+0x2e2>
    32c2:	1909      	adds	r1, r1, r4
    32c4:	1e6b      	subs	r3, r5, #1
    32c6:	428c      	cmp	r4, r1
    32c8:	d84d      	bhi.n	3366 <__udivdi3+0x376>
    32ca:	4589      	cmp	r9, r1
    32cc:	d94b      	bls.n	3366 <__udivdi3+0x376>
    32ce:	3d02      	subs	r5, #2
    32d0:	1909      	adds	r1, r1, r4
    32d2:	464a      	mov	r2, r9
    32d4:	1a8a      	subs	r2, r1, r2
    32d6:	1c10      	adds	r0, r2, #0
    32d8:	1c31      	adds	r1, r6, #0
    32da:	4692      	mov	sl, r2
    32dc:	f7fe fc50 	bl	1b80 <__aeabi_uidiv>
    32e0:	4643      	mov	r3, r8
    32e2:	4343      	muls	r3, r0
    32e4:	1c07      	adds	r7, r0, #0
    32e6:	1c31      	adds	r1, r6, #0
    32e8:	4650      	mov	r0, sl
    32ea:	4699      	mov	r9, r3
    32ec:	f7fe fc8c 	bl	1c08 <__aeabi_uidivmod>
    32f0:	9a01      	ldr	r2, [sp, #4]
    32f2:	0409      	lsls	r1, r1, #16
    32f4:	0413      	lsls	r3, r2, #16
    32f6:	0c1b      	lsrs	r3, r3, #16
    32f8:	4319      	orrs	r1, r3
    32fa:	4589      	cmp	r9, r1
    32fc:	d907      	bls.n	330e <__udivdi3+0x31e>
    32fe:	1909      	adds	r1, r1, r4
    3300:	1e7b      	subs	r3, r7, #1
    3302:	428c      	cmp	r4, r1
    3304:	d82d      	bhi.n	3362 <__udivdi3+0x372>
    3306:	4589      	cmp	r9, r1
    3308:	d92b      	bls.n	3362 <__udivdi3+0x372>
    330a:	3f02      	subs	r7, #2
    330c:	1909      	adds	r1, r1, r4
    330e:	464b      	mov	r3, r9
    3310:	1acb      	subs	r3, r1, r3
    3312:	042d      	lsls	r5, r5, #16
    3314:	4699      	mov	r9, r3
    3316:	432f      	orrs	r7, r5
    3318:	e700      	b.n	311c <__udivdi3+0x12c>
    331a:	2700      	movs	r7, #0
    331c:	2001      	movs	r0, #1
    331e:	e6e1      	b.n	30e4 <__udivdi3+0xf4>
    3320:	1c1e      	adds	r6, r3, #0
    3322:	e6c8      	b.n	30b6 <__udivdi3+0xc6>
    3324:	1c1f      	adds	r7, r3, #0
    3326:	e6a8      	b.n	307a <__udivdi3+0x8a>
    3328:	4699      	mov	r9, r3
    332a:	e733      	b.n	3194 <__udivdi3+0x1a4>
    332c:	4661      	mov	r1, ip
    332e:	040a      	lsls	r2, r1, #16
    3330:	041b      	lsls	r3, r3, #16
    3332:	0c12      	lsrs	r2, r2, #16
    3334:	189b      	adds	r3, r3, r2
    3336:	40a6      	lsls	r6, r4
    3338:	429e      	cmp	r6, r3
    333a:	d29d      	bcs.n	3278 <__udivdi3+0x288>
    333c:	3801      	subs	r0, #1
    333e:	2700      	movs	r7, #0
    3340:	e6d0      	b.n	30e4 <__udivdi3+0xf4>
    3342:	458a      	cmp	sl, r1
    3344:	d800      	bhi.n	3348 <__udivdi3+0x358>
    3346:	e775      	b.n	3234 <__udivdi3+0x244>
    3348:	2302      	movs	r3, #2
    334a:	425b      	negs	r3, r3
    334c:	4498      	add	r8, r3
    334e:	19c9      	adds	r1, r1, r7
    3350:	e771      	b.n	3236 <__udivdi3+0x246>
    3352:	458b      	cmp	fp, r1
    3354:	d800      	bhi.n	3358 <__udivdi3+0x368>
    3356:	e750      	b.n	31fa <__udivdi3+0x20a>
    3358:	2302      	movs	r3, #2
    335a:	425b      	negs	r3, r3
    335c:	4499      	add	r9, r3
    335e:	19c9      	adds	r1, r1, r7
    3360:	e74c      	b.n	31fc <__udivdi3+0x20c>
    3362:	1c1f      	adds	r7, r3, #0
    3364:	e7d3      	b.n	330e <__udivdi3+0x31e>
    3366:	1c1d      	adds	r5, r3, #0
    3368:	e7b3      	b.n	32d2 <__udivdi3+0x2e2>
    336a:	3d02      	subs	r5, #2
    336c:	1900      	adds	r0, r0, r4
    336e:	e6ef      	b.n	3150 <__udivdi3+0x160>

00003370 <atexit>:
    3370:	b508      	push	{r3, lr}
    3372:	1c01      	adds	r1, r0, #0
    3374:	2000      	movs	r0, #0
    3376:	1c02      	adds	r2, r0, #0
    3378:	1c03      	adds	r3, r0, #0
    337a:	f001 f841 	bl	4400 <__register_exitproc>
    337e:	bd08      	pop	{r3, pc}

00003380 <__libc_fini_array>:
    3380:	b538      	push	{r3, r4, r5, lr}
    3382:	4b07      	ldr	r3, [pc, #28]	; (33a0 <__libc_fini_array+0x20>)
    3384:	4c07      	ldr	r4, [pc, #28]	; (33a4 <__libc_fini_array+0x24>)
    3386:	1c1d      	adds	r5, r3, #0
    3388:	1ae4      	subs	r4, r4, r3
    338a:	10a4      	asrs	r4, r4, #2
    338c:	2c00      	cmp	r4, #0
    338e:	d004      	beq.n	339a <__libc_fini_array+0x1a>
    3390:	3c01      	subs	r4, #1
    3392:	00a3      	lsls	r3, r4, #2
    3394:	58eb      	ldr	r3, [r5, r3]
    3396:	4798      	blx	r3
    3398:	e7f8      	b.n	338c <__libc_fini_array+0xc>
    339a:	f004 fd93 	bl	7ec4 <_fini>
    339e:	bd38      	pop	{r3, r4, r5, pc}
    33a0:	00007ed0 	.word	0x00007ed0
    33a4:	00007ed4 	.word	0x00007ed4

000033a8 <__libc_init_array>:
    33a8:	b570      	push	{r4, r5, r6, lr}
    33aa:	4b0e      	ldr	r3, [pc, #56]	; (33e4 <__libc_init_array+0x3c>)
    33ac:	4d0e      	ldr	r5, [pc, #56]	; (33e8 <__libc_init_array+0x40>)
    33ae:	2400      	movs	r4, #0
    33b0:	1aed      	subs	r5, r5, r3
    33b2:	10ad      	asrs	r5, r5, #2
    33b4:	1c1e      	adds	r6, r3, #0
    33b6:	42ac      	cmp	r4, r5
    33b8:	d004      	beq.n	33c4 <__libc_init_array+0x1c>
    33ba:	00a3      	lsls	r3, r4, #2
    33bc:	58f3      	ldr	r3, [r6, r3]
    33be:	4798      	blx	r3
    33c0:	3401      	adds	r4, #1
    33c2:	e7f8      	b.n	33b6 <__libc_init_array+0xe>
    33c4:	f004 fd74 	bl	7eb0 <_init>
    33c8:	4b08      	ldr	r3, [pc, #32]	; (33ec <__libc_init_array+0x44>)
    33ca:	4d09      	ldr	r5, [pc, #36]	; (33f0 <__libc_init_array+0x48>)
    33cc:	2400      	movs	r4, #0
    33ce:	1aed      	subs	r5, r5, r3
    33d0:	10ad      	asrs	r5, r5, #2
    33d2:	1c1e      	adds	r6, r3, #0
    33d4:	42ac      	cmp	r4, r5
    33d6:	d004      	beq.n	33e2 <__libc_init_array+0x3a>
    33d8:	00a3      	lsls	r3, r4, #2
    33da:	58f3      	ldr	r3, [r6, r3]
    33dc:	4798      	blx	r3
    33de:	3401      	adds	r4, #1
    33e0:	e7f8      	b.n	33d4 <__libc_init_array+0x2c>
    33e2:	bd70      	pop	{r4, r5, r6, pc}
    33e4:	00007ebc 	.word	0x00007ebc
    33e8:	00007ebc 	.word	0x00007ebc
    33ec:	00007ebc 	.word	0x00007ebc
    33f0:	00007ec4 	.word	0x00007ec4

000033f4 <memcpy>:
    33f4:	b510      	push	{r4, lr}
    33f6:	2300      	movs	r3, #0
    33f8:	4293      	cmp	r3, r2
    33fa:	d003      	beq.n	3404 <memcpy+0x10>
    33fc:	5ccc      	ldrb	r4, [r1, r3]
    33fe:	54c4      	strb	r4, [r0, r3]
    3400:	3301      	adds	r3, #1
    3402:	e7f9      	b.n	33f8 <memcpy+0x4>
    3404:	bd10      	pop	{r4, pc}

00003406 <memset>:
    3406:	1c03      	adds	r3, r0, #0
    3408:	1882      	adds	r2, r0, r2
    340a:	4293      	cmp	r3, r2
    340c:	d002      	beq.n	3414 <memset+0xe>
    340e:	7019      	strb	r1, [r3, #0]
    3410:	3301      	adds	r3, #1
    3412:	e7fa      	b.n	340a <memset+0x4>
    3414:	4770      	bx	lr
	...

00003418 <_sprintf_r>:
    3418:	b40c      	push	{r2, r3}
    341a:	b510      	push	{r4, lr}
    341c:	b09c      	sub	sp, #112	; 0x70
    341e:	9102      	str	r1, [sp, #8]
    3420:	9106      	str	r1, [sp, #24]
    3422:	490c      	ldr	r1, [pc, #48]	; (3454 <_sprintf_r+0x3c>)
    3424:	ab1e      	add	r3, sp, #120	; 0x78
    3426:	9104      	str	r1, [sp, #16]
    3428:	9107      	str	r1, [sp, #28]
    342a:	2482      	movs	r4, #130	; 0x82
    342c:	2101      	movs	r1, #1
    342e:	cb04      	ldmia	r3!, {r2}
    3430:	00a4      	lsls	r4, r4, #2
    3432:	aa02      	add	r2, sp, #8
    3434:	4249      	negs	r1, r1
    3436:	8194      	strh	r4, [r2, #12]
    3438:	81d1      	strh	r1, [r2, #14]
    343a:	1c11      	adds	r1, r2, #0
    343c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    343e:	9301      	str	r3, [sp, #4]
    3440:	f000 f82e 	bl	34a0 <_svfprintf_r>
    3444:	9a02      	ldr	r2, [sp, #8]
    3446:	2300      	movs	r3, #0
    3448:	7013      	strb	r3, [r2, #0]
    344a:	b01c      	add	sp, #112	; 0x70
    344c:	bc10      	pop	{r4}
    344e:	bc08      	pop	{r3}
    3450:	b002      	add	sp, #8
    3452:	4718      	bx	r3
    3454:	7fffffff 	.word	0x7fffffff

00003458 <sprintf>:
    3458:	b40e      	push	{r1, r2, r3}
    345a:	b500      	push	{lr}
    345c:	b09c      	sub	sp, #112	; 0x70
    345e:	ab1d      	add	r3, sp, #116	; 0x74
    3460:	cb04      	ldmia	r3!, {r2}
    3462:	2282      	movs	r2, #130	; 0x82
    3464:	a902      	add	r1, sp, #8
    3466:	0092      	lsls	r2, r2, #2
    3468:	818a      	strh	r2, [r1, #12]
    346a:	4a0a      	ldr	r2, [pc, #40]	; (3494 <sprintf+0x3c>)
    346c:	9002      	str	r0, [sp, #8]
    346e:	608a      	str	r2, [r1, #8]
    3470:	614a      	str	r2, [r1, #20]
    3472:	2201      	movs	r2, #1
    3474:	4252      	negs	r2, r2
    3476:	81ca      	strh	r2, [r1, #14]
    3478:	4a07      	ldr	r2, [pc, #28]	; (3498 <sprintf+0x40>)
    347a:	6108      	str	r0, [r1, #16]
    347c:	6810      	ldr	r0, [r2, #0]
    347e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    3480:	9301      	str	r3, [sp, #4]
    3482:	f000 f80d 	bl	34a0 <_svfprintf_r>
    3486:	9a02      	ldr	r2, [sp, #8]
    3488:	2300      	movs	r3, #0
    348a:	7013      	strb	r3, [r2, #0]
    348c:	b01c      	add	sp, #112	; 0x70
    348e:	bc08      	pop	{r3}
    3490:	b003      	add	sp, #12
    3492:	4718      	bx	r3
    3494:	7fffffff 	.word	0x7fffffff
    3498:	20000008 	.word	0x20000008
    349c:	00000000 	.word	0x00000000

000034a0 <_svfprintf_r>:
    34a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34a2:	b0c5      	sub	sp, #276	; 0x114
    34a4:	1c1f      	adds	r7, r3, #0
    34a6:	910c      	str	r1, [sp, #48]	; 0x30
    34a8:	9212      	str	r2, [sp, #72]	; 0x48
    34aa:	900d      	str	r0, [sp, #52]	; 0x34
    34ac:	f001 ff9e 	bl	53ec <_localeconv_r>
    34b0:	6800      	ldr	r0, [r0, #0]
    34b2:	901a      	str	r0, [sp, #104]	; 0x68
    34b4:	f002 fdea 	bl	608c <strlen>
    34b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    34ba:	9019      	str	r0, [sp, #100]	; 0x64
    34bc:	89ab      	ldrh	r3, [r5, #12]
    34be:	0618      	lsls	r0, r3, #24
    34c0:	d512      	bpl.n	34e8 <_svfprintf_r+0x48>
    34c2:	6929      	ldr	r1, [r5, #16]
    34c4:	2900      	cmp	r1, #0
    34c6:	d10f      	bne.n	34e8 <_svfprintf_r+0x48>
    34c8:	980d      	ldr	r0, [sp, #52]	; 0x34
    34ca:	2140      	movs	r1, #64	; 0x40
    34cc:	f001 ffa6 	bl	541c <_malloc_r>
    34d0:	6028      	str	r0, [r5, #0]
    34d2:	6128      	str	r0, [r5, #16]
    34d4:	2800      	cmp	r0, #0
    34d6:	d104      	bne.n	34e2 <_svfprintf_r+0x42>
    34d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    34da:	230c      	movs	r3, #12
    34dc:	602b      	str	r3, [r5, #0]
    34de:	f000 ff82 	bl	43e6 <_svfprintf_r+0xf46>
    34e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    34e4:	2340      	movs	r3, #64	; 0x40
    34e6:	616b      	str	r3, [r5, #20]
    34e8:	2300      	movs	r3, #0
    34ea:	ac34      	add	r4, sp, #208	; 0xd0
    34ec:	9427      	str	r4, [sp, #156]	; 0x9c
    34ee:	9329      	str	r3, [sp, #164]	; 0xa4
    34f0:	9328      	str	r3, [sp, #160]	; 0xa0
    34f2:	9310      	str	r3, [sp, #64]	; 0x40
    34f4:	9316      	str	r3, [sp, #88]	; 0x58
    34f6:	9318      	str	r3, [sp, #96]	; 0x60
    34f8:	931d      	str	r3, [sp, #116]	; 0x74
    34fa:	931c      	str	r3, [sp, #112]	; 0x70
    34fc:	9317      	str	r3, [sp, #92]	; 0x5c
    34fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
    3500:	782b      	ldrb	r3, [r5, #0]
    3502:	2b00      	cmp	r3, #0
    3504:	d103      	bne.n	350e <_svfprintf_r+0x6e>
    3506:	9812      	ldr	r0, [sp, #72]	; 0x48
    3508:	1a2e      	subs	r6, r5, r0
    350a:	d104      	bne.n	3516 <_svfprintf_r+0x76>
    350c:	e01d      	b.n	354a <_svfprintf_r+0xaa>
    350e:	2b25      	cmp	r3, #37	; 0x25
    3510:	d0f9      	beq.n	3506 <_svfprintf_r+0x66>
    3512:	3501      	adds	r5, #1
    3514:	e7f4      	b.n	3500 <_svfprintf_r+0x60>
    3516:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    3518:	9912      	ldr	r1, [sp, #72]	; 0x48
    351a:	18b3      	adds	r3, r6, r2
    351c:	9329      	str	r3, [sp, #164]	; 0xa4
    351e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3520:	6021      	str	r1, [r4, #0]
    3522:	3301      	adds	r3, #1
    3524:	6066      	str	r6, [r4, #4]
    3526:	9328      	str	r3, [sp, #160]	; 0xa0
    3528:	2b07      	cmp	r3, #7
    352a:	dc01      	bgt.n	3530 <_svfprintf_r+0x90>
    352c:	3408      	adds	r4, #8
    352e:	e009      	b.n	3544 <_svfprintf_r+0xa4>
    3530:	980d      	ldr	r0, [sp, #52]	; 0x34
    3532:	990c      	ldr	r1, [sp, #48]	; 0x30
    3534:	aa27      	add	r2, sp, #156	; 0x9c
    3536:	f002 fdb1 	bl	609c <__ssprint_r>
    353a:	2800      	cmp	r0, #0
    353c:	d001      	beq.n	3542 <_svfprintf_r+0xa2>
    353e:	f000 ff4d 	bl	43dc <_svfprintf_r+0xf3c>
    3542:	ac34      	add	r4, sp, #208	; 0xd0
    3544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3546:	199b      	adds	r3, r3, r6
    3548:	9317      	str	r3, [sp, #92]	; 0x5c
    354a:	782b      	ldrb	r3, [r5, #0]
    354c:	2b00      	cmp	r3, #0
    354e:	d101      	bne.n	3554 <_svfprintf_r+0xb4>
    3550:	f000 ff3c 	bl	43cc <_svfprintf_r+0xf2c>
    3554:	466a      	mov	r2, sp
    3556:	2300      	movs	r3, #0
    3558:	327f      	adds	r2, #127	; 0x7f
    355a:	7013      	strb	r3, [r2, #0]
    355c:	2201      	movs	r2, #1
    355e:	4252      	negs	r2, r2
    3560:	3501      	adds	r5, #1
    3562:	920a      	str	r2, [sp, #40]	; 0x28
    3564:	9314      	str	r3, [sp, #80]	; 0x50
    3566:	1c1e      	adds	r6, r3, #0
    3568:	1c68      	adds	r0, r5, #1
    356a:	782d      	ldrb	r5, [r5, #0]
    356c:	9012      	str	r0, [sp, #72]	; 0x48
    356e:	950b      	str	r5, [sp, #44]	; 0x2c
    3570:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3572:	3820      	subs	r0, #32
    3574:	2858      	cmp	r0, #88	; 0x58
    3576:	d900      	bls.n	357a <_svfprintf_r+0xda>
    3578:	e38e      	b.n	3c98 <_svfprintf_r+0x7f8>
    357a:	f003 fbf9 	bl	6d70 <__gnu_thumb1_case_uhi>
    357e:	005b      	.short	0x005b
    3580:	038d038d 	.word	0x038d038d
    3584:	038d0069 	.word	0x038d0069
    3588:	038d038d 	.word	0x038d038d
    358c:	038d038d 	.word	0x038d038d
    3590:	006b038d 	.word	0x006b038d
    3594:	038d0059 	.word	0x038d0059
    3598:	00750072 	.word	0x00750072
    359c:	00a0038d 	.word	0x00a0038d
    35a0:	00a200a2 	.word	0x00a200a2
    35a4:	00a200a2 	.word	0x00a200a2
    35a8:	00a200a2 	.word	0x00a200a2
    35ac:	00a200a2 	.word	0x00a200a2
    35b0:	038d00a2 	.word	0x038d00a2
    35b4:	038d038d 	.word	0x038d038d
    35b8:	038d038d 	.word	0x038d038d
    35bc:	038d038d 	.word	0x038d038d
    35c0:	038d038d 	.word	0x038d038d
    35c4:	00d0038d 	.word	0x00d0038d
    35c8:	038d00fc 	.word	0x038d00fc
    35cc:	038d00fc 	.word	0x038d00fc
    35d0:	038d038d 	.word	0x038d038d
    35d4:	00b6038d 	.word	0x00b6038d
    35d8:	038d038d 	.word	0x038d038d
    35dc:	038d026e 	.word	0x038d026e
    35e0:	038d038d 	.word	0x038d038d
    35e4:	038d038d 	.word	0x038d038d
    35e8:	038d02c2 	.word	0x038d02c2
    35ec:	0064038d 	.word	0x0064038d
    35f0:	038d038d 	.word	0x038d038d
    35f4:	038d038d 	.word	0x038d038d
    35f8:	038d038d 	.word	0x038d038d
    35fc:	038d038d 	.word	0x038d038d
    3600:	038d038d 	.word	0x038d038d
    3604:	006000c5 	.word	0x006000c5
    3608:	00fc00fc 	.word	0x00fc00fc
    360c:	00b800fc 	.word	0x00b800fc
    3610:	038d0060 	.word	0x038d0060
    3614:	00ba038d 	.word	0x00ba038d
    3618:	0255038d 	.word	0x0255038d
    361c:	02900270 	.word	0x02900270
    3620:	038d00c3 	.word	0x038d00c3
    3624:	038d02a0 	.word	0x038d02a0
    3628:	038d02c4 	.word	0x038d02c4
    362c:	02e3038d 	.word	0x02e3038d
    3630:	232b      	movs	r3, #43	; 0x2b
    3632:	e002      	b.n	363a <_svfprintf_r+0x19a>
    3634:	2b00      	cmp	r3, #0
    3636:	d100      	bne.n	363a <_svfprintf_r+0x19a>
    3638:	2320      	movs	r3, #32
    363a:	9d12      	ldr	r5, [sp, #72]	; 0x48
    363c:	e794      	b.n	3568 <_svfprintf_r+0xc8>
    363e:	466a      	mov	r2, sp
    3640:	327f      	adds	r2, #127	; 0x7f
    3642:	7013      	strb	r3, [r2, #0]
    3644:	e070      	b.n	3728 <_svfprintf_r+0x288>
    3646:	466a      	mov	r2, sp
    3648:	327f      	adds	r2, #127	; 0x7f
    364a:	7013      	strb	r3, [r2, #0]
    364c:	4dc6      	ldr	r5, [pc, #792]	; (3968 <_svfprintf_r+0x4c8>)
    364e:	e27d      	b.n	3b4c <_svfprintf_r+0x6ac>
    3650:	2201      	movs	r2, #1
    3652:	e007      	b.n	3664 <_svfprintf_r+0x1c4>
    3654:	683d      	ldr	r5, [r7, #0]
    3656:	3704      	adds	r7, #4
    3658:	9514      	str	r5, [sp, #80]	; 0x50
    365a:	2d00      	cmp	r5, #0
    365c:	daed      	bge.n	363a <_svfprintf_r+0x19a>
    365e:	426d      	negs	r5, r5
    3660:	9514      	str	r5, [sp, #80]	; 0x50
    3662:	2204      	movs	r2, #4
    3664:	4316      	orrs	r6, r2
    3666:	e7e8      	b.n	363a <_svfprintf_r+0x19a>
    3668:	9d12      	ldr	r5, [sp, #72]	; 0x48
    366a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    366c:	782d      	ldrb	r5, [r5, #0]
    366e:	3201      	adds	r2, #1
    3670:	950b      	str	r5, [sp, #44]	; 0x2c
    3672:	2d2a      	cmp	r5, #42	; 0x2a
    3674:	d001      	beq.n	367a <_svfprintf_r+0x1da>
    3676:	2100      	movs	r1, #0
    3678:	e00d      	b.n	3696 <_svfprintf_r+0x1f6>
    367a:	1d39      	adds	r1, r7, #4
    367c:	683f      	ldr	r7, [r7, #0]
    367e:	970a      	str	r7, [sp, #40]	; 0x28
    3680:	2f00      	cmp	r7, #0
    3682:	da05      	bge.n	3690 <_svfprintf_r+0x1f0>
    3684:	9212      	str	r2, [sp, #72]	; 0x48
    3686:	2201      	movs	r2, #1
    3688:	4252      	negs	r2, r2
    368a:	1c0f      	adds	r7, r1, #0
    368c:	920a      	str	r2, [sp, #40]	; 0x28
    368e:	e7d4      	b.n	363a <_svfprintf_r+0x19a>
    3690:	1c0f      	adds	r7, r1, #0
    3692:	9212      	str	r2, [sp, #72]	; 0x48
    3694:	e7d1      	b.n	363a <_svfprintf_r+0x19a>
    3696:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3698:	9212      	str	r2, [sp, #72]	; 0x48
    369a:	3830      	subs	r0, #48	; 0x30
    369c:	2809      	cmp	r0, #9
    369e:	d806      	bhi.n	36ae <_svfprintf_r+0x20e>
    36a0:	250a      	movs	r5, #10
    36a2:	4369      	muls	r1, r5
    36a4:	7815      	ldrb	r5, [r2, #0]
    36a6:	1809      	adds	r1, r1, r0
    36a8:	950b      	str	r5, [sp, #44]	; 0x2c
    36aa:	3201      	adds	r2, #1
    36ac:	e7f3      	b.n	3696 <_svfprintf_r+0x1f6>
    36ae:	910a      	str	r1, [sp, #40]	; 0x28
    36b0:	2900      	cmp	r1, #0
    36b2:	db00      	blt.n	36b6 <_svfprintf_r+0x216>
    36b4:	e75c      	b.n	3570 <_svfprintf_r+0xd0>
    36b6:	2201      	movs	r2, #1
    36b8:	4252      	negs	r2, r2
    36ba:	920a      	str	r2, [sp, #40]	; 0x28
    36bc:	e758      	b.n	3570 <_svfprintf_r+0xd0>
    36be:	2280      	movs	r2, #128	; 0x80
    36c0:	e7d0      	b.n	3664 <_svfprintf_r+0x1c4>
    36c2:	2500      	movs	r5, #0
    36c4:	9514      	str	r5, [sp, #80]	; 0x50
    36c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
    36c8:	210a      	movs	r1, #10
    36ca:	4369      	muls	r1, r5
    36cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    36ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
    36d0:	3a30      	subs	r2, #48	; 0x30
    36d2:	188a      	adds	r2, r1, r2
    36d4:	3501      	adds	r5, #1
    36d6:	9214      	str	r2, [sp, #80]	; 0x50
    36d8:	1c2a      	adds	r2, r5, #0
    36da:	3a01      	subs	r2, #1
    36dc:	7812      	ldrb	r2, [r2, #0]
    36de:	9512      	str	r5, [sp, #72]	; 0x48
    36e0:	920b      	str	r2, [sp, #44]	; 0x2c
    36e2:	3a30      	subs	r2, #48	; 0x30
    36e4:	2a09      	cmp	r2, #9
    36e6:	d9ee      	bls.n	36c6 <_svfprintf_r+0x226>
    36e8:	e742      	b.n	3570 <_svfprintf_r+0xd0>
    36ea:	2208      	movs	r2, #8
    36ec:	e7ba      	b.n	3664 <_svfprintf_r+0x1c4>
    36ee:	2240      	movs	r2, #64	; 0x40
    36f0:	e7b8      	b.n	3664 <_svfprintf_r+0x1c4>
    36f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
    36f4:	782a      	ldrb	r2, [r5, #0]
    36f6:	2a6c      	cmp	r2, #108	; 0x6c
    36f8:	d102      	bne.n	3700 <_svfprintf_r+0x260>
    36fa:	3501      	adds	r5, #1
    36fc:	9512      	str	r5, [sp, #72]	; 0x48
    36fe:	e001      	b.n	3704 <_svfprintf_r+0x264>
    3700:	2210      	movs	r2, #16
    3702:	e7af      	b.n	3664 <_svfprintf_r+0x1c4>
    3704:	2220      	movs	r2, #32
    3706:	e7ad      	b.n	3664 <_svfprintf_r+0x1c4>
    3708:	6838      	ldr	r0, [r7, #0]
    370a:	466a      	mov	r2, sp
    370c:	ab2a      	add	r3, sp, #168	; 0xa8
    370e:	2500      	movs	r5, #0
    3710:	327f      	adds	r2, #127	; 0x7f
    3712:	2101      	movs	r1, #1
    3714:	7018      	strb	r0, [r3, #0]
    3716:	7015      	strb	r5, [r2, #0]
    3718:	3704      	adds	r7, #4
    371a:	910a      	str	r1, [sp, #40]	; 0x28
    371c:	e2c9      	b.n	3cb2 <_svfprintf_r+0x812>
    371e:	466a      	mov	r2, sp
    3720:	327f      	adds	r2, #127	; 0x7f
    3722:	7013      	strb	r3, [r2, #0]
    3724:	2310      	movs	r3, #16
    3726:	431e      	orrs	r6, r3
    3728:	06b2      	lsls	r2, r6, #26
    372a:	d509      	bpl.n	3740 <_svfprintf_r+0x2a0>
    372c:	1dfb      	adds	r3, r7, #7
    372e:	2207      	movs	r2, #7
    3730:	4393      	bics	r3, r2
    3732:	1c1f      	adds	r7, r3, #0
    3734:	6818      	ldr	r0, [r3, #0]
    3736:	6859      	ldr	r1, [r3, #4]
    3738:	3708      	adds	r7, #8
    373a:	9008      	str	r0, [sp, #32]
    373c:	9109      	str	r1, [sp, #36]	; 0x24
    373e:	e00a      	b.n	3756 <_svfprintf_r+0x2b6>
    3740:	1d3b      	adds	r3, r7, #4
    3742:	683a      	ldr	r2, [r7, #0]
    3744:	06f1      	lsls	r1, r6, #27
    3746:	d402      	bmi.n	374e <_svfprintf_r+0x2ae>
    3748:	0675      	lsls	r5, r6, #25
    374a:	d500      	bpl.n	374e <_svfprintf_r+0x2ae>
    374c:	b212      	sxth	r2, r2
    374e:	9208      	str	r2, [sp, #32]
    3750:	17d2      	asrs	r2, r2, #31
    3752:	9209      	str	r2, [sp, #36]	; 0x24
    3754:	1c1f      	adds	r7, r3, #0
    3756:	9809      	ldr	r0, [sp, #36]	; 0x24
    3758:	2800      	cmp	r0, #0
    375a:	db00      	blt.n	375e <_svfprintf_r+0x2be>
    375c:	e226      	b.n	3bac <_svfprintf_r+0x70c>
    375e:	9808      	ldr	r0, [sp, #32]
    3760:	9909      	ldr	r1, [sp, #36]	; 0x24
    3762:	2300      	movs	r3, #0
    3764:	4242      	negs	r2, r0
    3766:	418b      	sbcs	r3, r1
    3768:	9208      	str	r2, [sp, #32]
    376a:	9309      	str	r3, [sp, #36]	; 0x24
    376c:	466b      	mov	r3, sp
    376e:	222d      	movs	r2, #45	; 0x2d
    3770:	337f      	adds	r3, #127	; 0x7f
    3772:	701a      	strb	r2, [r3, #0]
    3774:	e21a      	b.n	3bac <_svfprintf_r+0x70c>
    3776:	466a      	mov	r2, sp
    3778:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    377a:	327f      	adds	r2, #127	; 0x7f
    377c:	7013      	strb	r3, [r2, #0]
    377e:	1dfb      	adds	r3, r7, #7
    3780:	2207      	movs	r2, #7
    3782:	4393      	bics	r3, r2
    3784:	9613      	str	r6, [sp, #76]	; 0x4c
    3786:	9515      	str	r5, [sp, #84]	; 0x54
    3788:	681d      	ldr	r5, [r3, #0]
    378a:	1c1f      	adds	r7, r3, #0
    378c:	9516      	str	r5, [sp, #88]	; 0x58
    378e:	685b      	ldr	r3, [r3, #4]
    3790:	9816      	ldr	r0, [sp, #88]	; 0x58
    3792:	9318      	str	r3, [sp, #96]	; 0x60
    3794:	9918      	ldr	r1, [sp, #96]	; 0x60
    3796:	3708      	adds	r7, #8
    3798:	f002 fc32 	bl	6000 <__fpclassifyd>
    379c:	2801      	cmp	r0, #1
    379e:	d112      	bne.n	37c6 <_svfprintf_r+0x326>
    37a0:	9816      	ldr	r0, [sp, #88]	; 0x58
    37a2:	9918      	ldr	r1, [sp, #96]	; 0x60
    37a4:	4b6f      	ldr	r3, [pc, #444]	; (3964 <_svfprintf_r+0x4c4>)
    37a6:	4a6e      	ldr	r2, [pc, #440]	; (3960 <_svfprintf_r+0x4c0>)
    37a8:	f7fe fa50 	bl	1c4c <__aeabi_dcmplt>
    37ac:	2800      	cmp	r0, #0
    37ae:	d003      	beq.n	37b8 <_svfprintf_r+0x318>
    37b0:	466b      	mov	r3, sp
    37b2:	222d      	movs	r2, #45	; 0x2d
    37b4:	337f      	adds	r3, #127	; 0x7f
    37b6:	701a      	strb	r2, [r3, #0]
    37b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37ba:	2d47      	cmp	r5, #71	; 0x47
    37bc:	dc01      	bgt.n	37c2 <_svfprintf_r+0x322>
    37be:	4d6b      	ldr	r5, [pc, #428]	; (396c <_svfprintf_r+0x4cc>)
    37c0:	e00d      	b.n	37de <_svfprintf_r+0x33e>
    37c2:	4d6b      	ldr	r5, [pc, #428]	; (3970 <_svfprintf_r+0x4d0>)
    37c4:	e00b      	b.n	37de <_svfprintf_r+0x33e>
    37c6:	9816      	ldr	r0, [sp, #88]	; 0x58
    37c8:	9918      	ldr	r1, [sp, #96]	; 0x60
    37ca:	f002 fc19 	bl	6000 <__fpclassifyd>
    37ce:	2800      	cmp	r0, #0
    37d0:	d10a      	bne.n	37e8 <_svfprintf_r+0x348>
    37d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37d4:	2d47      	cmp	r5, #71	; 0x47
    37d6:	dc01      	bgt.n	37dc <_svfprintf_r+0x33c>
    37d8:	4d66      	ldr	r5, [pc, #408]	; (3974 <_svfprintf_r+0x4d4>)
    37da:	e000      	b.n	37de <_svfprintf_r+0x33e>
    37dc:	4d66      	ldr	r5, [pc, #408]	; (3978 <_svfprintf_r+0x4d8>)
    37de:	2380      	movs	r3, #128	; 0x80
    37e0:	950e      	str	r5, [sp, #56]	; 0x38
    37e2:	439e      	bics	r6, r3
    37e4:	2503      	movs	r5, #3
    37e6:	e184      	b.n	3af2 <_svfprintf_r+0x652>
    37e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    37ea:	3501      	adds	r5, #1
    37ec:	d009      	beq.n	3802 <_svfprintf_r+0x362>
    37ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    37f0:	2320      	movs	r3, #32
    37f2:	439d      	bics	r5, r3
    37f4:	2d47      	cmp	r5, #71	; 0x47
    37f6:	d106      	bne.n	3806 <_svfprintf_r+0x366>
    37f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    37fa:	2d00      	cmp	r5, #0
    37fc:	d103      	bne.n	3806 <_svfprintf_r+0x366>
    37fe:	2501      	movs	r5, #1
    3800:	e000      	b.n	3804 <_svfprintf_r+0x364>
    3802:	2506      	movs	r5, #6
    3804:	950a      	str	r5, [sp, #40]	; 0x28
    3806:	2380      	movs	r3, #128	; 0x80
    3808:	005b      	lsls	r3, r3, #1
    380a:	431e      	orrs	r6, r3
    380c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    380e:	2b00      	cmp	r3, #0
    3810:	da06      	bge.n	3820 <_svfprintf_r+0x380>
    3812:	9d18      	ldr	r5, [sp, #96]	; 0x60
    3814:	2080      	movs	r0, #128	; 0x80
    3816:	0600      	lsls	r0, r0, #24
    3818:	1828      	adds	r0, r5, r0
    381a:	900f      	str	r0, [sp, #60]	; 0x3c
    381c:	252d      	movs	r5, #45	; 0x2d
    381e:	e002      	b.n	3826 <_svfprintf_r+0x386>
    3820:	9d18      	ldr	r5, [sp, #96]	; 0x60
    3822:	950f      	str	r5, [sp, #60]	; 0x3c
    3824:	2500      	movs	r5, #0
    3826:	951b      	str	r5, [sp, #108]	; 0x6c
    3828:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    382a:	2320      	movs	r3, #32
    382c:	439d      	bics	r5, r3
    382e:	9511      	str	r5, [sp, #68]	; 0x44
    3830:	2d46      	cmp	r5, #70	; 0x46
    3832:	d004      	beq.n	383e <_svfprintf_r+0x39e>
    3834:	2d45      	cmp	r5, #69	; 0x45
    3836:	d105      	bne.n	3844 <_svfprintf_r+0x3a4>
    3838:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    383a:	3501      	adds	r5, #1
    383c:	e003      	b.n	3846 <_svfprintf_r+0x3a6>
    383e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3840:	2303      	movs	r3, #3
    3842:	e001      	b.n	3848 <_svfprintf_r+0x3a8>
    3844:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3846:	2302      	movs	r3, #2
    3848:	9300      	str	r3, [sp, #0]
    384a:	ab21      	add	r3, sp, #132	; 0x84
    384c:	9302      	str	r3, [sp, #8]
    384e:	ab22      	add	r3, sp, #136	; 0x88
    3850:	9303      	str	r3, [sp, #12]
    3852:	ab25      	add	r3, sp, #148	; 0x94
    3854:	9304      	str	r3, [sp, #16]
    3856:	9501      	str	r5, [sp, #4]
    3858:	980d      	ldr	r0, [sp, #52]	; 0x34
    385a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    385c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    385e:	f000 feb7 	bl	45d0 <_dtoa_r>
    3862:	900e      	str	r0, [sp, #56]	; 0x38
    3864:	9811      	ldr	r0, [sp, #68]	; 0x44
    3866:	2847      	cmp	r0, #71	; 0x47
    3868:	d10b      	bne.n	3882 <_svfprintf_r+0x3e2>
    386a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    386c:	07c9      	lsls	r1, r1, #31
    386e:	d408      	bmi.n	3882 <_svfprintf_r+0x3e2>
    3870:	9d25      	ldr	r5, [sp, #148]	; 0x94
    3872:	980e      	ldr	r0, [sp, #56]	; 0x38
    3874:	9a21      	ldr	r2, [sp, #132]	; 0x84
    3876:	1a2d      	subs	r5, r5, r0
    3878:	9510      	str	r5, [sp, #64]	; 0x40
    387a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    387c:	2d47      	cmp	r5, #71	; 0x47
    387e:	d136      	bne.n	38ee <_svfprintf_r+0x44e>
    3880:	e02b      	b.n	38da <_svfprintf_r+0x43a>
    3882:	980e      	ldr	r0, [sp, #56]	; 0x38
    3884:	9911      	ldr	r1, [sp, #68]	; 0x44
    3886:	1940      	adds	r0, r0, r5
    3888:	9010      	str	r0, [sp, #64]	; 0x40
    388a:	2946      	cmp	r1, #70	; 0x46
    388c:	d112      	bne.n	38b4 <_svfprintf_r+0x414>
    388e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3890:	7813      	ldrb	r3, [r2, #0]
    3892:	2b30      	cmp	r3, #48	; 0x30
    3894:	d10a      	bne.n	38ac <_svfprintf_r+0x40c>
    3896:	9816      	ldr	r0, [sp, #88]	; 0x58
    3898:	990f      	ldr	r1, [sp, #60]	; 0x3c
    389a:	4b32      	ldr	r3, [pc, #200]	; (3964 <_svfprintf_r+0x4c4>)
    389c:	4a30      	ldr	r2, [pc, #192]	; (3960 <_svfprintf_r+0x4c0>)
    389e:	f7fe f9cf 	bl	1c40 <__aeabi_dcmpeq>
    38a2:	2800      	cmp	r0, #0
    38a4:	d102      	bne.n	38ac <_svfprintf_r+0x40c>
    38a6:	2301      	movs	r3, #1
    38a8:	1b5d      	subs	r5, r3, r5
    38aa:	9521      	str	r5, [sp, #132]	; 0x84
    38ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
    38ae:	9821      	ldr	r0, [sp, #132]	; 0x84
    38b0:	182d      	adds	r5, r5, r0
    38b2:	9510      	str	r5, [sp, #64]	; 0x40
    38b4:	9816      	ldr	r0, [sp, #88]	; 0x58
    38b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    38b8:	4b2a      	ldr	r3, [pc, #168]	; (3964 <_svfprintf_r+0x4c4>)
    38ba:	4a29      	ldr	r2, [pc, #164]	; (3960 <_svfprintf_r+0x4c0>)
    38bc:	f7fe f9c0 	bl	1c40 <__aeabi_dcmpeq>
    38c0:	2800      	cmp	r0, #0
    38c2:	d001      	beq.n	38c8 <_svfprintf_r+0x428>
    38c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    38c6:	9525      	str	r5, [sp, #148]	; 0x94
    38c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    38ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
    38cc:	42ab      	cmp	r3, r5
    38ce:	d2cf      	bcs.n	3870 <_svfprintf_r+0x3d0>
    38d0:	1c5a      	adds	r2, r3, #1
    38d2:	9225      	str	r2, [sp, #148]	; 0x94
    38d4:	2230      	movs	r2, #48	; 0x30
    38d6:	701a      	strb	r2, [r3, #0]
    38d8:	e7f6      	b.n	38c8 <_svfprintf_r+0x428>
    38da:	1cd0      	adds	r0, r2, #3
    38dc:	db03      	blt.n	38e6 <_svfprintf_r+0x446>
    38de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    38e0:	42aa      	cmp	r2, r5
    38e2:	dc00      	bgt.n	38e6 <_svfprintf_r+0x446>
    38e4:	e07e      	b.n	39e4 <_svfprintf_r+0x544>
    38e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38e8:	3d02      	subs	r5, #2
    38ea:	950b      	str	r5, [sp, #44]	; 0x2c
    38ec:	e002      	b.n	38f4 <_svfprintf_r+0x454>
    38ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    38f0:	2d65      	cmp	r5, #101	; 0x65
    38f2:	dc5e      	bgt.n	39b2 <_svfprintf_r+0x512>
    38f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    38f6:	1e55      	subs	r5, r2, #1
    38f8:	ab23      	add	r3, sp, #140	; 0x8c
    38fa:	7018      	strb	r0, [r3, #0]
    38fc:	9521      	str	r5, [sp, #132]	; 0x84
    38fe:	3301      	adds	r3, #1
    3900:	222b      	movs	r2, #43	; 0x2b
    3902:	2d00      	cmp	r5, #0
    3904:	da01      	bge.n	390a <_svfprintf_r+0x46a>
    3906:	426d      	negs	r5, r5
    3908:	222d      	movs	r2, #45	; 0x2d
    390a:	701a      	strb	r2, [r3, #0]
    390c:	2d09      	cmp	r5, #9
    390e:	dd35      	ble.n	397c <_svfprintf_r+0x4dc>
    3910:	4669      	mov	r1, sp
    3912:	319a      	adds	r1, #154	; 0x9a
    3914:	910a      	str	r1, [sp, #40]	; 0x28
    3916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3918:	1c28      	adds	r0, r5, #0
    391a:	210a      	movs	r1, #10
    391c:	9211      	str	r2, [sp, #68]	; 0x44
    391e:	f003 fa87 	bl	6e30 <__aeabi_idivmod>
    3922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3924:	3130      	adds	r1, #48	; 0x30
    3926:	7019      	strb	r1, [r3, #0]
    3928:	1c28      	adds	r0, r5, #0
    392a:	210a      	movs	r1, #10
    392c:	f003 fa2a 	bl	6d84 <__aeabi_idiv>
    3930:	1c05      	adds	r5, r0, #0
    3932:	980a      	ldr	r0, [sp, #40]	; 0x28
    3934:	3801      	subs	r0, #1
    3936:	900a      	str	r0, [sp, #40]	; 0x28
    3938:	2d09      	cmp	r5, #9
    393a:	dcec      	bgt.n	3916 <_svfprintf_r+0x476>
    393c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    393e:	3530      	adds	r5, #48	; 0x30
    3940:	3a01      	subs	r2, #1
    3942:	466b      	mov	r3, sp
    3944:	7015      	strb	r5, [r2, #0]
    3946:	338f      	adds	r3, #143	; 0x8f
    3948:	1c10      	adds	r0, r2, #0
    394a:	4669      	mov	r1, sp
    394c:	319b      	adds	r1, #155	; 0x9b
    394e:	1e5a      	subs	r2, r3, #1
    3950:	3301      	adds	r3, #1
    3952:	4288      	cmp	r0, r1
    3954:	d219      	bcs.n	398a <_svfprintf_r+0x4ea>
    3956:	7801      	ldrb	r1, [r0, #0]
    3958:	1e9a      	subs	r2, r3, #2
    395a:	7011      	strb	r1, [r2, #0]
    395c:	3001      	adds	r0, #1
    395e:	e7f4      	b.n	394a <_svfprintf_r+0x4aa>
	...
    3968:	00007cea 	.word	0x00007cea
    396c:	00007cda 	.word	0x00007cda
    3970:	00007cde 	.word	0x00007cde
    3974:	00007ce2 	.word	0x00007ce2
    3978:	00007ce6 	.word	0x00007ce6
    397c:	2230      	movs	r2, #48	; 0x30
    397e:	466b      	mov	r3, sp
    3980:	338e      	adds	r3, #142	; 0x8e
    3982:	18ad      	adds	r5, r5, r2
    3984:	701a      	strb	r2, [r3, #0]
    3986:	705d      	strb	r5, [r3, #1]
    3988:	aa24      	add	r2, sp, #144	; 0x90
    398a:	ab23      	add	r3, sp, #140	; 0x8c
    398c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    398e:	1ad3      	subs	r3, r2, r3
    3990:	195d      	adds	r5, r3, r5
    3992:	950a      	str	r5, [sp, #40]	; 0x28
    3994:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3996:	931c      	str	r3, [sp, #112]	; 0x70
    3998:	2d01      	cmp	r5, #1
    399a:	dc04      	bgt.n	39a6 <_svfprintf_r+0x506>
    399c:	2500      	movs	r5, #0
    399e:	9511      	str	r5, [sp, #68]	; 0x44
    39a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    39a2:	07ed      	lsls	r5, r5, #31
    39a4:	d536      	bpl.n	3a14 <_svfprintf_r+0x574>
    39a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    39a8:	3501      	adds	r5, #1
    39aa:	950a      	str	r5, [sp, #40]	; 0x28
    39ac:	2500      	movs	r5, #0
    39ae:	9511      	str	r5, [sp, #68]	; 0x44
    39b0:	e030      	b.n	3a14 <_svfprintf_r+0x574>
    39b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    39b4:	2d66      	cmp	r5, #102	; 0x66
    39b6:	d115      	bne.n	39e4 <_svfprintf_r+0x544>
    39b8:	1c13      	adds	r3, r2, #0
    39ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    39bc:	2a00      	cmp	r2, #0
    39be:	dd08      	ble.n	39d2 <_svfprintf_r+0x532>
    39c0:	2d00      	cmp	r5, #0
    39c2:	d102      	bne.n	39ca <_svfprintf_r+0x52a>
    39c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    39c6:	07ed      	lsls	r5, r5, #31
    39c8:	d520      	bpl.n	3a0c <_svfprintf_r+0x56c>
    39ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    39cc:	3301      	adds	r3, #1
    39ce:	18d3      	adds	r3, r2, r3
    39d0:	e01c      	b.n	3a0c <_svfprintf_r+0x56c>
    39d2:	2d00      	cmp	r5, #0
    39d4:	d103      	bne.n	39de <_svfprintf_r+0x53e>
    39d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    39d8:	2301      	movs	r3, #1
    39da:	421d      	tst	r5, r3
    39dc:	d016      	beq.n	3a0c <_svfprintf_r+0x56c>
    39de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    39e0:	3302      	adds	r3, #2
    39e2:	e013      	b.n	3a0c <_svfprintf_r+0x56c>
    39e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    39e6:	1e13      	subs	r3, r2, #0
    39e8:	42ab      	cmp	r3, r5
    39ea:	db06      	blt.n	39fa <_svfprintf_r+0x55a>
    39ec:	2567      	movs	r5, #103	; 0x67
    39ee:	9515      	str	r5, [sp, #84]	; 0x54
    39f0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    39f2:	07ed      	lsls	r5, r5, #31
    39f4:	d50a      	bpl.n	3a0c <_svfprintf_r+0x56c>
    39f6:	1c53      	adds	r3, r2, #1
    39f8:	e008      	b.n	3a0c <_svfprintf_r+0x56c>
    39fa:	2301      	movs	r3, #1
    39fc:	2a00      	cmp	r2, #0
    39fe:	dc01      	bgt.n	3a04 <_svfprintf_r+0x564>
    3a00:	2302      	movs	r3, #2
    3a02:	1a9b      	subs	r3, r3, r2
    3a04:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3a06:	18eb      	adds	r3, r5, r3
    3a08:	2567      	movs	r5, #103	; 0x67
    3a0a:	9515      	str	r5, [sp, #84]	; 0x54
    3a0c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    3a0e:	9211      	str	r2, [sp, #68]	; 0x44
    3a10:	950b      	str	r5, [sp, #44]	; 0x2c
    3a12:	930a      	str	r3, [sp, #40]	; 0x28
    3a14:	981b      	ldr	r0, [sp, #108]	; 0x6c
    3a16:	2500      	movs	r5, #0
    3a18:	42a8      	cmp	r0, r5
    3a1a:	d100      	bne.n	3a1e <_svfprintf_r+0x57e>
    3a1c:	e14e      	b.n	3cbc <_svfprintf_r+0x81c>
    3a1e:	466b      	mov	r3, sp
    3a20:	222d      	movs	r2, #45	; 0x2d
    3a22:	337f      	adds	r3, #127	; 0x7f
    3a24:	701a      	strb	r2, [r3, #0]
    3a26:	e149      	b.n	3cbc <_svfprintf_r+0x81c>
    3a28:	466a      	mov	r2, sp
    3a2a:	327f      	adds	r2, #127	; 0x7f
    3a2c:	7013      	strb	r3, [r2, #0]
    3a2e:	1d3b      	adds	r3, r7, #4
    3a30:	06b1      	lsls	r1, r6, #26
    3a32:	d505      	bpl.n	3a40 <_svfprintf_r+0x5a0>
    3a34:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    3a36:	683a      	ldr	r2, [r7, #0]
    3a38:	17e9      	asrs	r1, r5, #31
    3a3a:	6015      	str	r5, [r2, #0]
    3a3c:	6051      	str	r1, [r2, #4]
    3a3e:	e00a      	b.n	3a56 <_svfprintf_r+0x5b6>
    3a40:	06f0      	lsls	r0, r6, #27
    3a42:	d405      	bmi.n	3a50 <_svfprintf_r+0x5b0>
    3a44:	0670      	lsls	r0, r6, #25
    3a46:	d503      	bpl.n	3a50 <_svfprintf_r+0x5b0>
    3a48:	683a      	ldr	r2, [r7, #0]
    3a4a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    3a4c:	8015      	strh	r5, [r2, #0]
    3a4e:	e002      	b.n	3a56 <_svfprintf_r+0x5b6>
    3a50:	683a      	ldr	r2, [r7, #0]
    3a52:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    3a54:	6015      	str	r5, [r2, #0]
    3a56:	1c1f      	adds	r7, r3, #0
    3a58:	e551      	b.n	34fe <_svfprintf_r+0x5e>
    3a5a:	2310      	movs	r3, #16
    3a5c:	431e      	orrs	r6, r3
    3a5e:	2320      	movs	r3, #32
    3a60:	4033      	ands	r3, r6
    3a62:	d00a      	beq.n	3a7a <_svfprintf_r+0x5da>
    3a64:	1dfb      	adds	r3, r7, #7
    3a66:	2207      	movs	r2, #7
    3a68:	4393      	bics	r3, r2
    3a6a:	6818      	ldr	r0, [r3, #0]
    3a6c:	6859      	ldr	r1, [r3, #4]
    3a6e:	9008      	str	r0, [sp, #32]
    3a70:	9109      	str	r1, [sp, #36]	; 0x24
    3a72:	1c1f      	adds	r7, r3, #0
    3a74:	3708      	adds	r7, #8
    3a76:	2300      	movs	r3, #0
    3a78:	e093      	b.n	3ba2 <_svfprintf_r+0x702>
    3a7a:	2110      	movs	r1, #16
    3a7c:	4031      	ands	r1, r6
    3a7e:	1d3a      	adds	r2, r7, #4
    3a80:	2900      	cmp	r1, #0
    3a82:	d107      	bne.n	3a94 <_svfprintf_r+0x5f4>
    3a84:	2340      	movs	r3, #64	; 0x40
    3a86:	4033      	ands	r3, r6
    3a88:	d004      	beq.n	3a94 <_svfprintf_r+0x5f4>
    3a8a:	883f      	ldrh	r7, [r7, #0]
    3a8c:	9109      	str	r1, [sp, #36]	; 0x24
    3a8e:	9708      	str	r7, [sp, #32]
    3a90:	1c17      	adds	r7, r2, #0
    3a92:	e7f0      	b.n	3a76 <_svfprintf_r+0x5d6>
    3a94:	683f      	ldr	r7, [r7, #0]
    3a96:	9309      	str	r3, [sp, #36]	; 0x24
    3a98:	9708      	str	r7, [sp, #32]
    3a9a:	1c17      	adds	r7, r2, #0
    3a9c:	e081      	b.n	3ba2 <_svfprintf_r+0x702>
    3a9e:	6839      	ldr	r1, [r7, #0]
    3aa0:	2200      	movs	r2, #0
    3aa2:	9108      	str	r1, [sp, #32]
    3aa4:	9209      	str	r2, [sp, #36]	; 0x24
    3aa6:	2130      	movs	r1, #48	; 0x30
    3aa8:	aa20      	add	r2, sp, #128	; 0x80
    3aaa:	4dc2      	ldr	r5, [pc, #776]	; (3db4 <_svfprintf_r+0x914>)
    3aac:	2302      	movs	r3, #2
    3aae:	7011      	strb	r1, [r2, #0]
    3ab0:	2178      	movs	r1, #120	; 0x78
    3ab2:	431e      	orrs	r6, r3
    3ab4:	7051      	strb	r1, [r2, #1]
    3ab6:	3704      	adds	r7, #4
    3ab8:	951d      	str	r5, [sp, #116]	; 0x74
    3aba:	910b      	str	r1, [sp, #44]	; 0x2c
    3abc:	e071      	b.n	3ba2 <_svfprintf_r+0x702>
    3abe:	683b      	ldr	r3, [r7, #0]
    3ac0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3ac2:	930e      	str	r3, [sp, #56]	; 0x38
    3ac4:	980a      	ldr	r0, [sp, #40]	; 0x28
    3ac6:	466b      	mov	r3, sp
    3ac8:	9511      	str	r5, [sp, #68]	; 0x44
    3aca:	337f      	adds	r3, #127	; 0x7f
    3acc:	2500      	movs	r5, #0
    3ace:	3704      	adds	r7, #4
    3ad0:	701d      	strb	r5, [r3, #0]
    3ad2:	42a8      	cmp	r0, r5
    3ad4:	db10      	blt.n	3af8 <_svfprintf_r+0x658>
    3ad6:	980e      	ldr	r0, [sp, #56]	; 0x38
    3ad8:	1c29      	adds	r1, r5, #0
    3ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3adc:	f001 fe96 	bl	580c <memchr>
    3ae0:	42a8      	cmp	r0, r5
    3ae2:	d100      	bne.n	3ae6 <_svfprintf_r+0x646>
    3ae4:	e0e8      	b.n	3cb8 <_svfprintf_r+0x818>
    3ae6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3ae8:	1b40      	subs	r0, r0, r5
    3aea:	9d11      	ldr	r5, [sp, #68]	; 0x44
    3aec:	900a      	str	r0, [sp, #40]	; 0x28
    3aee:	42a8      	cmp	r0, r5
    3af0:	dd00      	ble.n	3af4 <_svfprintf_r+0x654>
    3af2:	950a      	str	r5, [sp, #40]	; 0x28
    3af4:	2500      	movs	r5, #0
    3af6:	e0e0      	b.n	3cba <_svfprintf_r+0x81a>
    3af8:	980e      	ldr	r0, [sp, #56]	; 0x38
    3afa:	f002 fac7 	bl	608c <strlen>
    3afe:	900a      	str	r0, [sp, #40]	; 0x28
    3b00:	e0db      	b.n	3cba <_svfprintf_r+0x81a>
    3b02:	2310      	movs	r3, #16
    3b04:	431e      	orrs	r6, r3
    3b06:	2220      	movs	r2, #32
    3b08:	4032      	ands	r2, r6
    3b0a:	d009      	beq.n	3b20 <_svfprintf_r+0x680>
    3b0c:	1dfb      	adds	r3, r7, #7
    3b0e:	2207      	movs	r2, #7
    3b10:	4393      	bics	r3, r2
    3b12:	1c1f      	adds	r7, r3, #0
    3b14:	6818      	ldr	r0, [r3, #0]
    3b16:	6859      	ldr	r1, [r3, #4]
    3b18:	3708      	adds	r7, #8
    3b1a:	9008      	str	r0, [sp, #32]
    3b1c:	9109      	str	r1, [sp, #36]	; 0x24
    3b1e:	e00f      	b.n	3b40 <_svfprintf_r+0x6a0>
    3b20:	2110      	movs	r1, #16
    3b22:	4031      	ands	r1, r6
    3b24:	1d3b      	adds	r3, r7, #4
    3b26:	2900      	cmp	r1, #0
    3b28:	d106      	bne.n	3b38 <_svfprintf_r+0x698>
    3b2a:	2240      	movs	r2, #64	; 0x40
    3b2c:	4032      	ands	r2, r6
    3b2e:	d003      	beq.n	3b38 <_svfprintf_r+0x698>
    3b30:	883f      	ldrh	r7, [r7, #0]
    3b32:	9109      	str	r1, [sp, #36]	; 0x24
    3b34:	9708      	str	r7, [sp, #32]
    3b36:	e002      	b.n	3b3e <_svfprintf_r+0x69e>
    3b38:	683f      	ldr	r7, [r7, #0]
    3b3a:	9209      	str	r2, [sp, #36]	; 0x24
    3b3c:	9708      	str	r7, [sp, #32]
    3b3e:	1c1f      	adds	r7, r3, #0
    3b40:	2301      	movs	r3, #1
    3b42:	e02e      	b.n	3ba2 <_svfprintf_r+0x702>
    3b44:	466a      	mov	r2, sp
    3b46:	327f      	adds	r2, #127	; 0x7f
    3b48:	4d9a      	ldr	r5, [pc, #616]	; (3db4 <_svfprintf_r+0x914>)
    3b4a:	7013      	strb	r3, [r2, #0]
    3b4c:	2220      	movs	r2, #32
    3b4e:	951d      	str	r5, [sp, #116]	; 0x74
    3b50:	4032      	ands	r2, r6
    3b52:	d009      	beq.n	3b68 <_svfprintf_r+0x6c8>
    3b54:	1dfb      	adds	r3, r7, #7
    3b56:	2207      	movs	r2, #7
    3b58:	4393      	bics	r3, r2
    3b5a:	1c1f      	adds	r7, r3, #0
    3b5c:	6818      	ldr	r0, [r3, #0]
    3b5e:	6859      	ldr	r1, [r3, #4]
    3b60:	3708      	adds	r7, #8
    3b62:	9008      	str	r0, [sp, #32]
    3b64:	9109      	str	r1, [sp, #36]	; 0x24
    3b66:	e00f      	b.n	3b88 <_svfprintf_r+0x6e8>
    3b68:	2110      	movs	r1, #16
    3b6a:	4031      	ands	r1, r6
    3b6c:	1d3b      	adds	r3, r7, #4
    3b6e:	2900      	cmp	r1, #0
    3b70:	d106      	bne.n	3b80 <_svfprintf_r+0x6e0>
    3b72:	2240      	movs	r2, #64	; 0x40
    3b74:	4032      	ands	r2, r6
    3b76:	d003      	beq.n	3b80 <_svfprintf_r+0x6e0>
    3b78:	883f      	ldrh	r7, [r7, #0]
    3b7a:	9109      	str	r1, [sp, #36]	; 0x24
    3b7c:	9708      	str	r7, [sp, #32]
    3b7e:	e002      	b.n	3b86 <_svfprintf_r+0x6e6>
    3b80:	683f      	ldr	r7, [r7, #0]
    3b82:	9209      	str	r2, [sp, #36]	; 0x24
    3b84:	9708      	str	r7, [sp, #32]
    3b86:	1c1f      	adds	r7, r3, #0
    3b88:	2302      	movs	r3, #2
    3b8a:	07f1      	lsls	r1, r6, #31
    3b8c:	d509      	bpl.n	3ba2 <_svfprintf_r+0x702>
    3b8e:	9a08      	ldr	r2, [sp, #32]
    3b90:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3b92:	432a      	orrs	r2, r5
    3b94:	d005      	beq.n	3ba2 <_svfprintf_r+0x702>
    3b96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3b98:	aa20      	add	r2, sp, #128	; 0x80
    3b9a:	2130      	movs	r1, #48	; 0x30
    3b9c:	7011      	strb	r1, [r2, #0]
    3b9e:	7055      	strb	r5, [r2, #1]
    3ba0:	431e      	orrs	r6, r3
    3ba2:	466a      	mov	r2, sp
    3ba4:	2100      	movs	r1, #0
    3ba6:	327f      	adds	r2, #127	; 0x7f
    3ba8:	7011      	strb	r1, [r2, #0]
    3baa:	e000      	b.n	3bae <_svfprintf_r+0x70e>
    3bac:	2301      	movs	r3, #1
    3bae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3bb0:	2d00      	cmp	r5, #0
    3bb2:	db01      	blt.n	3bb8 <_svfprintf_r+0x718>
    3bb4:	2280      	movs	r2, #128	; 0x80
    3bb6:	4396      	bics	r6, r2
    3bb8:	9a08      	ldr	r2, [sp, #32]
    3bba:	9809      	ldr	r0, [sp, #36]	; 0x24
    3bbc:	4302      	orrs	r2, r0
    3bbe:	d102      	bne.n	3bc6 <_svfprintf_r+0x726>
    3bc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3bc2:	2d00      	cmp	r5, #0
    3bc4:	d056      	beq.n	3c74 <_svfprintf_r+0x7d4>
    3bc6:	466d      	mov	r5, sp
    3bc8:	35cf      	adds	r5, #207	; 0xcf
    3bca:	2b01      	cmp	r3, #1
    3bcc:	d01e      	beq.n	3c0c <_svfprintf_r+0x76c>
    3bce:	2b02      	cmp	r3, #2
    3bd0:	d03a      	beq.n	3c48 <_svfprintf_r+0x7a8>
    3bd2:	9808      	ldr	r0, [sp, #32]
    3bd4:	2307      	movs	r3, #7
    3bd6:	4003      	ands	r3, r0
    3bd8:	3330      	adds	r3, #48	; 0x30
    3bda:	9909      	ldr	r1, [sp, #36]	; 0x24
    3bdc:	9a08      	ldr	r2, [sp, #32]
    3bde:	950e      	str	r5, [sp, #56]	; 0x38
    3be0:	702b      	strb	r3, [r5, #0]
    3be2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3be4:	0748      	lsls	r0, r1, #29
    3be6:	08d1      	lsrs	r1, r2, #3
    3be8:	08ea      	lsrs	r2, r5, #3
    3bea:	4308      	orrs	r0, r1
    3bec:	9209      	str	r2, [sp, #36]	; 0x24
    3bee:	9008      	str	r0, [sp, #32]
    3bf0:	1c02      	adds	r2, r0, #0
    3bf2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
    3bf6:	3d01      	subs	r5, #1
    3bf8:	4302      	orrs	r2, r0
    3bfa:	d1ea      	bne.n	3bd2 <_svfprintf_r+0x732>
    3bfc:	07f1      	lsls	r1, r6, #31
    3bfe:	d543      	bpl.n	3c88 <_svfprintf_r+0x7e8>
    3c00:	2b30      	cmp	r3, #48	; 0x30
    3c02:	d041      	beq.n	3c88 <_svfprintf_r+0x7e8>
    3c04:	2230      	movs	r2, #48	; 0x30
    3c06:	950e      	str	r5, [sp, #56]	; 0x38
    3c08:	702a      	strb	r2, [r5, #0]
    3c0a:	e03d      	b.n	3c88 <_svfprintf_r+0x7e8>
    3c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3c0e:	2a00      	cmp	r2, #0
    3c10:	d104      	bne.n	3c1c <_svfprintf_r+0x77c>
    3c12:	9b08      	ldr	r3, [sp, #32]
    3c14:	2b09      	cmp	r3, #9
    3c16:	d801      	bhi.n	3c1c <_svfprintf_r+0x77c>
    3c18:	3330      	adds	r3, #48	; 0x30
    3c1a:	e033      	b.n	3c84 <_svfprintf_r+0x7e4>
    3c1c:	9808      	ldr	r0, [sp, #32]
    3c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
    3c20:	220a      	movs	r2, #10
    3c22:	2300      	movs	r3, #0
    3c24:	950e      	str	r5, [sp, #56]	; 0x38
    3c26:	f7fe f839 	bl	1c9c <__aeabi_uldivmod>
    3c2a:	9808      	ldr	r0, [sp, #32]
    3c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
    3c2e:	3230      	adds	r2, #48	; 0x30
    3c30:	702a      	strb	r2, [r5, #0]
    3c32:	220a      	movs	r2, #10
    3c34:	2300      	movs	r3, #0
    3c36:	f7fe f831 	bl	1c9c <__aeabi_uldivmod>
    3c3a:	1c03      	adds	r3, r0, #0
    3c3c:	9008      	str	r0, [sp, #32]
    3c3e:	9109      	str	r1, [sp, #36]	; 0x24
    3c40:	3d01      	subs	r5, #1
    3c42:	430b      	orrs	r3, r1
    3c44:	d1ea      	bne.n	3c1c <_svfprintf_r+0x77c>
    3c46:	e01f      	b.n	3c88 <_svfprintf_r+0x7e8>
    3c48:	9808      	ldr	r0, [sp, #32]
    3c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3c4c:	991d      	ldr	r1, [sp, #116]	; 0x74
    3c4e:	230f      	movs	r3, #15
    3c50:	4003      	ands	r3, r0
    3c52:	5ccb      	ldrb	r3, [r1, r3]
    3c54:	0711      	lsls	r1, r2, #28
    3c56:	0902      	lsrs	r2, r0, #4
    3c58:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c5a:	702b      	strb	r3, [r5, #0]
    3c5c:	0903      	lsrs	r3, r0, #4
    3c5e:	4311      	orrs	r1, r2
    3c60:	9309      	str	r3, [sp, #36]	; 0x24
    3c62:	9108      	str	r1, [sp, #32]
    3c64:	1c0b      	adds	r3, r1, #0
    3c66:	9909      	ldr	r1, [sp, #36]	; 0x24
    3c68:	950e      	str	r5, [sp, #56]	; 0x38
    3c6a:	430b      	orrs	r3, r1
    3c6c:	3d01      	subs	r5, #1
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d1ea      	bne.n	3c48 <_svfprintf_r+0x7a8>
    3c72:	e009      	b.n	3c88 <_svfprintf_r+0x7e8>
    3c74:	ad34      	add	r5, sp, #208	; 0xd0
    3c76:	950e      	str	r5, [sp, #56]	; 0x38
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d105      	bne.n	3c88 <_svfprintf_r+0x7e8>
    3c7c:	07f0      	lsls	r0, r6, #31
    3c7e:	d503      	bpl.n	3c88 <_svfprintf_r+0x7e8>
    3c80:	3d01      	subs	r5, #1
    3c82:	2330      	movs	r3, #48	; 0x30
    3c84:	702b      	strb	r3, [r5, #0]
    3c86:	950e      	str	r5, [sp, #56]	; 0x38
    3c88:	990e      	ldr	r1, [sp, #56]	; 0x38
    3c8a:	ab34      	add	r3, sp, #208	; 0xd0
    3c8c:	1a5b      	subs	r3, r3, r1
    3c8e:	2200      	movs	r2, #0
    3c90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3c92:	9211      	str	r2, [sp, #68]	; 0x44
    3c94:	930a      	str	r3, [sp, #40]	; 0x28
    3c96:	e011      	b.n	3cbc <_svfprintf_r+0x81c>
    3c98:	466a      	mov	r2, sp
    3c9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3c9c:	327f      	adds	r2, #127	; 0x7f
    3c9e:	7013      	strb	r3, [r2, #0]
    3ca0:	2d00      	cmp	r5, #0
    3ca2:	d100      	bne.n	3ca6 <_svfprintf_r+0x806>
    3ca4:	e392      	b.n	43cc <_svfprintf_r+0xf2c>
    3ca6:	ab2a      	add	r3, sp, #168	; 0xa8
    3ca8:	701d      	strb	r5, [r3, #0]
    3caa:	2001      	movs	r0, #1
    3cac:	2500      	movs	r5, #0
    3cae:	7015      	strb	r5, [r2, #0]
    3cb0:	900a      	str	r0, [sp, #40]	; 0x28
    3cb2:	9511      	str	r5, [sp, #68]	; 0x44
    3cb4:	930e      	str	r3, [sp, #56]	; 0x38
    3cb6:	e001      	b.n	3cbc <_svfprintf_r+0x81c>
    3cb8:	1c05      	adds	r5, r0, #0
    3cba:	9511      	str	r5, [sp, #68]	; 0x44
    3cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
    3cbe:	9113      	str	r1, [sp, #76]	; 0x4c
    3cc0:	42a9      	cmp	r1, r5
    3cc2:	da00      	bge.n	3cc6 <_svfprintf_r+0x826>
    3cc4:	9513      	str	r5, [sp, #76]	; 0x4c
    3cc6:	466b      	mov	r3, sp
    3cc8:	337f      	adds	r3, #127	; 0x7f
    3cca:	781b      	ldrb	r3, [r3, #0]
    3ccc:	1e5a      	subs	r2, r3, #1
    3cce:	4193      	sbcs	r3, r2
    3cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3cd2:	18d2      	adds	r2, r2, r3
    3cd4:	2302      	movs	r3, #2
    3cd6:	4033      	ands	r3, r6
    3cd8:	9213      	str	r2, [sp, #76]	; 0x4c
    3cda:	9315      	str	r3, [sp, #84]	; 0x54
    3cdc:	d001      	beq.n	3ce2 <_svfprintf_r+0x842>
    3cde:	3202      	adds	r2, #2
    3ce0:	9213      	str	r2, [sp, #76]	; 0x4c
    3ce2:	2384      	movs	r3, #132	; 0x84
    3ce4:	4033      	ands	r3, r6
    3ce6:	931b      	str	r3, [sp, #108]	; 0x6c
    3ce8:	d137      	bne.n	3d5a <_svfprintf_r+0x8ba>
    3cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3cec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    3cee:	1a1b      	subs	r3, r3, r0
    3cf0:	930f      	str	r3, [sp, #60]	; 0x3c
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	dd31      	ble.n	3d5a <_svfprintf_r+0x8ba>
    3cf6:	4b30      	ldr	r3, [pc, #192]	; (3db8 <_svfprintf_r+0x918>)
    3cf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3cfa:	6023      	str	r3, [r4, #0]
    3cfc:	2a10      	cmp	r2, #16
    3cfe:	dd18      	ble.n	3d32 <_svfprintf_r+0x892>
    3d00:	2310      	movs	r3, #16
    3d02:	6063      	str	r3, [r4, #4]
    3d04:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3d06:	3310      	adds	r3, #16
    3d08:	9329      	str	r3, [sp, #164]	; 0xa4
    3d0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3d0c:	3301      	adds	r3, #1
    3d0e:	9328      	str	r3, [sp, #160]	; 0xa0
    3d10:	2b07      	cmp	r3, #7
    3d12:	dc01      	bgt.n	3d18 <_svfprintf_r+0x878>
    3d14:	3408      	adds	r4, #8
    3d16:	e008      	b.n	3d2a <_svfprintf_r+0x88a>
    3d18:	980d      	ldr	r0, [sp, #52]	; 0x34
    3d1a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3d1c:	aa27      	add	r2, sp, #156	; 0x9c
    3d1e:	f002 f9bd 	bl	609c <__ssprint_r>
    3d22:	2800      	cmp	r0, #0
    3d24:	d000      	beq.n	3d28 <_svfprintf_r+0x888>
    3d26:	e359      	b.n	43dc <_svfprintf_r+0xf3c>
    3d28:	ac34      	add	r4, sp, #208	; 0xd0
    3d2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3d2c:	3910      	subs	r1, #16
    3d2e:	910f      	str	r1, [sp, #60]	; 0x3c
    3d30:	e7e1      	b.n	3cf6 <_svfprintf_r+0x856>
    3d32:	9829      	ldr	r0, [sp, #164]	; 0xa4
    3d34:	6062      	str	r2, [r4, #4]
    3d36:	1813      	adds	r3, r2, r0
    3d38:	9329      	str	r3, [sp, #164]	; 0xa4
    3d3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3d3c:	3301      	adds	r3, #1
    3d3e:	9328      	str	r3, [sp, #160]	; 0xa0
    3d40:	2b07      	cmp	r3, #7
    3d42:	dc01      	bgt.n	3d48 <_svfprintf_r+0x8a8>
    3d44:	3408      	adds	r4, #8
    3d46:	e008      	b.n	3d5a <_svfprintf_r+0x8ba>
    3d48:	980d      	ldr	r0, [sp, #52]	; 0x34
    3d4a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3d4c:	aa27      	add	r2, sp, #156	; 0x9c
    3d4e:	f002 f9a5 	bl	609c <__ssprint_r>
    3d52:	2800      	cmp	r0, #0
    3d54:	d000      	beq.n	3d58 <_svfprintf_r+0x8b8>
    3d56:	e341      	b.n	43dc <_svfprintf_r+0xf3c>
    3d58:	ac34      	add	r4, sp, #208	; 0xd0
    3d5a:	466b      	mov	r3, sp
    3d5c:	337f      	adds	r3, #127	; 0x7f
    3d5e:	781a      	ldrb	r2, [r3, #0]
    3d60:	2a00      	cmp	r2, #0
    3d62:	d015      	beq.n	3d90 <_svfprintf_r+0x8f0>
    3d64:	6023      	str	r3, [r4, #0]
    3d66:	2301      	movs	r3, #1
    3d68:	6063      	str	r3, [r4, #4]
    3d6a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3d6c:	3301      	adds	r3, #1
    3d6e:	9329      	str	r3, [sp, #164]	; 0xa4
    3d70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3d72:	3301      	adds	r3, #1
    3d74:	9328      	str	r3, [sp, #160]	; 0xa0
    3d76:	2b07      	cmp	r3, #7
    3d78:	dc01      	bgt.n	3d7e <_svfprintf_r+0x8de>
    3d7a:	3408      	adds	r4, #8
    3d7c:	e008      	b.n	3d90 <_svfprintf_r+0x8f0>
    3d7e:	980d      	ldr	r0, [sp, #52]	; 0x34
    3d80:	990c      	ldr	r1, [sp, #48]	; 0x30
    3d82:	aa27      	add	r2, sp, #156	; 0x9c
    3d84:	f002 f98a 	bl	609c <__ssprint_r>
    3d88:	2800      	cmp	r0, #0
    3d8a:	d000      	beq.n	3d8e <_svfprintf_r+0x8ee>
    3d8c:	e326      	b.n	43dc <_svfprintf_r+0xf3c>
    3d8e:	ac34      	add	r4, sp, #208	; 0xd0
    3d90:	9915      	ldr	r1, [sp, #84]	; 0x54
    3d92:	2900      	cmp	r1, #0
    3d94:	d01b      	beq.n	3dce <_svfprintf_r+0x92e>
    3d96:	ab20      	add	r3, sp, #128	; 0x80
    3d98:	6023      	str	r3, [r4, #0]
    3d9a:	2302      	movs	r3, #2
    3d9c:	6063      	str	r3, [r4, #4]
    3d9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3da0:	3302      	adds	r3, #2
    3da2:	9329      	str	r3, [sp, #164]	; 0xa4
    3da4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3da6:	3301      	adds	r3, #1
    3da8:	9328      	str	r3, [sp, #160]	; 0xa0
    3daa:	2b07      	cmp	r3, #7
    3dac:	dc06      	bgt.n	3dbc <_svfprintf_r+0x91c>
    3dae:	3408      	adds	r4, #8
    3db0:	e00d      	b.n	3dce <_svfprintf_r+0x92e>
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	00007cfb 	.word	0x00007cfb
    3db8:	00007cba 	.word	0x00007cba
    3dbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    3dbe:	990c      	ldr	r1, [sp, #48]	; 0x30
    3dc0:	aa27      	add	r2, sp, #156	; 0x9c
    3dc2:	f002 f96b 	bl	609c <__ssprint_r>
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d000      	beq.n	3dcc <_svfprintf_r+0x92c>
    3dca:	e307      	b.n	43dc <_svfprintf_r+0xf3c>
    3dcc:	ac34      	add	r4, sp, #208	; 0xd0
    3dce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    3dd0:	2a80      	cmp	r2, #128	; 0x80
    3dd2:	d138      	bne.n	3e46 <_svfprintf_r+0x9a6>
    3dd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3dd6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    3dd8:	1a1b      	subs	r3, r3, r0
    3dda:	930f      	str	r3, [sp, #60]	; 0x3c
    3ddc:	2b00      	cmp	r3, #0
    3dde:	dd32      	ble.n	3e46 <_svfprintf_r+0x9a6>
    3de0:	4bc9      	ldr	r3, [pc, #804]	; (4108 <_svfprintf_r+0xc68>)
    3de2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3de4:	3310      	adds	r3, #16
    3de6:	6023      	str	r3, [r4, #0]
    3de8:	2a10      	cmp	r2, #16
    3dea:	dd18      	ble.n	3e1e <_svfprintf_r+0x97e>
    3dec:	2310      	movs	r3, #16
    3dee:	6063      	str	r3, [r4, #4]
    3df0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3df2:	3310      	adds	r3, #16
    3df4:	9329      	str	r3, [sp, #164]	; 0xa4
    3df6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3df8:	3301      	adds	r3, #1
    3dfa:	9328      	str	r3, [sp, #160]	; 0xa0
    3dfc:	2b07      	cmp	r3, #7
    3dfe:	dc01      	bgt.n	3e04 <_svfprintf_r+0x964>
    3e00:	3408      	adds	r4, #8
    3e02:	e008      	b.n	3e16 <_svfprintf_r+0x976>
    3e04:	980d      	ldr	r0, [sp, #52]	; 0x34
    3e06:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e08:	aa27      	add	r2, sp, #156	; 0x9c
    3e0a:	f002 f947 	bl	609c <__ssprint_r>
    3e0e:	2800      	cmp	r0, #0
    3e10:	d000      	beq.n	3e14 <_svfprintf_r+0x974>
    3e12:	e2e3      	b.n	43dc <_svfprintf_r+0xf3c>
    3e14:	ac34      	add	r4, sp, #208	; 0xd0
    3e16:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3e18:	3910      	subs	r1, #16
    3e1a:	910f      	str	r1, [sp, #60]	; 0x3c
    3e1c:	e7e0      	b.n	3de0 <_svfprintf_r+0x940>
    3e1e:	9829      	ldr	r0, [sp, #164]	; 0xa4
    3e20:	6062      	str	r2, [r4, #4]
    3e22:	1813      	adds	r3, r2, r0
    3e24:	9329      	str	r3, [sp, #164]	; 0xa4
    3e26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3e28:	3301      	adds	r3, #1
    3e2a:	9328      	str	r3, [sp, #160]	; 0xa0
    3e2c:	2b07      	cmp	r3, #7
    3e2e:	dc01      	bgt.n	3e34 <_svfprintf_r+0x994>
    3e30:	3408      	adds	r4, #8
    3e32:	e008      	b.n	3e46 <_svfprintf_r+0x9a6>
    3e34:	980d      	ldr	r0, [sp, #52]	; 0x34
    3e36:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e38:	aa27      	add	r2, sp, #156	; 0x9c
    3e3a:	f002 f92f 	bl	609c <__ssprint_r>
    3e3e:	2800      	cmp	r0, #0
    3e40:	d000      	beq.n	3e44 <_svfprintf_r+0x9a4>
    3e42:	e2cb      	b.n	43dc <_svfprintf_r+0xf3c>
    3e44:	ac34      	add	r4, sp, #208	; 0xd0
    3e46:	990a      	ldr	r1, [sp, #40]	; 0x28
    3e48:	1a6d      	subs	r5, r5, r1
    3e4a:	2d00      	cmp	r5, #0
    3e4c:	dd2f      	ble.n	3eae <_svfprintf_r+0xa0e>
    3e4e:	4bae      	ldr	r3, [pc, #696]	; (4108 <_svfprintf_r+0xc68>)
    3e50:	3310      	adds	r3, #16
    3e52:	6023      	str	r3, [r4, #0]
    3e54:	2d10      	cmp	r5, #16
    3e56:	dd16      	ble.n	3e86 <_svfprintf_r+0x9e6>
    3e58:	2310      	movs	r3, #16
    3e5a:	6063      	str	r3, [r4, #4]
    3e5c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3e5e:	3310      	adds	r3, #16
    3e60:	9329      	str	r3, [sp, #164]	; 0xa4
    3e62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3e64:	3301      	adds	r3, #1
    3e66:	9328      	str	r3, [sp, #160]	; 0xa0
    3e68:	2b07      	cmp	r3, #7
    3e6a:	dc01      	bgt.n	3e70 <_svfprintf_r+0x9d0>
    3e6c:	3408      	adds	r4, #8
    3e6e:	e008      	b.n	3e82 <_svfprintf_r+0x9e2>
    3e70:	980d      	ldr	r0, [sp, #52]	; 0x34
    3e72:	990c      	ldr	r1, [sp, #48]	; 0x30
    3e74:	aa27      	add	r2, sp, #156	; 0x9c
    3e76:	f002 f911 	bl	609c <__ssprint_r>
    3e7a:	2800      	cmp	r0, #0
    3e7c:	d000      	beq.n	3e80 <_svfprintf_r+0x9e0>
    3e7e:	e2ad      	b.n	43dc <_svfprintf_r+0xf3c>
    3e80:	ac34      	add	r4, sp, #208	; 0xd0
    3e82:	3d10      	subs	r5, #16
    3e84:	e7e3      	b.n	3e4e <_svfprintf_r+0x9ae>
    3e86:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    3e88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3e8a:	6065      	str	r5, [r4, #4]
    3e8c:	3301      	adds	r3, #1
    3e8e:	18ad      	adds	r5, r5, r2
    3e90:	9529      	str	r5, [sp, #164]	; 0xa4
    3e92:	9328      	str	r3, [sp, #160]	; 0xa0
    3e94:	2b07      	cmp	r3, #7
    3e96:	dc01      	bgt.n	3e9c <_svfprintf_r+0x9fc>
    3e98:	3408      	adds	r4, #8
    3e9a:	e008      	b.n	3eae <_svfprintf_r+0xa0e>
    3e9c:	980d      	ldr	r0, [sp, #52]	; 0x34
    3e9e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ea0:	aa27      	add	r2, sp, #156	; 0x9c
    3ea2:	f002 f8fb 	bl	609c <__ssprint_r>
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d000      	beq.n	3eac <_svfprintf_r+0xa0c>
    3eaa:	e297      	b.n	43dc <_svfprintf_r+0xf3c>
    3eac:	ac34      	add	r4, sp, #208	; 0xd0
    3eae:	05f3      	lsls	r3, r6, #23
    3eb0:	d403      	bmi.n	3eba <_svfprintf_r+0xa1a>
    3eb2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3eb4:	6025      	str	r5, [r4, #0]
    3eb6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3eb8:	e0d7      	b.n	406a <_svfprintf_r+0xbca>
    3eba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3ebc:	2d65      	cmp	r5, #101	; 0x65
    3ebe:	dc00      	bgt.n	3ec2 <_svfprintf_r+0xa22>
    3ec0:	e1b7      	b.n	4232 <_svfprintf_r+0xd92>
    3ec2:	9816      	ldr	r0, [sp, #88]	; 0x58
    3ec4:	9918      	ldr	r1, [sp, #96]	; 0x60
    3ec6:	4b8f      	ldr	r3, [pc, #572]	; (4104 <_svfprintf_r+0xc64>)
    3ec8:	4a8d      	ldr	r2, [pc, #564]	; (4100 <_svfprintf_r+0xc60>)
    3eca:	f7fd feb9 	bl	1c40 <__aeabi_dcmpeq>
    3ece:	2800      	cmp	r0, #0
    3ed0:	d05a      	beq.n	3f88 <_svfprintf_r+0xae8>
    3ed2:	4b8e      	ldr	r3, [pc, #568]	; (410c <_svfprintf_r+0xc6c>)
    3ed4:	6023      	str	r3, [r4, #0]
    3ed6:	2301      	movs	r3, #1
    3ed8:	6063      	str	r3, [r4, #4]
    3eda:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3edc:	3301      	adds	r3, #1
    3ede:	9329      	str	r3, [sp, #164]	; 0xa4
    3ee0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3ee2:	3301      	adds	r3, #1
    3ee4:	9328      	str	r3, [sp, #160]	; 0xa0
    3ee6:	2b07      	cmp	r3, #7
    3ee8:	dc01      	bgt.n	3eee <_svfprintf_r+0xa4e>
    3eea:	3408      	adds	r4, #8
    3eec:	e008      	b.n	3f00 <_svfprintf_r+0xa60>
    3eee:	980d      	ldr	r0, [sp, #52]	; 0x34
    3ef0:	990c      	ldr	r1, [sp, #48]	; 0x30
    3ef2:	aa27      	add	r2, sp, #156	; 0x9c
    3ef4:	f002 f8d2 	bl	609c <__ssprint_r>
    3ef8:	2800      	cmp	r0, #0
    3efa:	d000      	beq.n	3efe <_svfprintf_r+0xa5e>
    3efc:	e26e      	b.n	43dc <_svfprintf_r+0xf3c>
    3efe:	ac34      	add	r4, sp, #208	; 0xd0
    3f00:	9821      	ldr	r0, [sp, #132]	; 0x84
    3f02:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3f04:	42a8      	cmp	r0, r5
    3f06:	db02      	blt.n	3f0e <_svfprintf_r+0xa6e>
    3f08:	07f0      	lsls	r0, r6, #31
    3f0a:	d400      	bmi.n	3f0e <_svfprintf_r+0xa6e>
    3f0c:	e214      	b.n	4338 <_svfprintf_r+0xe98>
    3f0e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    3f10:	9829      	ldr	r0, [sp, #164]	; 0xa4
    3f12:	6025      	str	r5, [r4, #0]
    3f14:	9d19      	ldr	r5, [sp, #100]	; 0x64
    3f16:	182b      	adds	r3, r5, r0
    3f18:	9329      	str	r3, [sp, #164]	; 0xa4
    3f1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3f1c:	6065      	str	r5, [r4, #4]
    3f1e:	3301      	adds	r3, #1
    3f20:	9328      	str	r3, [sp, #160]	; 0xa0
    3f22:	2b07      	cmp	r3, #7
    3f24:	dc01      	bgt.n	3f2a <_svfprintf_r+0xa8a>
    3f26:	3408      	adds	r4, #8
    3f28:	e008      	b.n	3f3c <_svfprintf_r+0xa9c>
    3f2a:	980d      	ldr	r0, [sp, #52]	; 0x34
    3f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f2e:	aa27      	add	r2, sp, #156	; 0x9c
    3f30:	f002 f8b4 	bl	609c <__ssprint_r>
    3f34:	2800      	cmp	r0, #0
    3f36:	d000      	beq.n	3f3a <_svfprintf_r+0xa9a>
    3f38:	e250      	b.n	43dc <_svfprintf_r+0xf3c>
    3f3a:	ac34      	add	r4, sp, #208	; 0xd0
    3f3c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3f3e:	3d01      	subs	r5, #1
    3f40:	2d00      	cmp	r5, #0
    3f42:	dc00      	bgt.n	3f46 <_svfprintf_r+0xaa6>
    3f44:	e1f8      	b.n	4338 <_svfprintf_r+0xe98>
    3f46:	4b70      	ldr	r3, [pc, #448]	; (4108 <_svfprintf_r+0xc68>)
    3f48:	3310      	adds	r3, #16
    3f4a:	6023      	str	r3, [r4, #0]
    3f4c:	2d10      	cmp	r5, #16
    3f4e:	dd16      	ble.n	3f7e <_svfprintf_r+0xade>
    3f50:	2310      	movs	r3, #16
    3f52:	6063      	str	r3, [r4, #4]
    3f54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3f56:	3310      	adds	r3, #16
    3f58:	9329      	str	r3, [sp, #164]	; 0xa4
    3f5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3f5c:	3301      	adds	r3, #1
    3f5e:	9328      	str	r3, [sp, #160]	; 0xa0
    3f60:	2b07      	cmp	r3, #7
    3f62:	dc01      	bgt.n	3f68 <_svfprintf_r+0xac8>
    3f64:	3408      	adds	r4, #8
    3f66:	e008      	b.n	3f7a <_svfprintf_r+0xada>
    3f68:	980d      	ldr	r0, [sp, #52]	; 0x34
    3f6a:	990c      	ldr	r1, [sp, #48]	; 0x30
    3f6c:	aa27      	add	r2, sp, #156	; 0x9c
    3f6e:	f002 f895 	bl	609c <__ssprint_r>
    3f72:	2800      	cmp	r0, #0
    3f74:	d000      	beq.n	3f78 <_svfprintf_r+0xad8>
    3f76:	e231      	b.n	43dc <_svfprintf_r+0xf3c>
    3f78:	ac34      	add	r4, sp, #208	; 0xd0
    3f7a:	3d10      	subs	r5, #16
    3f7c:	e7e3      	b.n	3f46 <_svfprintf_r+0xaa6>
    3f7e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    3f80:	6065      	str	r5, [r4, #4]
    3f82:	186d      	adds	r5, r5, r1
    3f84:	9529      	str	r5, [sp, #164]	; 0xa4
    3f86:	e144      	b.n	4212 <_svfprintf_r+0xd72>
    3f88:	9a21      	ldr	r2, [sp, #132]	; 0x84
    3f8a:	2a00      	cmp	r2, #0
    3f8c:	dc71      	bgt.n	4072 <_svfprintf_r+0xbd2>
    3f8e:	4b5f      	ldr	r3, [pc, #380]	; (410c <_svfprintf_r+0xc6c>)
    3f90:	6023      	str	r3, [r4, #0]
    3f92:	2301      	movs	r3, #1
    3f94:	6063      	str	r3, [r4, #4]
    3f96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3f98:	3301      	adds	r3, #1
    3f9a:	9329      	str	r3, [sp, #164]	; 0xa4
    3f9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3f9e:	3301      	adds	r3, #1
    3fa0:	9328      	str	r3, [sp, #160]	; 0xa0
    3fa2:	2b07      	cmp	r3, #7
    3fa4:	dc01      	bgt.n	3faa <_svfprintf_r+0xb0a>
    3fa6:	3408      	adds	r4, #8
    3fa8:	e008      	b.n	3fbc <_svfprintf_r+0xb1c>
    3faa:	980d      	ldr	r0, [sp, #52]	; 0x34
    3fac:	990c      	ldr	r1, [sp, #48]	; 0x30
    3fae:	aa27      	add	r2, sp, #156	; 0x9c
    3fb0:	f002 f874 	bl	609c <__ssprint_r>
    3fb4:	2800      	cmp	r0, #0
    3fb6:	d000      	beq.n	3fba <_svfprintf_r+0xb1a>
    3fb8:	e210      	b.n	43dc <_svfprintf_r+0xf3c>
    3fba:	ac34      	add	r4, sp, #208	; 0xd0
    3fbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d105      	bne.n	3fce <_svfprintf_r+0xb2e>
    3fc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3fc4:	2d00      	cmp	r5, #0
    3fc6:	d102      	bne.n	3fce <_svfprintf_r+0xb2e>
    3fc8:	07f0      	lsls	r0, r6, #31
    3fca:	d400      	bmi.n	3fce <_svfprintf_r+0xb2e>
    3fcc:	e1b4      	b.n	4338 <_svfprintf_r+0xe98>
    3fce:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    3fd0:	9829      	ldr	r0, [sp, #164]	; 0xa4
    3fd2:	6025      	str	r5, [r4, #0]
    3fd4:	9d19      	ldr	r5, [sp, #100]	; 0x64
    3fd6:	182b      	adds	r3, r5, r0
    3fd8:	9329      	str	r3, [sp, #164]	; 0xa4
    3fda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3fdc:	6065      	str	r5, [r4, #4]
    3fde:	3301      	adds	r3, #1
    3fe0:	9328      	str	r3, [sp, #160]	; 0xa0
    3fe2:	2b07      	cmp	r3, #7
    3fe4:	dc01      	bgt.n	3fea <_svfprintf_r+0xb4a>
    3fe6:	3408      	adds	r4, #8
    3fe8:	e008      	b.n	3ffc <_svfprintf_r+0xb5c>
    3fea:	980d      	ldr	r0, [sp, #52]	; 0x34
    3fec:	990c      	ldr	r1, [sp, #48]	; 0x30
    3fee:	aa27      	add	r2, sp, #156	; 0x9c
    3ff0:	f002 f854 	bl	609c <__ssprint_r>
    3ff4:	2800      	cmp	r0, #0
    3ff6:	d000      	beq.n	3ffa <_svfprintf_r+0xb5a>
    3ff8:	e1f0      	b.n	43dc <_svfprintf_r+0xf3c>
    3ffa:	ac34      	add	r4, sp, #208	; 0xd0
    3ffc:	9921      	ldr	r1, [sp, #132]	; 0x84
    3ffe:	424d      	negs	r5, r1
    4000:	2d00      	cmp	r5, #0
    4002:	dd2f      	ble.n	4064 <_svfprintf_r+0xbc4>
    4004:	4b40      	ldr	r3, [pc, #256]	; (4108 <_svfprintf_r+0xc68>)
    4006:	3310      	adds	r3, #16
    4008:	6023      	str	r3, [r4, #0]
    400a:	2d10      	cmp	r5, #16
    400c:	dd16      	ble.n	403c <_svfprintf_r+0xb9c>
    400e:	2310      	movs	r3, #16
    4010:	6063      	str	r3, [r4, #4]
    4012:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4014:	3310      	adds	r3, #16
    4016:	9329      	str	r3, [sp, #164]	; 0xa4
    4018:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    401a:	3301      	adds	r3, #1
    401c:	9328      	str	r3, [sp, #160]	; 0xa0
    401e:	2b07      	cmp	r3, #7
    4020:	dc01      	bgt.n	4026 <_svfprintf_r+0xb86>
    4022:	3408      	adds	r4, #8
    4024:	e008      	b.n	4038 <_svfprintf_r+0xb98>
    4026:	980d      	ldr	r0, [sp, #52]	; 0x34
    4028:	990c      	ldr	r1, [sp, #48]	; 0x30
    402a:	aa27      	add	r2, sp, #156	; 0x9c
    402c:	f002 f836 	bl	609c <__ssprint_r>
    4030:	2800      	cmp	r0, #0
    4032:	d000      	beq.n	4036 <_svfprintf_r+0xb96>
    4034:	e1d2      	b.n	43dc <_svfprintf_r+0xf3c>
    4036:	ac34      	add	r4, sp, #208	; 0xd0
    4038:	3d10      	subs	r5, #16
    403a:	e7e3      	b.n	4004 <_svfprintf_r+0xb64>
    403c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    403e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4040:	6065      	str	r5, [r4, #4]
    4042:	3301      	adds	r3, #1
    4044:	18ad      	adds	r5, r5, r2
    4046:	9529      	str	r5, [sp, #164]	; 0xa4
    4048:	9328      	str	r3, [sp, #160]	; 0xa0
    404a:	2b07      	cmp	r3, #7
    404c:	dc01      	bgt.n	4052 <_svfprintf_r+0xbb2>
    404e:	3408      	adds	r4, #8
    4050:	e008      	b.n	4064 <_svfprintf_r+0xbc4>
    4052:	980d      	ldr	r0, [sp, #52]	; 0x34
    4054:	990c      	ldr	r1, [sp, #48]	; 0x30
    4056:	aa27      	add	r2, sp, #156	; 0x9c
    4058:	f002 f820 	bl	609c <__ssprint_r>
    405c:	2800      	cmp	r0, #0
    405e:	d000      	beq.n	4062 <_svfprintf_r+0xbc2>
    4060:	e1bc      	b.n	43dc <_svfprintf_r+0xf3c>
    4062:	ac34      	add	r4, sp, #208	; 0xd0
    4064:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4066:	6025      	str	r5, [r4, #0]
    4068:	9d10      	ldr	r5, [sp, #64]	; 0x40
    406a:	6065      	str	r5, [r4, #4]
    406c:	9829      	ldr	r0, [sp, #164]	; 0xa4
    406e:	182b      	adds	r3, r5, r0
    4070:	e0ce      	b.n	4210 <_svfprintf_r+0xd70>
    4072:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4074:	9810      	ldr	r0, [sp, #64]	; 0x40
    4076:	990e      	ldr	r1, [sp, #56]	; 0x38
    4078:	9a11      	ldr	r2, [sp, #68]	; 0x44
    407a:	182d      	adds	r5, r5, r0
    407c:	950a      	str	r5, [sp, #40]	; 0x28
    407e:	1a6d      	subs	r5, r5, r1
    4080:	4295      	cmp	r5, r2
    4082:	dd00      	ble.n	4086 <_svfprintf_r+0xbe6>
    4084:	1c15      	adds	r5, r2, #0
    4086:	2d00      	cmp	r5, #0
    4088:	dd15      	ble.n	40b6 <_svfprintf_r+0xc16>
    408a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    408c:	9829      	ldr	r0, [sp, #164]	; 0xa4
    408e:	6023      	str	r3, [r4, #0]
    4090:	182b      	adds	r3, r5, r0
    4092:	9329      	str	r3, [sp, #164]	; 0xa4
    4094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4096:	6065      	str	r5, [r4, #4]
    4098:	3301      	adds	r3, #1
    409a:	9328      	str	r3, [sp, #160]	; 0xa0
    409c:	2b07      	cmp	r3, #7
    409e:	dc01      	bgt.n	40a4 <_svfprintf_r+0xc04>
    40a0:	3408      	adds	r4, #8
    40a2:	e008      	b.n	40b6 <_svfprintf_r+0xc16>
    40a4:	980d      	ldr	r0, [sp, #52]	; 0x34
    40a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    40a8:	aa27      	add	r2, sp, #156	; 0x9c
    40aa:	f001 fff7 	bl	609c <__ssprint_r>
    40ae:	2800      	cmp	r0, #0
    40b0:	d000      	beq.n	40b4 <_svfprintf_r+0xc14>
    40b2:	e193      	b.n	43dc <_svfprintf_r+0xf3c>
    40b4:	ac34      	add	r4, sp, #208	; 0xd0
    40b6:	43eb      	mvns	r3, r5
    40b8:	17db      	asrs	r3, r3, #31
    40ba:	9911      	ldr	r1, [sp, #68]	; 0x44
    40bc:	401d      	ands	r5, r3
    40be:	1b4d      	subs	r5, r1, r5
    40c0:	2d00      	cmp	r5, #0
    40c2:	dd39      	ble.n	4138 <_svfprintf_r+0xc98>
    40c4:	4b10      	ldr	r3, [pc, #64]	; (4108 <_svfprintf_r+0xc68>)
    40c6:	3310      	adds	r3, #16
    40c8:	6023      	str	r3, [r4, #0]
    40ca:	2d10      	cmp	r5, #16
    40cc:	dd20      	ble.n	4110 <_svfprintf_r+0xc70>
    40ce:	2310      	movs	r3, #16
    40d0:	6063      	str	r3, [r4, #4]
    40d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    40d4:	3310      	adds	r3, #16
    40d6:	9329      	str	r3, [sp, #164]	; 0xa4
    40d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    40da:	3301      	adds	r3, #1
    40dc:	9328      	str	r3, [sp, #160]	; 0xa0
    40de:	2b07      	cmp	r3, #7
    40e0:	dc01      	bgt.n	40e6 <_svfprintf_r+0xc46>
    40e2:	3408      	adds	r4, #8
    40e4:	e008      	b.n	40f8 <_svfprintf_r+0xc58>
    40e6:	980d      	ldr	r0, [sp, #52]	; 0x34
    40e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    40ea:	aa27      	add	r2, sp, #156	; 0x9c
    40ec:	f001 ffd6 	bl	609c <__ssprint_r>
    40f0:	2800      	cmp	r0, #0
    40f2:	d000      	beq.n	40f6 <_svfprintf_r+0xc56>
    40f4:	e172      	b.n	43dc <_svfprintf_r+0xf3c>
    40f6:	ac34      	add	r4, sp, #208	; 0xd0
    40f8:	3d10      	subs	r5, #16
    40fa:	e7e3      	b.n	40c4 <_svfprintf_r+0xc24>
    40fc:	46c0      	nop			; (mov r8, r8)
    40fe:	46c0      	nop			; (mov r8, r8)
	...
    4108:	00007cba 	.word	0x00007cba
    410c:	00007d0c 	.word	0x00007d0c
    4110:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    4112:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4114:	6065      	str	r5, [r4, #4]
    4116:	3301      	adds	r3, #1
    4118:	18ad      	adds	r5, r5, r2
    411a:	9529      	str	r5, [sp, #164]	; 0xa4
    411c:	9328      	str	r3, [sp, #160]	; 0xa0
    411e:	2b07      	cmp	r3, #7
    4120:	dc01      	bgt.n	4126 <_svfprintf_r+0xc86>
    4122:	3408      	adds	r4, #8
    4124:	e008      	b.n	4138 <_svfprintf_r+0xc98>
    4126:	980d      	ldr	r0, [sp, #52]	; 0x34
    4128:	990c      	ldr	r1, [sp, #48]	; 0x30
    412a:	aa27      	add	r2, sp, #156	; 0x9c
    412c:	f001 ffb6 	bl	609c <__ssprint_r>
    4130:	2800      	cmp	r0, #0
    4132:	d000      	beq.n	4136 <_svfprintf_r+0xc96>
    4134:	e152      	b.n	43dc <_svfprintf_r+0xf3c>
    4136:	ac34      	add	r4, sp, #208	; 0xd0
    4138:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    413a:	9811      	ldr	r0, [sp, #68]	; 0x44
    413c:	9921      	ldr	r1, [sp, #132]	; 0x84
    413e:	182d      	adds	r5, r5, r0
    4140:	950e      	str	r5, [sp, #56]	; 0x38
    4142:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4144:	42a9      	cmp	r1, r5
    4146:	db01      	blt.n	414c <_svfprintf_r+0xcac>
    4148:	07f0      	lsls	r0, r6, #31
    414a:	d516      	bpl.n	417a <_svfprintf_r+0xcda>
    414c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    414e:	9829      	ldr	r0, [sp, #164]	; 0xa4
    4150:	6025      	str	r5, [r4, #0]
    4152:	9d19      	ldr	r5, [sp, #100]	; 0x64
    4154:	182b      	adds	r3, r5, r0
    4156:	9329      	str	r3, [sp, #164]	; 0xa4
    4158:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    415a:	6065      	str	r5, [r4, #4]
    415c:	3301      	adds	r3, #1
    415e:	9328      	str	r3, [sp, #160]	; 0xa0
    4160:	2b07      	cmp	r3, #7
    4162:	dc01      	bgt.n	4168 <_svfprintf_r+0xcc8>
    4164:	3408      	adds	r4, #8
    4166:	e008      	b.n	417a <_svfprintf_r+0xcda>
    4168:	980d      	ldr	r0, [sp, #52]	; 0x34
    416a:	990c      	ldr	r1, [sp, #48]	; 0x30
    416c:	aa27      	add	r2, sp, #156	; 0x9c
    416e:	f001 ff95 	bl	609c <__ssprint_r>
    4172:	2800      	cmp	r0, #0
    4174:	d000      	beq.n	4178 <_svfprintf_r+0xcd8>
    4176:	e131      	b.n	43dc <_svfprintf_r+0xf3c>
    4178:	ac34      	add	r4, sp, #208	; 0xd0
    417a:	9d10      	ldr	r5, [sp, #64]	; 0x40
    417c:	9821      	ldr	r0, [sp, #132]	; 0x84
    417e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4182:	1a2b      	subs	r3, r5, r0
    4184:	1a8d      	subs	r5, r1, r2
    4186:	429d      	cmp	r5, r3
    4188:	dd00      	ble.n	418c <_svfprintf_r+0xcec>
    418a:	1c1d      	adds	r5, r3, #0
    418c:	2d00      	cmp	r5, #0
    418e:	dd15      	ble.n	41bc <_svfprintf_r+0xd1c>
    4190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4192:	9829      	ldr	r0, [sp, #164]	; 0xa4
    4194:	6023      	str	r3, [r4, #0]
    4196:	182b      	adds	r3, r5, r0
    4198:	9329      	str	r3, [sp, #164]	; 0xa4
    419a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    419c:	6065      	str	r5, [r4, #4]
    419e:	3301      	adds	r3, #1
    41a0:	9328      	str	r3, [sp, #160]	; 0xa0
    41a2:	2b07      	cmp	r3, #7
    41a4:	dc01      	bgt.n	41aa <_svfprintf_r+0xd0a>
    41a6:	3408      	adds	r4, #8
    41a8:	e008      	b.n	41bc <_svfprintf_r+0xd1c>
    41aa:	980d      	ldr	r0, [sp, #52]	; 0x34
    41ac:	990c      	ldr	r1, [sp, #48]	; 0x30
    41ae:	aa27      	add	r2, sp, #156	; 0x9c
    41b0:	f001 ff74 	bl	609c <__ssprint_r>
    41b4:	2800      	cmp	r0, #0
    41b6:	d000      	beq.n	41ba <_svfprintf_r+0xd1a>
    41b8:	e110      	b.n	43dc <_svfprintf_r+0xf3c>
    41ba:	ac34      	add	r4, sp, #208	; 0xd0
    41bc:	43eb      	mvns	r3, r5
    41be:	1c2a      	adds	r2, r5, #0
    41c0:	9821      	ldr	r0, [sp, #132]	; 0x84
    41c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
    41c4:	17db      	asrs	r3, r3, #31
    41c6:	401a      	ands	r2, r3
    41c8:	1a2b      	subs	r3, r5, r0
    41ca:	1a9d      	subs	r5, r3, r2
    41cc:	2d00      	cmp	r5, #0
    41ce:	dc00      	bgt.n	41d2 <_svfprintf_r+0xd32>
    41d0:	e0b2      	b.n	4338 <_svfprintf_r+0xe98>
    41d2:	4b89      	ldr	r3, [pc, #548]	; (43f8 <_svfprintf_r+0xf58>)
    41d4:	3310      	adds	r3, #16
    41d6:	6023      	str	r3, [r4, #0]
    41d8:	2d10      	cmp	r5, #16
    41da:	dd16      	ble.n	420a <_svfprintf_r+0xd6a>
    41dc:	2310      	movs	r3, #16
    41de:	6063      	str	r3, [r4, #4]
    41e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    41e2:	3310      	adds	r3, #16
    41e4:	9329      	str	r3, [sp, #164]	; 0xa4
    41e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    41e8:	3301      	adds	r3, #1
    41ea:	9328      	str	r3, [sp, #160]	; 0xa0
    41ec:	2b07      	cmp	r3, #7
    41ee:	dc01      	bgt.n	41f4 <_svfprintf_r+0xd54>
    41f0:	3408      	adds	r4, #8
    41f2:	e008      	b.n	4206 <_svfprintf_r+0xd66>
    41f4:	980d      	ldr	r0, [sp, #52]	; 0x34
    41f6:	990c      	ldr	r1, [sp, #48]	; 0x30
    41f8:	aa27      	add	r2, sp, #156	; 0x9c
    41fa:	f001 ff4f 	bl	609c <__ssprint_r>
    41fe:	2800      	cmp	r0, #0
    4200:	d000      	beq.n	4204 <_svfprintf_r+0xd64>
    4202:	e0eb      	b.n	43dc <_svfprintf_r+0xf3c>
    4204:	ac34      	add	r4, sp, #208	; 0xd0
    4206:	3d10      	subs	r5, #16
    4208:	e7e3      	b.n	41d2 <_svfprintf_r+0xd32>
    420a:	9929      	ldr	r1, [sp, #164]	; 0xa4
    420c:	6065      	str	r5, [r4, #4]
    420e:	186b      	adds	r3, r5, r1
    4210:	9329      	str	r3, [sp, #164]	; 0xa4
    4212:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4214:	3301      	adds	r3, #1
    4216:	9328      	str	r3, [sp, #160]	; 0xa0
    4218:	2b07      	cmp	r3, #7
    421a:	dc00      	bgt.n	421e <_svfprintf_r+0xd7e>
    421c:	e08b      	b.n	4336 <_svfprintf_r+0xe96>
    421e:	980d      	ldr	r0, [sp, #52]	; 0x34
    4220:	990c      	ldr	r1, [sp, #48]	; 0x30
    4222:	aa27      	add	r2, sp, #156	; 0x9c
    4224:	f001 ff3a 	bl	609c <__ssprint_r>
    4228:	2800      	cmp	r0, #0
    422a:	d000      	beq.n	422e <_svfprintf_r+0xd8e>
    422c:	e0d6      	b.n	43dc <_svfprintf_r+0xf3c>
    422e:	ac34      	add	r4, sp, #208	; 0xd0
    4230:	e082      	b.n	4338 <_svfprintf_r+0xe98>
    4232:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4234:	2d01      	cmp	r5, #1
    4236:	dc02      	bgt.n	423e <_svfprintf_r+0xd9e>
    4238:	2301      	movs	r3, #1
    423a:	421e      	tst	r6, r3
    423c:	d06f      	beq.n	431e <_svfprintf_r+0xe7e>
    423e:	2301      	movs	r3, #1
    4240:	6063      	str	r3, [r4, #4]
    4242:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4244:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4246:	3301      	adds	r3, #1
    4248:	9329      	str	r3, [sp, #164]	; 0xa4
    424a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    424c:	6025      	str	r5, [r4, #0]
    424e:	3301      	adds	r3, #1
    4250:	9328      	str	r3, [sp, #160]	; 0xa0
    4252:	2b07      	cmp	r3, #7
    4254:	dc01      	bgt.n	425a <_svfprintf_r+0xdba>
    4256:	3408      	adds	r4, #8
    4258:	e008      	b.n	426c <_svfprintf_r+0xdcc>
    425a:	980d      	ldr	r0, [sp, #52]	; 0x34
    425c:	990c      	ldr	r1, [sp, #48]	; 0x30
    425e:	aa27      	add	r2, sp, #156	; 0x9c
    4260:	f001 ff1c 	bl	609c <__ssprint_r>
    4264:	2800      	cmp	r0, #0
    4266:	d000      	beq.n	426a <_svfprintf_r+0xdca>
    4268:	e0b8      	b.n	43dc <_svfprintf_r+0xf3c>
    426a:	ac34      	add	r4, sp, #208	; 0xd0
    426c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    426e:	9829      	ldr	r0, [sp, #164]	; 0xa4
    4270:	6025      	str	r5, [r4, #0]
    4272:	9d19      	ldr	r5, [sp, #100]	; 0x64
    4274:	182b      	adds	r3, r5, r0
    4276:	9329      	str	r3, [sp, #164]	; 0xa4
    4278:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    427a:	6065      	str	r5, [r4, #4]
    427c:	3301      	adds	r3, #1
    427e:	9328      	str	r3, [sp, #160]	; 0xa0
    4280:	2b07      	cmp	r3, #7
    4282:	dc01      	bgt.n	4288 <_svfprintf_r+0xde8>
    4284:	3408      	adds	r4, #8
    4286:	e008      	b.n	429a <_svfprintf_r+0xdfa>
    4288:	980d      	ldr	r0, [sp, #52]	; 0x34
    428a:	990c      	ldr	r1, [sp, #48]	; 0x30
    428c:	aa27      	add	r2, sp, #156	; 0x9c
    428e:	f001 ff05 	bl	609c <__ssprint_r>
    4292:	2800      	cmp	r0, #0
    4294:	d000      	beq.n	4298 <_svfprintf_r+0xdf8>
    4296:	e0a1      	b.n	43dc <_svfprintf_r+0xf3c>
    4298:	ac34      	add	r4, sp, #208	; 0xd0
    429a:	9816      	ldr	r0, [sp, #88]	; 0x58
    429c:	9918      	ldr	r1, [sp, #96]	; 0x60
    429e:	4b55      	ldr	r3, [pc, #340]	; (43f4 <_svfprintf_r+0xf54>)
    42a0:	4a53      	ldr	r2, [pc, #332]	; (43f0 <_svfprintf_r+0xf50>)
    42a2:	f7fd fccd 	bl	1c40 <__aeabi_dcmpeq>
    42a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
    42a8:	3d01      	subs	r5, #1
    42aa:	2800      	cmp	r0, #0
    42ac:	d108      	bne.n	42c0 <_svfprintf_r+0xe20>
    42ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    42b0:	6065      	str	r5, [r4, #4]
    42b2:	3301      	adds	r3, #1
    42b4:	6023      	str	r3, [r4, #0]
    42b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    42b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    42ba:	3b01      	subs	r3, #1
    42bc:	195b      	adds	r3, r3, r5
    42be:	e033      	b.n	4328 <_svfprintf_r+0xe88>
    42c0:	2d00      	cmp	r5, #0
    42c2:	dd34      	ble.n	432e <_svfprintf_r+0xe8e>
    42c4:	4b4c      	ldr	r3, [pc, #304]	; (43f8 <_svfprintf_r+0xf58>)
    42c6:	3310      	adds	r3, #16
    42c8:	6023      	str	r3, [r4, #0]
    42ca:	2d10      	cmp	r5, #16
    42cc:	dd15      	ble.n	42fa <_svfprintf_r+0xe5a>
    42ce:	2310      	movs	r3, #16
    42d0:	6063      	str	r3, [r4, #4]
    42d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    42d4:	3310      	adds	r3, #16
    42d6:	9329      	str	r3, [sp, #164]	; 0xa4
    42d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    42da:	3301      	adds	r3, #1
    42dc:	9328      	str	r3, [sp, #160]	; 0xa0
    42de:	2b07      	cmp	r3, #7
    42e0:	dc01      	bgt.n	42e6 <_svfprintf_r+0xe46>
    42e2:	3408      	adds	r4, #8
    42e4:	e007      	b.n	42f6 <_svfprintf_r+0xe56>
    42e6:	980d      	ldr	r0, [sp, #52]	; 0x34
    42e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    42ea:	aa27      	add	r2, sp, #156	; 0x9c
    42ec:	f001 fed6 	bl	609c <__ssprint_r>
    42f0:	2800      	cmp	r0, #0
    42f2:	d173      	bne.n	43dc <_svfprintf_r+0xf3c>
    42f4:	ac34      	add	r4, sp, #208	; 0xd0
    42f6:	3d10      	subs	r5, #16
    42f8:	e7e4      	b.n	42c4 <_svfprintf_r+0xe24>
    42fa:	9829      	ldr	r0, [sp, #164]	; 0xa4
    42fc:	6065      	str	r5, [r4, #4]
    42fe:	182d      	adds	r5, r5, r0
    4300:	9529      	str	r5, [sp, #164]	; 0xa4
    4302:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4304:	3301      	adds	r3, #1
    4306:	9328      	str	r3, [sp, #160]	; 0xa0
    4308:	2b07      	cmp	r3, #7
    430a:	dd0f      	ble.n	432c <_svfprintf_r+0xe8c>
    430c:	980d      	ldr	r0, [sp, #52]	; 0x34
    430e:	990c      	ldr	r1, [sp, #48]	; 0x30
    4310:	aa27      	add	r2, sp, #156	; 0x9c
    4312:	f001 fec3 	bl	609c <__ssprint_r>
    4316:	2800      	cmp	r0, #0
    4318:	d160      	bne.n	43dc <_svfprintf_r+0xf3c>
    431a:	ac34      	add	r4, sp, #208	; 0xd0
    431c:	e007      	b.n	432e <_svfprintf_r+0xe8e>
    431e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4320:	6063      	str	r3, [r4, #4]
    4322:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4324:	6025      	str	r5, [r4, #0]
    4326:	3301      	adds	r3, #1
    4328:	9329      	str	r3, [sp, #164]	; 0xa4
    432a:	e7ea      	b.n	4302 <_svfprintf_r+0xe62>
    432c:	3408      	adds	r4, #8
    432e:	ab23      	add	r3, sp, #140	; 0x8c
    4330:	6023      	str	r3, [r4, #0]
    4332:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    4334:	e699      	b.n	406a <_svfprintf_r+0xbca>
    4336:	3408      	adds	r4, #8
    4338:	0771      	lsls	r1, r6, #29
    433a:	d40b      	bmi.n	4354 <_svfprintf_r+0xeb4>
    433c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    433e:	9d14      	ldr	r5, [sp, #80]	; 0x50
    4340:	42ab      	cmp	r3, r5
    4342:	da00      	bge.n	4346 <_svfprintf_r+0xea6>
    4344:	1c2b      	adds	r3, r5, #0
    4346:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    4348:	9829      	ldr	r0, [sp, #164]	; 0xa4
    434a:	18ed      	adds	r5, r5, r3
    434c:	9517      	str	r5, [sp, #92]	; 0x5c
    434e:	2800      	cmp	r0, #0
    4350:	d037      	beq.n	43c2 <_svfprintf_r+0xf22>
    4352:	e02f      	b.n	43b4 <_svfprintf_r+0xf14>
    4354:	9914      	ldr	r1, [sp, #80]	; 0x50
    4356:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4358:	1a8d      	subs	r5, r1, r2
    435a:	2d00      	cmp	r5, #0
    435c:	ddee      	ble.n	433c <_svfprintf_r+0xe9c>
    435e:	4b26      	ldr	r3, [pc, #152]	; (43f8 <_svfprintf_r+0xf58>)
    4360:	6023      	str	r3, [r4, #0]
    4362:	2d10      	cmp	r5, #16
    4364:	dd15      	ble.n	4392 <_svfprintf_r+0xef2>
    4366:	2310      	movs	r3, #16
    4368:	6063      	str	r3, [r4, #4]
    436a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    436c:	3310      	adds	r3, #16
    436e:	9329      	str	r3, [sp, #164]	; 0xa4
    4370:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    4372:	3301      	adds	r3, #1
    4374:	9328      	str	r3, [sp, #160]	; 0xa0
    4376:	2b07      	cmp	r3, #7
    4378:	dc01      	bgt.n	437e <_svfprintf_r+0xede>
    437a:	3408      	adds	r4, #8
    437c:	e007      	b.n	438e <_svfprintf_r+0xeee>
    437e:	980d      	ldr	r0, [sp, #52]	; 0x34
    4380:	990c      	ldr	r1, [sp, #48]	; 0x30
    4382:	aa27      	add	r2, sp, #156	; 0x9c
    4384:	f001 fe8a 	bl	609c <__ssprint_r>
    4388:	2800      	cmp	r0, #0
    438a:	d127      	bne.n	43dc <_svfprintf_r+0xf3c>
    438c:	ac34      	add	r4, sp, #208	; 0xd0
    438e:	3d10      	subs	r5, #16
    4390:	e7e5      	b.n	435e <_svfprintf_r+0xebe>
    4392:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4394:	6065      	str	r5, [r4, #4]
    4396:	18ed      	adds	r5, r5, r3
    4398:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    439a:	9529      	str	r5, [sp, #164]	; 0xa4
    439c:	3301      	adds	r3, #1
    439e:	9328      	str	r3, [sp, #160]	; 0xa0
    43a0:	2b07      	cmp	r3, #7
    43a2:	ddcb      	ble.n	433c <_svfprintf_r+0xe9c>
    43a4:	980d      	ldr	r0, [sp, #52]	; 0x34
    43a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    43a8:	aa27      	add	r2, sp, #156	; 0x9c
    43aa:	f001 fe77 	bl	609c <__ssprint_r>
    43ae:	2800      	cmp	r0, #0
    43b0:	d0c4      	beq.n	433c <_svfprintf_r+0xe9c>
    43b2:	e013      	b.n	43dc <_svfprintf_r+0xf3c>
    43b4:	980d      	ldr	r0, [sp, #52]	; 0x34
    43b6:	990c      	ldr	r1, [sp, #48]	; 0x30
    43b8:	aa27      	add	r2, sp, #156	; 0x9c
    43ba:	f001 fe6f 	bl	609c <__ssprint_r>
    43be:	2800      	cmp	r0, #0
    43c0:	d10c      	bne.n	43dc <_svfprintf_r+0xf3c>
    43c2:	2300      	movs	r3, #0
    43c4:	9328      	str	r3, [sp, #160]	; 0xa0
    43c6:	ac34      	add	r4, sp, #208	; 0xd0
    43c8:	f7ff f899 	bl	34fe <_svfprintf_r+0x5e>
    43cc:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    43ce:	2d00      	cmp	r5, #0
    43d0:	d004      	beq.n	43dc <_svfprintf_r+0xf3c>
    43d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    43d4:	990c      	ldr	r1, [sp, #48]	; 0x30
    43d6:	aa27      	add	r2, sp, #156	; 0x9c
    43d8:	f001 fe60 	bl	609c <__ssprint_r>
    43dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    43de:	9817      	ldr	r0, [sp, #92]	; 0x5c
    43e0:	89ab      	ldrh	r3, [r5, #12]
    43e2:	0659      	lsls	r1, r3, #25
    43e4:	d501      	bpl.n	43ea <_svfprintf_r+0xf4a>
    43e6:	2001      	movs	r0, #1
    43e8:	4240      	negs	r0, r0
    43ea:	b045      	add	sp, #276	; 0x114
    43ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43ee:	46c0      	nop			; (mov r8, r8)
	...
    43f8:	00007cba 	.word	0x00007cba
    43fc:	46c0      	nop			; (mov r8, r8)
    43fe:	46c0      	nop			; (mov r8, r8)

00004400 <__register_exitproc>:
    4400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4402:	1c1e      	adds	r6, r3, #0
    4404:	4b23      	ldr	r3, [pc, #140]	; (4494 <__register_exitproc+0x94>)
    4406:	1c05      	adds	r5, r0, #0
    4408:	681b      	ldr	r3, [r3, #0]
    440a:	9101      	str	r1, [sp, #4]
    440c:	1c1c      	adds	r4, r3, #0
    440e:	34fc      	adds	r4, #252	; 0xfc
    4410:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    4412:	1c17      	adds	r7, r2, #0
    4414:	2800      	cmp	r0, #0
    4416:	d103      	bne.n	4420 <__register_exitproc+0x20>
    4418:	22a6      	movs	r2, #166	; 0xa6
    441a:	0052      	lsls	r2, r2, #1
    441c:	1898      	adds	r0, r3, r2
    441e:	64e0      	str	r0, [r4, #76]	; 0x4c
    4420:	6843      	ldr	r3, [r0, #4]
    4422:	2b1f      	cmp	r3, #31
    4424:	dd16      	ble.n	4454 <__register_exitproc+0x54>
    4426:	4b1c      	ldr	r3, [pc, #112]	; (4498 <__register_exitproc+0x98>)
    4428:	2b00      	cmp	r3, #0
    442a:	d102      	bne.n	4432 <__register_exitproc+0x32>
    442c:	2001      	movs	r0, #1
    442e:	4240      	negs	r0, r0
    4430:	e02e      	b.n	4490 <__register_exitproc+0x90>
    4432:	20c8      	movs	r0, #200	; 0xc8
    4434:	0040      	lsls	r0, r0, #1
    4436:	e000      	b.n	443a <__register_exitproc+0x3a>
    4438:	bf00      	nop
    443a:	2800      	cmp	r0, #0
    443c:	d0f6      	beq.n	442c <__register_exitproc+0x2c>
    443e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    4440:	2300      	movs	r3, #0
    4442:	6002      	str	r2, [r0, #0]
    4444:	22c4      	movs	r2, #196	; 0xc4
    4446:	0052      	lsls	r2, r2, #1
    4448:	6043      	str	r3, [r0, #4]
    444a:	64e0      	str	r0, [r4, #76]	; 0x4c
    444c:	5083      	str	r3, [r0, r2]
    444e:	22c6      	movs	r2, #198	; 0xc6
    4450:	0052      	lsls	r2, r2, #1
    4452:	5083      	str	r3, [r0, r2]
    4454:	6843      	ldr	r3, [r0, #4]
    4456:	2d00      	cmp	r5, #0
    4458:	d013      	beq.n	4482 <__register_exitproc+0x82>
    445a:	009c      	lsls	r4, r3, #2
    445c:	1904      	adds	r4, r0, r4
    445e:	1c22      	adds	r2, r4, #0
    4460:	3288      	adds	r2, #136	; 0x88
    4462:	6017      	str	r7, [r2, #0]
    4464:	27c2      	movs	r7, #194	; 0xc2
    4466:	007f      	lsls	r7, r7, #1
    4468:	19c2      	adds	r2, r0, r7
    446a:	6857      	ldr	r7, [r2, #4]
    446c:	2101      	movs	r1, #1
    446e:	4099      	lsls	r1, r3
    4470:	430f      	orrs	r7, r1
    4472:	34fc      	adds	r4, #252	; 0xfc
    4474:	6057      	str	r7, [r2, #4]
    4476:	60e6      	str	r6, [r4, #12]
    4478:	2d02      	cmp	r5, #2
    447a:	d102      	bne.n	4482 <__register_exitproc+0x82>
    447c:	6894      	ldr	r4, [r2, #8]
    447e:	4321      	orrs	r1, r4
    4480:	6091      	str	r1, [r2, #8]
    4482:	1c5a      	adds	r2, r3, #1
    4484:	9f01      	ldr	r7, [sp, #4]
    4486:	3302      	adds	r3, #2
    4488:	009b      	lsls	r3, r3, #2
    448a:	6042      	str	r2, [r0, #4]
    448c:	501f      	str	r7, [r3, r0]
    448e:	2000      	movs	r0, #0
    4490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	00007cb4 	.word	0x00007cb4
    4498:	00000000 	.word	0x00000000

0000449c <register_fini>:
    449c:	b508      	push	{r3, lr}
    449e:	4b03      	ldr	r3, [pc, #12]	; (44ac <register_fini+0x10>)
    44a0:	2b00      	cmp	r3, #0
    44a2:	d002      	beq.n	44aa <register_fini+0xe>
    44a4:	4802      	ldr	r0, [pc, #8]	; (44b0 <register_fini+0x14>)
    44a6:	f7fe ff63 	bl	3370 <atexit>
    44aa:	bd08      	pop	{r3, pc}
    44ac:	00000000 	.word	0x00000000
    44b0:	00003381 	.word	0x00003381
    44b4:	00000000 	.word	0x00000000

000044b8 <quorem>:
    44b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ba:	b089      	sub	sp, #36	; 0x24
    44bc:	9106      	str	r1, [sp, #24]
    44be:	690b      	ldr	r3, [r1, #16]
    44c0:	6901      	ldr	r1, [r0, #16]
    44c2:	1c05      	adds	r5, r0, #0
    44c4:	2600      	movs	r6, #0
    44c6:	4299      	cmp	r1, r3
    44c8:	db7f      	blt.n	45ca <quorem+0x112>
    44ca:	9c06      	ldr	r4, [sp, #24]
    44cc:	1e5f      	subs	r7, r3, #1
    44ce:	3414      	adds	r4, #20
    44d0:	9404      	str	r4, [sp, #16]
    44d2:	9904      	ldr	r1, [sp, #16]
    44d4:	00bc      	lsls	r4, r7, #2
    44d6:	1909      	adds	r1, r1, r4
    44d8:	1c02      	adds	r2, r0, #0
    44da:	680b      	ldr	r3, [r1, #0]
    44dc:	3214      	adds	r2, #20
    44de:	9105      	str	r1, [sp, #20]
    44e0:	1914      	adds	r4, r2, r4
    44e2:	1c19      	adds	r1, r3, #0
    44e4:	3101      	adds	r1, #1
    44e6:	6820      	ldr	r0, [r4, #0]
    44e8:	9203      	str	r2, [sp, #12]
    44ea:	f7fd fb49 	bl	1b80 <__aeabi_uidiv>
    44ee:	9002      	str	r0, [sp, #8]
    44f0:	42b0      	cmp	r0, r6
    44f2:	d038      	beq.n	4566 <quorem+0xae>
    44f4:	9904      	ldr	r1, [sp, #16]
    44f6:	9b03      	ldr	r3, [sp, #12]
    44f8:	468c      	mov	ip, r1
    44fa:	9601      	str	r6, [sp, #4]
    44fc:	9607      	str	r6, [sp, #28]
    44fe:	4662      	mov	r2, ip
    4500:	3204      	adds	r2, #4
    4502:	4694      	mov	ip, r2
    4504:	3a04      	subs	r2, #4
    4506:	ca40      	ldmia	r2!, {r6}
    4508:	9902      	ldr	r1, [sp, #8]
    450a:	b2b0      	uxth	r0, r6
    450c:	4348      	muls	r0, r1
    450e:	0c31      	lsrs	r1, r6, #16
    4510:	9e02      	ldr	r6, [sp, #8]
    4512:	9a01      	ldr	r2, [sp, #4]
    4514:	4371      	muls	r1, r6
    4516:	1810      	adds	r0, r2, r0
    4518:	0c02      	lsrs	r2, r0, #16
    451a:	1851      	adds	r1, r2, r1
    451c:	0c0a      	lsrs	r2, r1, #16
    451e:	9201      	str	r2, [sp, #4]
    4520:	681a      	ldr	r2, [r3, #0]
    4522:	b280      	uxth	r0, r0
    4524:	b296      	uxth	r6, r2
    4526:	9a07      	ldr	r2, [sp, #28]
    4528:	b289      	uxth	r1, r1
    452a:	18b6      	adds	r6, r6, r2
    452c:	1a30      	subs	r0, r6, r0
    452e:	681e      	ldr	r6, [r3, #0]
    4530:	0c32      	lsrs	r2, r6, #16
    4532:	1a52      	subs	r2, r2, r1
    4534:	1406      	asrs	r6, r0, #16
    4536:	1992      	adds	r2, r2, r6
    4538:	1411      	asrs	r1, r2, #16
    453a:	b280      	uxth	r0, r0
    453c:	0412      	lsls	r2, r2, #16
    453e:	9e05      	ldr	r6, [sp, #20]
    4540:	4310      	orrs	r0, r2
    4542:	9107      	str	r1, [sp, #28]
    4544:	c301      	stmia	r3!, {r0}
    4546:	4566      	cmp	r6, ip
    4548:	d2d9      	bcs.n	44fe <quorem+0x46>
    454a:	6821      	ldr	r1, [r4, #0]
    454c:	2900      	cmp	r1, #0
    454e:	d10a      	bne.n	4566 <quorem+0xae>
    4550:	9e03      	ldr	r6, [sp, #12]
    4552:	3c04      	subs	r4, #4
    4554:	42b4      	cmp	r4, r6
    4556:	d801      	bhi.n	455c <quorem+0xa4>
    4558:	612f      	str	r7, [r5, #16]
    455a:	e004      	b.n	4566 <quorem+0xae>
    455c:	6821      	ldr	r1, [r4, #0]
    455e:	2900      	cmp	r1, #0
    4560:	d1fa      	bne.n	4558 <quorem+0xa0>
    4562:	3f01      	subs	r7, #1
    4564:	e7f4      	b.n	4550 <quorem+0x98>
    4566:	1c28      	adds	r0, r5, #0
    4568:	9906      	ldr	r1, [sp, #24]
    456a:	f001 fb81 	bl	5c70 <__mcmp>
    456e:	2800      	cmp	r0, #0
    4570:	db2a      	blt.n	45c8 <quorem+0x110>
    4572:	9c02      	ldr	r4, [sp, #8]
    4574:	9a03      	ldr	r2, [sp, #12]
    4576:	3401      	adds	r4, #1
    4578:	9b04      	ldr	r3, [sp, #16]
    457a:	9402      	str	r4, [sp, #8]
    457c:	2400      	movs	r4, #0
    457e:	6811      	ldr	r1, [r2, #0]
    4580:	cb40      	ldmia	r3!, {r6}
    4582:	b288      	uxth	r0, r1
    4584:	1900      	adds	r0, r0, r4
    4586:	6814      	ldr	r4, [r2, #0]
    4588:	b2b1      	uxth	r1, r6
    458a:	1a40      	subs	r0, r0, r1
    458c:	0c36      	lsrs	r6, r6, #16
    458e:	0c21      	lsrs	r1, r4, #16
    4590:	1b89      	subs	r1, r1, r6
    4592:	1404      	asrs	r4, r0, #16
    4594:	1909      	adds	r1, r1, r4
    4596:	140c      	asrs	r4, r1, #16
    4598:	b280      	uxth	r0, r0
    459a:	0409      	lsls	r1, r1, #16
    459c:	9e05      	ldr	r6, [sp, #20]
    459e:	4301      	orrs	r1, r0
    45a0:	c202      	stmia	r2!, {r1}
    45a2:	429e      	cmp	r6, r3
    45a4:	d2eb      	bcs.n	457e <quorem+0xc6>
    45a6:	9c03      	ldr	r4, [sp, #12]
    45a8:	00bb      	lsls	r3, r7, #2
    45aa:	18e3      	adds	r3, r4, r3
    45ac:	681e      	ldr	r6, [r3, #0]
    45ae:	2e00      	cmp	r6, #0
    45b0:	d10a      	bne.n	45c8 <quorem+0x110>
    45b2:	9c03      	ldr	r4, [sp, #12]
    45b4:	3b04      	subs	r3, #4
    45b6:	42a3      	cmp	r3, r4
    45b8:	d801      	bhi.n	45be <quorem+0x106>
    45ba:	612f      	str	r7, [r5, #16]
    45bc:	e004      	b.n	45c8 <quorem+0x110>
    45be:	681e      	ldr	r6, [r3, #0]
    45c0:	2e00      	cmp	r6, #0
    45c2:	d1fa      	bne.n	45ba <quorem+0x102>
    45c4:	3f01      	subs	r7, #1
    45c6:	e7f4      	b.n	45b2 <quorem+0xfa>
    45c8:	9e02      	ldr	r6, [sp, #8]
    45ca:	1c30      	adds	r0, r6, #0
    45cc:	b009      	add	sp, #36	; 0x24
    45ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000045d0 <_dtoa_r>:
    45d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
    45d4:	b09b      	sub	sp, #108	; 0x6c
    45d6:	9007      	str	r0, [sp, #28]
    45d8:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    45da:	9204      	str	r2, [sp, #16]
    45dc:	9305      	str	r3, [sp, #20]
    45de:	2900      	cmp	r1, #0
    45e0:	d009      	beq.n	45f6 <_dtoa_r+0x26>
    45e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    45e4:	2201      	movs	r2, #1
    45e6:	409a      	lsls	r2, r3
    45e8:	604b      	str	r3, [r1, #4]
    45ea:	608a      	str	r2, [r1, #8]
    45ec:	f001 f944 	bl	5878 <_Bfree>
    45f0:	9c07      	ldr	r4, [sp, #28]
    45f2:	2300      	movs	r3, #0
    45f4:	6423      	str	r3, [r4, #64]	; 0x40
    45f6:	9805      	ldr	r0, [sp, #20]
    45f8:	2800      	cmp	r0, #0
    45fa:	da05      	bge.n	4608 <_dtoa_r+0x38>
    45fc:	2301      	movs	r3, #1
    45fe:	602b      	str	r3, [r5, #0]
    4600:	0043      	lsls	r3, r0, #1
    4602:	085b      	lsrs	r3, r3, #1
    4604:	9305      	str	r3, [sp, #20]
    4606:	e001      	b.n	460c <_dtoa_r+0x3c>
    4608:	2300      	movs	r3, #0
    460a:	602b      	str	r3, [r5, #0]
    460c:	9e05      	ldr	r6, [sp, #20]
    460e:	4bbe      	ldr	r3, [pc, #760]	; (4908 <_dtoa_r+0x338>)
    4610:	1c32      	adds	r2, r6, #0
    4612:	401a      	ands	r2, r3
    4614:	429a      	cmp	r2, r3
    4616:	d118      	bne.n	464a <_dtoa_r+0x7a>
    4618:	4bbc      	ldr	r3, [pc, #752]	; (490c <_dtoa_r+0x33c>)
    461a:	9c22      	ldr	r4, [sp, #136]	; 0x88
    461c:	9d04      	ldr	r5, [sp, #16]
    461e:	6023      	str	r3, [r4, #0]
    4620:	2d00      	cmp	r5, #0
    4622:	d101      	bne.n	4628 <_dtoa_r+0x58>
    4624:	0336      	lsls	r6, r6, #12
    4626:	d001      	beq.n	462c <_dtoa_r+0x5c>
    4628:	48b9      	ldr	r0, [pc, #740]	; (4910 <_dtoa_r+0x340>)
    462a:	e000      	b.n	462e <_dtoa_r+0x5e>
    462c:	48b9      	ldr	r0, [pc, #740]	; (4914 <_dtoa_r+0x344>)
    462e:	9c24      	ldr	r4, [sp, #144]	; 0x90
    4630:	2c00      	cmp	r4, #0
    4632:	d101      	bne.n	4638 <_dtoa_r+0x68>
    4634:	f000 fd92 	bl	515c <_dtoa_r+0xb8c>
    4638:	78c2      	ldrb	r2, [r0, #3]
    463a:	1cc3      	adds	r3, r0, #3
    463c:	2a00      	cmp	r2, #0
    463e:	d000      	beq.n	4642 <_dtoa_r+0x72>
    4640:	3305      	adds	r3, #5
    4642:	9d24      	ldr	r5, [sp, #144]	; 0x90
    4644:	602b      	str	r3, [r5, #0]
    4646:	f000 fd89 	bl	515c <_dtoa_r+0xb8c>
    464a:	9c04      	ldr	r4, [sp, #16]
    464c:	9d05      	ldr	r5, [sp, #20]
    464e:	4ba5      	ldr	r3, [pc, #660]	; (48e4 <_dtoa_r+0x314>)
    4650:	4aa3      	ldr	r2, [pc, #652]	; (48e0 <_dtoa_r+0x310>)
    4652:	1c20      	adds	r0, r4, #0
    4654:	1c29      	adds	r1, r5, #0
    4656:	f7fd faf3 	bl	1c40 <__aeabi_dcmpeq>
    465a:	1e07      	subs	r7, r0, #0
    465c:	d00c      	beq.n	4678 <_dtoa_r+0xa8>
    465e:	9c22      	ldr	r4, [sp, #136]	; 0x88
    4660:	9d24      	ldr	r5, [sp, #144]	; 0x90
    4662:	2301      	movs	r3, #1
    4664:	6023      	str	r3, [r4, #0]
    4666:	2d00      	cmp	r5, #0
    4668:	d101      	bne.n	466e <_dtoa_r+0x9e>
    466a:	f000 fd74 	bl	5156 <_dtoa_r+0xb86>
    466e:	48aa      	ldr	r0, [pc, #680]	; (4918 <_dtoa_r+0x348>)
    4670:	6028      	str	r0, [r5, #0]
    4672:	3801      	subs	r0, #1
    4674:	f000 fd72 	bl	515c <_dtoa_r+0xb8c>
    4678:	ab19      	add	r3, sp, #100	; 0x64
    467a:	9300      	str	r3, [sp, #0]
    467c:	ab18      	add	r3, sp, #96	; 0x60
    467e:	9301      	str	r3, [sp, #4]
    4680:	9807      	ldr	r0, [sp, #28]
    4682:	1c2b      	adds	r3, r5, #0
    4684:	1c22      	adds	r2, r4, #0
    4686:	f001 fbe7 	bl	5e58 <__d2b>
    468a:	0073      	lsls	r3, r6, #1
    468c:	900a      	str	r0, [sp, #40]	; 0x28
    468e:	0d5b      	lsrs	r3, r3, #21
    4690:	d009      	beq.n	46a6 <_dtoa_r+0xd6>
    4692:	1c20      	adds	r0, r4, #0
    4694:	4ca1      	ldr	r4, [pc, #644]	; (491c <_dtoa_r+0x34c>)
    4696:	032a      	lsls	r2, r5, #12
    4698:	0b12      	lsrs	r2, r2, #12
    469a:	1c21      	adds	r1, r4, #0
    469c:	4311      	orrs	r1, r2
    469e:	4aa0      	ldr	r2, [pc, #640]	; (4920 <_dtoa_r+0x350>)
    46a0:	9716      	str	r7, [sp, #88]	; 0x58
    46a2:	189e      	adds	r6, r3, r2
    46a4:	e01b      	b.n	46de <_dtoa_r+0x10e>
    46a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    46a8:	9c19      	ldr	r4, [sp, #100]	; 0x64
    46aa:	191d      	adds	r5, r3, r4
    46ac:	4b9d      	ldr	r3, [pc, #628]	; (4924 <_dtoa_r+0x354>)
    46ae:	429d      	cmp	r5, r3
    46b0:	db09      	blt.n	46c6 <_dtoa_r+0xf6>
    46b2:	499d      	ldr	r1, [pc, #628]	; (4928 <_dtoa_r+0x358>)
    46b4:	9a04      	ldr	r2, [sp, #16]
    46b6:	4b9d      	ldr	r3, [pc, #628]	; (492c <_dtoa_r+0x35c>)
    46b8:	1868      	adds	r0, r5, r1
    46ba:	40c2      	lsrs	r2, r0
    46bc:	1b5b      	subs	r3, r3, r5
    46be:	1c10      	adds	r0, r2, #0
    46c0:	409e      	lsls	r6, r3
    46c2:	4330      	orrs	r0, r6
    46c4:	e004      	b.n	46d0 <_dtoa_r+0x100>
    46c6:	489a      	ldr	r0, [pc, #616]	; (4930 <_dtoa_r+0x360>)
    46c8:	9b04      	ldr	r3, [sp, #16]
    46ca:	1b40      	subs	r0, r0, r5
    46cc:	4083      	lsls	r3, r0
    46ce:	1c18      	adds	r0, r3, #0
    46d0:	f003 fa4a 	bl	7b68 <__aeabi_ui2d>
    46d4:	4c97      	ldr	r4, [pc, #604]	; (4934 <_dtoa_r+0x364>)
    46d6:	1e6e      	subs	r6, r5, #1
    46d8:	2501      	movs	r5, #1
    46da:	1909      	adds	r1, r1, r4
    46dc:	9516      	str	r5, [sp, #88]	; 0x58
    46de:	4a82      	ldr	r2, [pc, #520]	; (48e8 <_dtoa_r+0x318>)
    46e0:	4b82      	ldr	r3, [pc, #520]	; (48ec <_dtoa_r+0x31c>)
    46e2:	f002 fed7 	bl	7494 <__aeabi_dsub>
    46e6:	4a82      	ldr	r2, [pc, #520]	; (48f0 <_dtoa_r+0x320>)
    46e8:	4b82      	ldr	r3, [pc, #520]	; (48f4 <_dtoa_r+0x324>)
    46ea:	f7fd ffbb 	bl	2664 <__aeabi_dmul>
    46ee:	4a82      	ldr	r2, [pc, #520]	; (48f8 <_dtoa_r+0x328>)
    46f0:	4b82      	ldr	r3, [pc, #520]	; (48fc <_dtoa_r+0x32c>)
    46f2:	f7fd fb4b 	bl	1d8c <__aeabi_dadd>
    46f6:	1c04      	adds	r4, r0, #0
    46f8:	1c30      	adds	r0, r6, #0
    46fa:	1c0d      	adds	r5, r1, #0
    46fc:	f7fe fa44 	bl	2b88 <__aeabi_i2d>
    4700:	4a7f      	ldr	r2, [pc, #508]	; (4900 <_dtoa_r+0x330>)
    4702:	4b80      	ldr	r3, [pc, #512]	; (4904 <_dtoa_r+0x334>)
    4704:	f7fd ffae 	bl	2664 <__aeabi_dmul>
    4708:	1c02      	adds	r2, r0, #0
    470a:	1c0b      	adds	r3, r1, #0
    470c:	1c20      	adds	r0, r4, #0
    470e:	1c29      	adds	r1, r5, #0
    4710:	f7fd fb3c 	bl	1d8c <__aeabi_dadd>
    4714:	1c04      	adds	r4, r0, #0
    4716:	1c0d      	adds	r5, r1, #0
    4718:	f003 f9f2 	bl	7b00 <__aeabi_d2iz>
    471c:	4b71      	ldr	r3, [pc, #452]	; (48e4 <_dtoa_r+0x314>)
    471e:	4a70      	ldr	r2, [pc, #448]	; (48e0 <_dtoa_r+0x310>)
    4720:	9006      	str	r0, [sp, #24]
    4722:	1c29      	adds	r1, r5, #0
    4724:	1c20      	adds	r0, r4, #0
    4726:	f7fd fa91 	bl	1c4c <__aeabi_dcmplt>
    472a:	2800      	cmp	r0, #0
    472c:	d00d      	beq.n	474a <_dtoa_r+0x17a>
    472e:	9806      	ldr	r0, [sp, #24]
    4730:	f7fe fa2a 	bl	2b88 <__aeabi_i2d>
    4734:	1c0b      	adds	r3, r1, #0
    4736:	1c02      	adds	r2, r0, #0
    4738:	1c29      	adds	r1, r5, #0
    473a:	1c20      	adds	r0, r4, #0
    473c:	f7fd fa80 	bl	1c40 <__aeabi_dcmpeq>
    4740:	9c06      	ldr	r4, [sp, #24]
    4742:	4243      	negs	r3, r0
    4744:	4143      	adcs	r3, r0
    4746:	1ae4      	subs	r4, r4, r3
    4748:	9406      	str	r4, [sp, #24]
    474a:	9c06      	ldr	r4, [sp, #24]
    474c:	2501      	movs	r5, #1
    474e:	9513      	str	r5, [sp, #76]	; 0x4c
    4750:	2c16      	cmp	r4, #22
    4752:	d810      	bhi.n	4776 <_dtoa_r+0x1a6>
    4754:	4a78      	ldr	r2, [pc, #480]	; (4938 <_dtoa_r+0x368>)
    4756:	00e3      	lsls	r3, r4, #3
    4758:	18d3      	adds	r3, r2, r3
    475a:	6818      	ldr	r0, [r3, #0]
    475c:	6859      	ldr	r1, [r3, #4]
    475e:	9a04      	ldr	r2, [sp, #16]
    4760:	9b05      	ldr	r3, [sp, #20]
    4762:	f7fd fa87 	bl	1c74 <__aeabi_dcmpgt>
    4766:	2800      	cmp	r0, #0
    4768:	d004      	beq.n	4774 <_dtoa_r+0x1a4>
    476a:	3c01      	subs	r4, #1
    476c:	2500      	movs	r5, #0
    476e:	9406      	str	r4, [sp, #24]
    4770:	9513      	str	r5, [sp, #76]	; 0x4c
    4772:	e000      	b.n	4776 <_dtoa_r+0x1a6>
    4774:	9013      	str	r0, [sp, #76]	; 0x4c
    4776:	9818      	ldr	r0, [sp, #96]	; 0x60
    4778:	2400      	movs	r4, #0
    477a:	1b86      	subs	r6, r0, r6
    477c:	1c35      	adds	r5, r6, #0
    477e:	9402      	str	r4, [sp, #8]
    4780:	3d01      	subs	r5, #1
    4782:	9509      	str	r5, [sp, #36]	; 0x24
    4784:	d504      	bpl.n	4790 <_dtoa_r+0x1c0>
    4786:	9c09      	ldr	r4, [sp, #36]	; 0x24
    4788:	2500      	movs	r5, #0
    478a:	4264      	negs	r4, r4
    478c:	9402      	str	r4, [sp, #8]
    478e:	9509      	str	r5, [sp, #36]	; 0x24
    4790:	9c06      	ldr	r4, [sp, #24]
    4792:	2c00      	cmp	r4, #0
    4794:	db06      	blt.n	47a4 <_dtoa_r+0x1d4>
    4796:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4798:	9412      	str	r4, [sp, #72]	; 0x48
    479a:	192d      	adds	r5, r5, r4
    479c:	2400      	movs	r4, #0
    479e:	9509      	str	r5, [sp, #36]	; 0x24
    47a0:	940d      	str	r4, [sp, #52]	; 0x34
    47a2:	e007      	b.n	47b4 <_dtoa_r+0x1e4>
    47a4:	9c06      	ldr	r4, [sp, #24]
    47a6:	9d02      	ldr	r5, [sp, #8]
    47a8:	1b2d      	subs	r5, r5, r4
    47aa:	9502      	str	r5, [sp, #8]
    47ac:	4265      	negs	r5, r4
    47ae:	2400      	movs	r4, #0
    47b0:	950d      	str	r5, [sp, #52]	; 0x34
    47b2:	9412      	str	r4, [sp, #72]	; 0x48
    47b4:	9d20      	ldr	r5, [sp, #128]	; 0x80
    47b6:	2401      	movs	r4, #1
    47b8:	2d09      	cmp	r5, #9
    47ba:	d824      	bhi.n	4806 <_dtoa_r+0x236>
    47bc:	2d05      	cmp	r5, #5
    47be:	dd02      	ble.n	47c6 <_dtoa_r+0x1f6>
    47c0:	3d04      	subs	r5, #4
    47c2:	9520      	str	r5, [sp, #128]	; 0x80
    47c4:	2400      	movs	r4, #0
    47c6:	9820      	ldr	r0, [sp, #128]	; 0x80
    47c8:	3802      	subs	r0, #2
    47ca:	2803      	cmp	r0, #3
    47cc:	d823      	bhi.n	4816 <_dtoa_r+0x246>
    47ce:	f002 fac5 	bl	6d5c <__gnu_thumb1_case_uqi>
    47d2:	0e06      	.short	0x0e06
    47d4:	0402      	.short	0x0402
    47d6:	2501      	movs	r5, #1
    47d8:	e002      	b.n	47e0 <_dtoa_r+0x210>
    47da:	2501      	movs	r5, #1
    47dc:	e008      	b.n	47f0 <_dtoa_r+0x220>
    47de:	2500      	movs	r5, #0
    47e0:	9510      	str	r5, [sp, #64]	; 0x40
    47e2:	9d21      	ldr	r5, [sp, #132]	; 0x84
    47e4:	2d00      	cmp	r5, #0
    47e6:	dd1f      	ble.n	4828 <_dtoa_r+0x258>
    47e8:	950c      	str	r5, [sp, #48]	; 0x30
    47ea:	9508      	str	r5, [sp, #32]
    47ec:	e009      	b.n	4802 <_dtoa_r+0x232>
    47ee:	2500      	movs	r5, #0
    47f0:	9510      	str	r5, [sp, #64]	; 0x40
    47f2:	9806      	ldr	r0, [sp, #24]
    47f4:	9d21      	ldr	r5, [sp, #132]	; 0x84
    47f6:	182d      	adds	r5, r5, r0
    47f8:	950c      	str	r5, [sp, #48]	; 0x30
    47fa:	3501      	adds	r5, #1
    47fc:	9508      	str	r5, [sp, #32]
    47fe:	2d00      	cmp	r5, #0
    4800:	dd18      	ble.n	4834 <_dtoa_r+0x264>
    4802:	1c2b      	adds	r3, r5, #0
    4804:	e017      	b.n	4836 <_dtoa_r+0x266>
    4806:	4263      	negs	r3, r4
    4808:	2500      	movs	r5, #0
    480a:	930c      	str	r3, [sp, #48]	; 0x30
    480c:	9308      	str	r3, [sp, #32]
    480e:	9520      	str	r5, [sp, #128]	; 0x80
    4810:	9410      	str	r4, [sp, #64]	; 0x40
    4812:	2312      	movs	r3, #18
    4814:	e006      	b.n	4824 <_dtoa_r+0x254>
    4816:	2501      	movs	r5, #1
    4818:	426b      	negs	r3, r5
    481a:	9510      	str	r5, [sp, #64]	; 0x40
    481c:	930c      	str	r3, [sp, #48]	; 0x30
    481e:	9308      	str	r3, [sp, #32]
    4820:	2500      	movs	r5, #0
    4822:	2312      	movs	r3, #18
    4824:	9521      	str	r5, [sp, #132]	; 0x84
    4826:	e006      	b.n	4836 <_dtoa_r+0x266>
    4828:	2501      	movs	r5, #1
    482a:	950c      	str	r5, [sp, #48]	; 0x30
    482c:	9508      	str	r5, [sp, #32]
    482e:	1c2b      	adds	r3, r5, #0
    4830:	9521      	str	r5, [sp, #132]	; 0x84
    4832:	e000      	b.n	4836 <_dtoa_r+0x266>
    4834:	2301      	movs	r3, #1
    4836:	9d07      	ldr	r5, [sp, #28]
    4838:	2200      	movs	r2, #0
    483a:	646a      	str	r2, [r5, #68]	; 0x44
    483c:	2204      	movs	r2, #4
    483e:	9d07      	ldr	r5, [sp, #28]
    4840:	1c10      	adds	r0, r2, #0
    4842:	3014      	adds	r0, #20
    4844:	6c69      	ldr	r1, [r5, #68]	; 0x44
    4846:	4298      	cmp	r0, r3
    4848:	d804      	bhi.n	4854 <_dtoa_r+0x284>
    484a:	9d07      	ldr	r5, [sp, #28]
    484c:	3101      	adds	r1, #1
    484e:	6469      	str	r1, [r5, #68]	; 0x44
    4850:	0052      	lsls	r2, r2, #1
    4852:	e7f4      	b.n	483e <_dtoa_r+0x26e>
    4854:	1c28      	adds	r0, r5, #0
    4856:	f000 ffe7 	bl	5828 <_Balloc>
    485a:	6428      	str	r0, [r5, #64]	; 0x40
    485c:	9d08      	ldr	r5, [sp, #32]
    485e:	900b      	str	r0, [sp, #44]	; 0x2c
    4860:	2d0e      	cmp	r5, #14
    4862:	d900      	bls.n	4866 <_dtoa_r+0x296>
    4864:	e188      	b.n	4b78 <_dtoa_r+0x5a8>
    4866:	2c00      	cmp	r4, #0
    4868:	d100      	bne.n	486c <_dtoa_r+0x29c>
    486a:	e185      	b.n	4b78 <_dtoa_r+0x5a8>
    486c:	9c04      	ldr	r4, [sp, #16]
    486e:	9d05      	ldr	r5, [sp, #20]
    4870:	9414      	str	r4, [sp, #80]	; 0x50
    4872:	9515      	str	r5, [sp, #84]	; 0x54
    4874:	9d06      	ldr	r5, [sp, #24]
    4876:	2d00      	cmp	r5, #0
    4878:	dd62      	ble.n	4940 <_dtoa_r+0x370>
    487a:	1c2a      	adds	r2, r5, #0
    487c:	230f      	movs	r3, #15
    487e:	401a      	ands	r2, r3
    4880:	492d      	ldr	r1, [pc, #180]	; (4938 <_dtoa_r+0x368>)
    4882:	00d2      	lsls	r2, r2, #3
    4884:	188a      	adds	r2, r1, r2
    4886:	6814      	ldr	r4, [r2, #0]
    4888:	6855      	ldr	r5, [r2, #4]
    488a:	940e      	str	r4, [sp, #56]	; 0x38
    488c:	950f      	str	r5, [sp, #60]	; 0x3c
    488e:	9d06      	ldr	r5, [sp, #24]
    4890:	4c2a      	ldr	r4, [pc, #168]	; (493c <_dtoa_r+0x36c>)
    4892:	112f      	asrs	r7, r5, #4
    4894:	2502      	movs	r5, #2
    4896:	06f8      	lsls	r0, r7, #27
    4898:	d517      	bpl.n	48ca <_dtoa_r+0x2fa>
    489a:	401f      	ands	r7, r3
    489c:	9814      	ldr	r0, [sp, #80]	; 0x50
    489e:	9915      	ldr	r1, [sp, #84]	; 0x54
    48a0:	6a22      	ldr	r2, [r4, #32]
    48a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    48a4:	f002 face 	bl	6e44 <__aeabi_ddiv>
    48a8:	2503      	movs	r5, #3
    48aa:	9004      	str	r0, [sp, #16]
    48ac:	9105      	str	r1, [sp, #20]
    48ae:	e00c      	b.n	48ca <_dtoa_r+0x2fa>
    48b0:	07f9      	lsls	r1, r7, #31
    48b2:	d508      	bpl.n	48c6 <_dtoa_r+0x2f6>
    48b4:	980e      	ldr	r0, [sp, #56]	; 0x38
    48b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    48b8:	6822      	ldr	r2, [r4, #0]
    48ba:	6863      	ldr	r3, [r4, #4]
    48bc:	f7fd fed2 	bl	2664 <__aeabi_dmul>
    48c0:	900e      	str	r0, [sp, #56]	; 0x38
    48c2:	910f      	str	r1, [sp, #60]	; 0x3c
    48c4:	3501      	adds	r5, #1
    48c6:	107f      	asrs	r7, r7, #1
    48c8:	3408      	adds	r4, #8
    48ca:	2f00      	cmp	r7, #0
    48cc:	d1f0      	bne.n	48b0 <_dtoa_r+0x2e0>
    48ce:	9804      	ldr	r0, [sp, #16]
    48d0:	9905      	ldr	r1, [sp, #20]
    48d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    48d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    48d6:	f002 fab5 	bl	6e44 <__aeabi_ddiv>
    48da:	e04f      	b.n	497c <_dtoa_r+0x3ac>
    48dc:	46c0      	nop			; (mov r8, r8)
    48de:	46c0      	nop			; (mov r8, r8)
	...
    48ec:	3ff80000 	.word	0x3ff80000
    48f0:	636f4361 	.word	0x636f4361
    48f4:	3fd287a7 	.word	0x3fd287a7
    48f8:	8b60c8b3 	.word	0x8b60c8b3
    48fc:	3fc68a28 	.word	0x3fc68a28
    4900:	509f79fb 	.word	0x509f79fb
    4904:	3fd34413 	.word	0x3fd34413
    4908:	7ff00000 	.word	0x7ff00000
    490c:	0000270f 	.word	0x0000270f
    4910:	00007d17 	.word	0x00007d17
    4914:	00007d0e 	.word	0x00007d0e
    4918:	00007d0d 	.word	0x00007d0d
    491c:	3ff00000 	.word	0x3ff00000
    4920:	fffffc01 	.word	0xfffffc01
    4924:	fffffbef 	.word	0xfffffbef
    4928:	00000412 	.word	0x00000412
    492c:	fffffc0e 	.word	0xfffffc0e
    4930:	fffffbee 	.word	0xfffffbee
    4934:	fe100000 	.word	0xfe100000
    4938:	00007d38 	.word	0x00007d38
    493c:	00007e28 	.word	0x00007e28
    4940:	9c06      	ldr	r4, [sp, #24]
    4942:	2502      	movs	r5, #2
    4944:	4267      	negs	r7, r4
    4946:	2f00      	cmp	r7, #0
    4948:	d01a      	beq.n	4980 <_dtoa_r+0x3b0>
    494a:	230f      	movs	r3, #15
    494c:	403b      	ands	r3, r7
    494e:	4acc      	ldr	r2, [pc, #816]	; (4c80 <_dtoa_r+0x6b0>)
    4950:	00db      	lsls	r3, r3, #3
    4952:	18d3      	adds	r3, r2, r3
    4954:	9814      	ldr	r0, [sp, #80]	; 0x50
    4956:	9915      	ldr	r1, [sp, #84]	; 0x54
    4958:	681a      	ldr	r2, [r3, #0]
    495a:	685b      	ldr	r3, [r3, #4]
    495c:	f7fd fe82 	bl	2664 <__aeabi_dmul>
    4960:	4ec8      	ldr	r6, [pc, #800]	; (4c84 <_dtoa_r+0x6b4>)
    4962:	113f      	asrs	r7, r7, #4
    4964:	2f00      	cmp	r7, #0
    4966:	d009      	beq.n	497c <_dtoa_r+0x3ac>
    4968:	07fa      	lsls	r2, r7, #31
    496a:	d504      	bpl.n	4976 <_dtoa_r+0x3a6>
    496c:	6832      	ldr	r2, [r6, #0]
    496e:	6873      	ldr	r3, [r6, #4]
    4970:	3501      	adds	r5, #1
    4972:	f7fd fe77 	bl	2664 <__aeabi_dmul>
    4976:	107f      	asrs	r7, r7, #1
    4978:	3608      	adds	r6, #8
    497a:	e7f3      	b.n	4964 <_dtoa_r+0x394>
    497c:	9004      	str	r0, [sp, #16]
    497e:	9105      	str	r1, [sp, #20]
    4980:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    4982:	2c00      	cmp	r4, #0
    4984:	d01e      	beq.n	49c4 <_dtoa_r+0x3f4>
    4986:	9e04      	ldr	r6, [sp, #16]
    4988:	9f05      	ldr	r7, [sp, #20]
    498a:	4bb4      	ldr	r3, [pc, #720]	; (4c5c <_dtoa_r+0x68c>)
    498c:	4ab2      	ldr	r2, [pc, #712]	; (4c58 <_dtoa_r+0x688>)
    498e:	1c30      	adds	r0, r6, #0
    4990:	1c39      	adds	r1, r7, #0
    4992:	f7fd f95b 	bl	1c4c <__aeabi_dcmplt>
    4996:	2800      	cmp	r0, #0
    4998:	d014      	beq.n	49c4 <_dtoa_r+0x3f4>
    499a:	9c08      	ldr	r4, [sp, #32]
    499c:	2c00      	cmp	r4, #0
    499e:	d011      	beq.n	49c4 <_dtoa_r+0x3f4>
    49a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    49a2:	2c00      	cmp	r4, #0
    49a4:	dc00      	bgt.n	49a8 <_dtoa_r+0x3d8>
    49a6:	e0e3      	b.n	4b70 <_dtoa_r+0x5a0>
    49a8:	9c06      	ldr	r4, [sp, #24]
    49aa:	1c30      	adds	r0, r6, #0
    49ac:	3c01      	subs	r4, #1
    49ae:	1c39      	adds	r1, r7, #0
    49b0:	4aab      	ldr	r2, [pc, #684]	; (4c60 <_dtoa_r+0x690>)
    49b2:	4bac      	ldr	r3, [pc, #688]	; (4c64 <_dtoa_r+0x694>)
    49b4:	9411      	str	r4, [sp, #68]	; 0x44
    49b6:	f7fd fe55 	bl	2664 <__aeabi_dmul>
    49ba:	3501      	adds	r5, #1
    49bc:	9004      	str	r0, [sp, #16]
    49be:	9105      	str	r1, [sp, #20]
    49c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    49c2:	e002      	b.n	49ca <_dtoa_r+0x3fa>
    49c4:	9c06      	ldr	r4, [sp, #24]
    49c6:	9411      	str	r4, [sp, #68]	; 0x44
    49c8:	9c08      	ldr	r4, [sp, #32]
    49ca:	1c28      	adds	r0, r5, #0
    49cc:	9e04      	ldr	r6, [sp, #16]
    49ce:	9f05      	ldr	r7, [sp, #20]
    49d0:	940e      	str	r4, [sp, #56]	; 0x38
    49d2:	f7fe f8d9 	bl	2b88 <__aeabi_i2d>
    49d6:	1c32      	adds	r2, r6, #0
    49d8:	1c3b      	adds	r3, r7, #0
    49da:	f7fd fe43 	bl	2664 <__aeabi_dmul>
    49de:	4aa2      	ldr	r2, [pc, #648]	; (4c68 <_dtoa_r+0x698>)
    49e0:	4ba2      	ldr	r3, [pc, #648]	; (4c6c <_dtoa_r+0x69c>)
    49e2:	f7fd f9d3 	bl	1d8c <__aeabi_dadd>
    49e6:	1c04      	adds	r4, r0, #0
    49e8:	48a7      	ldr	r0, [pc, #668]	; (4c88 <_dtoa_r+0x6b8>)
    49ea:	1808      	adds	r0, r1, r0
    49ec:	990e      	ldr	r1, [sp, #56]	; 0x38
    49ee:	9004      	str	r0, [sp, #16]
    49f0:	1c05      	adds	r5, r0, #0
    49f2:	2900      	cmp	r1, #0
    49f4:	d11b      	bne.n	4a2e <_dtoa_r+0x45e>
    49f6:	4a9e      	ldr	r2, [pc, #632]	; (4c70 <_dtoa_r+0x6a0>)
    49f8:	4b9e      	ldr	r3, [pc, #632]	; (4c74 <_dtoa_r+0x6a4>)
    49fa:	1c30      	adds	r0, r6, #0
    49fc:	1c39      	adds	r1, r7, #0
    49fe:	f002 fd49 	bl	7494 <__aeabi_dsub>
    4a02:	1c22      	adds	r2, r4, #0
    4a04:	9b04      	ldr	r3, [sp, #16]
    4a06:	1c06      	adds	r6, r0, #0
    4a08:	1c0f      	adds	r7, r1, #0
    4a0a:	f7fd f933 	bl	1c74 <__aeabi_dcmpgt>
    4a0e:	2800      	cmp	r0, #0
    4a10:	d000      	beq.n	4a14 <_dtoa_r+0x444>
    4a12:	e25c      	b.n	4ece <_dtoa_r+0x8fe>
    4a14:	1c22      	adds	r2, r4, #0
    4a16:	2580      	movs	r5, #128	; 0x80
    4a18:	9c04      	ldr	r4, [sp, #16]
    4a1a:	062d      	lsls	r5, r5, #24
    4a1c:	1c30      	adds	r0, r6, #0
    4a1e:	1c39      	adds	r1, r7, #0
    4a20:	1963      	adds	r3, r4, r5
    4a22:	f7fd f913 	bl	1c4c <__aeabi_dcmplt>
    4a26:	2800      	cmp	r0, #0
    4a28:	d000      	beq.n	4a2c <_dtoa_r+0x45c>
    4a2a:	e247      	b.n	4ebc <_dtoa_r+0x8ec>
    4a2c:	e0a0      	b.n	4b70 <_dtoa_r+0x5a0>
    4a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4a30:	4b93      	ldr	r3, [pc, #588]	; (4c80 <_dtoa_r+0x6b0>)
    4a32:	3a01      	subs	r2, #1
    4a34:	9810      	ldr	r0, [sp, #64]	; 0x40
    4a36:	00d2      	lsls	r2, r2, #3
    4a38:	189b      	adds	r3, r3, r2
    4a3a:	2800      	cmp	r0, #0
    4a3c:	d049      	beq.n	4ad2 <_dtoa_r+0x502>
    4a3e:	681a      	ldr	r2, [r3, #0]
    4a40:	685b      	ldr	r3, [r3, #4]
    4a42:	488d      	ldr	r0, [pc, #564]	; (4c78 <_dtoa_r+0x6a8>)
    4a44:	498d      	ldr	r1, [pc, #564]	; (4c7c <_dtoa_r+0x6ac>)
    4a46:	f002 f9fd 	bl	6e44 <__aeabi_ddiv>
    4a4a:	1c2b      	adds	r3, r5, #0
    4a4c:	1c22      	adds	r2, r4, #0
    4a4e:	f002 fd21 	bl	7494 <__aeabi_dsub>
    4a52:	9004      	str	r0, [sp, #16]
    4a54:	9105      	str	r1, [sp, #20]
    4a56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4a58:	1c39      	adds	r1, r7, #0
    4a5a:	1c30      	adds	r0, r6, #0
    4a5c:	f003 f850 	bl	7b00 <__aeabi_d2iz>
    4a60:	1c04      	adds	r4, r0, #0
    4a62:	f7fe f891 	bl	2b88 <__aeabi_i2d>
    4a66:	1c02      	adds	r2, r0, #0
    4a68:	1c0b      	adds	r3, r1, #0
    4a6a:	1c30      	adds	r0, r6, #0
    4a6c:	1c39      	adds	r1, r7, #0
    4a6e:	f002 fd11 	bl	7494 <__aeabi_dsub>
    4a72:	3501      	adds	r5, #1
    4a74:	1e6b      	subs	r3, r5, #1
    4a76:	3430      	adds	r4, #48	; 0x30
    4a78:	701c      	strb	r4, [r3, #0]
    4a7a:	9a04      	ldr	r2, [sp, #16]
    4a7c:	9b05      	ldr	r3, [sp, #20]
    4a7e:	1c06      	adds	r6, r0, #0
    4a80:	1c0f      	adds	r7, r1, #0
    4a82:	f7fd f8e3 	bl	1c4c <__aeabi_dcmplt>
    4a86:	2800      	cmp	r0, #0
    4a88:	d000      	beq.n	4a8c <_dtoa_r+0x4bc>
    4a8a:	e353      	b.n	5134 <_dtoa_r+0xb64>
    4a8c:	1c32      	adds	r2, r6, #0
    4a8e:	1c3b      	adds	r3, r7, #0
    4a90:	4972      	ldr	r1, [pc, #456]	; (4c5c <_dtoa_r+0x68c>)
    4a92:	4871      	ldr	r0, [pc, #452]	; (4c58 <_dtoa_r+0x688>)
    4a94:	f002 fcfe 	bl	7494 <__aeabi_dsub>
    4a98:	9a04      	ldr	r2, [sp, #16]
    4a9a:	9b05      	ldr	r3, [sp, #20]
    4a9c:	f7fd f8d6 	bl	1c4c <__aeabi_dcmplt>
    4aa0:	2800      	cmp	r0, #0
    4aa2:	d000      	beq.n	4aa6 <_dtoa_r+0x4d6>
    4aa4:	e0cb      	b.n	4c3e <_dtoa_r+0x66e>
    4aa6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4aa8:	1b2b      	subs	r3, r5, r4
    4aaa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4aac:	42a3      	cmp	r3, r4
    4aae:	da5f      	bge.n	4b70 <_dtoa_r+0x5a0>
    4ab0:	9804      	ldr	r0, [sp, #16]
    4ab2:	9905      	ldr	r1, [sp, #20]
    4ab4:	4a6a      	ldr	r2, [pc, #424]	; (4c60 <_dtoa_r+0x690>)
    4ab6:	4b6b      	ldr	r3, [pc, #428]	; (4c64 <_dtoa_r+0x694>)
    4ab8:	f7fd fdd4 	bl	2664 <__aeabi_dmul>
    4abc:	4a68      	ldr	r2, [pc, #416]	; (4c60 <_dtoa_r+0x690>)
    4abe:	4b69      	ldr	r3, [pc, #420]	; (4c64 <_dtoa_r+0x694>)
    4ac0:	9004      	str	r0, [sp, #16]
    4ac2:	9105      	str	r1, [sp, #20]
    4ac4:	1c30      	adds	r0, r6, #0
    4ac6:	1c39      	adds	r1, r7, #0
    4ac8:	f7fd fdcc 	bl	2664 <__aeabi_dmul>
    4acc:	1c06      	adds	r6, r0, #0
    4ace:	1c0f      	adds	r7, r1, #0
    4ad0:	e7c2      	b.n	4a58 <_dtoa_r+0x488>
    4ad2:	6818      	ldr	r0, [r3, #0]
    4ad4:	6859      	ldr	r1, [r3, #4]
    4ad6:	1c22      	adds	r2, r4, #0
    4ad8:	1c2b      	adds	r3, r5, #0
    4ada:	f7fd fdc3 	bl	2664 <__aeabi_dmul>
    4ade:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4ae0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4ae2:	9004      	str	r0, [sp, #16]
    4ae4:	9105      	str	r1, [sp, #20]
    4ae6:	1965      	adds	r5, r4, r5
    4ae8:	9517      	str	r5, [sp, #92]	; 0x5c
    4aea:	1c39      	adds	r1, r7, #0
    4aec:	1c30      	adds	r0, r6, #0
    4aee:	f003 f807 	bl	7b00 <__aeabi_d2iz>
    4af2:	1c05      	adds	r5, r0, #0
    4af4:	f7fe f848 	bl	2b88 <__aeabi_i2d>
    4af8:	1c02      	adds	r2, r0, #0
    4afa:	1c0b      	adds	r3, r1, #0
    4afc:	1c30      	adds	r0, r6, #0
    4afe:	1c39      	adds	r1, r7, #0
    4b00:	f002 fcc8 	bl	7494 <__aeabi_dsub>
    4b04:	3530      	adds	r5, #48	; 0x30
    4b06:	7025      	strb	r5, [r4, #0]
    4b08:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    4b0a:	3401      	adds	r4, #1
    4b0c:	1c06      	adds	r6, r0, #0
    4b0e:	1c0f      	adds	r7, r1, #0
    4b10:	42ac      	cmp	r4, r5
    4b12:	d126      	bne.n	4b62 <_dtoa_r+0x592>
    4b14:	980e      	ldr	r0, [sp, #56]	; 0x38
    4b16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4b18:	4a57      	ldr	r2, [pc, #348]	; (4c78 <_dtoa_r+0x6a8>)
    4b1a:	4b58      	ldr	r3, [pc, #352]	; (4c7c <_dtoa_r+0x6ac>)
    4b1c:	1825      	adds	r5, r4, r0
    4b1e:	9804      	ldr	r0, [sp, #16]
    4b20:	9905      	ldr	r1, [sp, #20]
    4b22:	f7fd f933 	bl	1d8c <__aeabi_dadd>
    4b26:	1c02      	adds	r2, r0, #0
    4b28:	1c0b      	adds	r3, r1, #0
    4b2a:	1c30      	adds	r0, r6, #0
    4b2c:	1c39      	adds	r1, r7, #0
    4b2e:	f7fd f8a1 	bl	1c74 <__aeabi_dcmpgt>
    4b32:	2800      	cmp	r0, #0
    4b34:	d000      	beq.n	4b38 <_dtoa_r+0x568>
    4b36:	e082      	b.n	4c3e <_dtoa_r+0x66e>
    4b38:	9a04      	ldr	r2, [sp, #16]
    4b3a:	9b05      	ldr	r3, [sp, #20]
    4b3c:	484e      	ldr	r0, [pc, #312]	; (4c78 <_dtoa_r+0x6a8>)
    4b3e:	494f      	ldr	r1, [pc, #316]	; (4c7c <_dtoa_r+0x6ac>)
    4b40:	f002 fca8 	bl	7494 <__aeabi_dsub>
    4b44:	1c02      	adds	r2, r0, #0
    4b46:	1c0b      	adds	r3, r1, #0
    4b48:	1c30      	adds	r0, r6, #0
    4b4a:	1c39      	adds	r1, r7, #0
    4b4c:	f7fd f87e 	bl	1c4c <__aeabi_dcmplt>
    4b50:	2800      	cmp	r0, #0
    4b52:	d00d      	beq.n	4b70 <_dtoa_r+0x5a0>
    4b54:	1e6b      	subs	r3, r5, #1
    4b56:	781a      	ldrb	r2, [r3, #0]
    4b58:	2a30      	cmp	r2, #48	; 0x30
    4b5a:	d000      	beq.n	4b5e <_dtoa_r+0x58e>
    4b5c:	e2ea      	b.n	5134 <_dtoa_r+0xb64>
    4b5e:	1c1d      	adds	r5, r3, #0
    4b60:	e7f8      	b.n	4b54 <_dtoa_r+0x584>
    4b62:	4a3f      	ldr	r2, [pc, #252]	; (4c60 <_dtoa_r+0x690>)
    4b64:	4b3f      	ldr	r3, [pc, #252]	; (4c64 <_dtoa_r+0x694>)
    4b66:	f7fd fd7d 	bl	2664 <__aeabi_dmul>
    4b6a:	1c06      	adds	r6, r0, #0
    4b6c:	1c0f      	adds	r7, r1, #0
    4b6e:	e7bc      	b.n	4aea <_dtoa_r+0x51a>
    4b70:	9c14      	ldr	r4, [sp, #80]	; 0x50
    4b72:	9d15      	ldr	r5, [sp, #84]	; 0x54
    4b74:	9404      	str	r4, [sp, #16]
    4b76:	9505      	str	r5, [sp, #20]
    4b78:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	da00      	bge.n	4b80 <_dtoa_r+0x5b0>
    4b7e:	e09f      	b.n	4cc0 <_dtoa_r+0x6f0>
    4b80:	9d06      	ldr	r5, [sp, #24]
    4b82:	2d0e      	cmp	r5, #14
    4b84:	dd00      	ble.n	4b88 <_dtoa_r+0x5b8>
    4b86:	e09b      	b.n	4cc0 <_dtoa_r+0x6f0>
    4b88:	4a3d      	ldr	r2, [pc, #244]	; (4c80 <_dtoa_r+0x6b0>)
    4b8a:	00eb      	lsls	r3, r5, #3
    4b8c:	18d3      	adds	r3, r2, r3
    4b8e:	681c      	ldr	r4, [r3, #0]
    4b90:	685d      	ldr	r5, [r3, #4]
    4b92:	9402      	str	r4, [sp, #8]
    4b94:	9503      	str	r5, [sp, #12]
    4b96:	9d21      	ldr	r5, [sp, #132]	; 0x84
    4b98:	2d00      	cmp	r5, #0
    4b9a:	da14      	bge.n	4bc6 <_dtoa_r+0x5f6>
    4b9c:	9c08      	ldr	r4, [sp, #32]
    4b9e:	2c00      	cmp	r4, #0
    4ba0:	dc11      	bgt.n	4bc6 <_dtoa_r+0x5f6>
    4ba2:	d000      	beq.n	4ba6 <_dtoa_r+0x5d6>
    4ba4:	e18c      	b.n	4ec0 <_dtoa_r+0x8f0>
    4ba6:	4a32      	ldr	r2, [pc, #200]	; (4c70 <_dtoa_r+0x6a0>)
    4ba8:	4b32      	ldr	r3, [pc, #200]	; (4c74 <_dtoa_r+0x6a4>)
    4baa:	9802      	ldr	r0, [sp, #8]
    4bac:	9903      	ldr	r1, [sp, #12]
    4bae:	f7fd fd59 	bl	2664 <__aeabi_dmul>
    4bb2:	9a04      	ldr	r2, [sp, #16]
    4bb4:	9b05      	ldr	r3, [sp, #20]
    4bb6:	f7fd f867 	bl	1c88 <__aeabi_dcmpge>
    4bba:	9f08      	ldr	r7, [sp, #32]
    4bbc:	1c3e      	adds	r6, r7, #0
    4bbe:	2800      	cmp	r0, #0
    4bc0:	d000      	beq.n	4bc4 <_dtoa_r+0x5f4>
    4bc2:	e17f      	b.n	4ec4 <_dtoa_r+0x8f4>
    4bc4:	e187      	b.n	4ed6 <_dtoa_r+0x906>
    4bc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4bc8:	9e04      	ldr	r6, [sp, #16]
    4bca:	9f05      	ldr	r7, [sp, #20]
    4bcc:	9a02      	ldr	r2, [sp, #8]
    4bce:	9b03      	ldr	r3, [sp, #12]
    4bd0:	1c30      	adds	r0, r6, #0
    4bd2:	1c39      	adds	r1, r7, #0
    4bd4:	f002 f936 	bl	6e44 <__aeabi_ddiv>
    4bd8:	f002 ff92 	bl	7b00 <__aeabi_d2iz>
    4bdc:	1c04      	adds	r4, r0, #0
    4bde:	f7fd ffd3 	bl	2b88 <__aeabi_i2d>
    4be2:	9a02      	ldr	r2, [sp, #8]
    4be4:	9b03      	ldr	r3, [sp, #12]
    4be6:	f7fd fd3d 	bl	2664 <__aeabi_dmul>
    4bea:	1c02      	adds	r2, r0, #0
    4bec:	1c0b      	adds	r3, r1, #0
    4bee:	1c30      	adds	r0, r6, #0
    4bf0:	1c39      	adds	r1, r7, #0
    4bf2:	f002 fc4f 	bl	7494 <__aeabi_dsub>
    4bf6:	3501      	adds	r5, #1
    4bf8:	1c02      	adds	r2, r0, #0
    4bfa:	1c20      	adds	r0, r4, #0
    4bfc:	3030      	adds	r0, #48	; 0x30
    4bfe:	1c0b      	adds	r3, r1, #0
    4c00:	1e69      	subs	r1, r5, #1
    4c02:	7008      	strb	r0, [r1, #0]
    4c04:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4c06:	1a29      	subs	r1, r5, r0
    4c08:	9808      	ldr	r0, [sp, #32]
    4c0a:	4281      	cmp	r1, r0
    4c0c:	d148      	bne.n	4ca0 <_dtoa_r+0x6d0>
    4c0e:	1c10      	adds	r0, r2, #0
    4c10:	1c19      	adds	r1, r3, #0
    4c12:	f7fd f8bb 	bl	1d8c <__aeabi_dadd>
    4c16:	9a02      	ldr	r2, [sp, #8]
    4c18:	9b03      	ldr	r3, [sp, #12]
    4c1a:	1c06      	adds	r6, r0, #0
    4c1c:	1c0f      	adds	r7, r1, #0
    4c1e:	f7fd f829 	bl	1c74 <__aeabi_dcmpgt>
    4c22:	2800      	cmp	r0, #0
    4c24:	d10d      	bne.n	4c42 <_dtoa_r+0x672>
    4c26:	1c30      	adds	r0, r6, #0
    4c28:	1c39      	adds	r1, r7, #0
    4c2a:	9a02      	ldr	r2, [sp, #8]
    4c2c:	9b03      	ldr	r3, [sp, #12]
    4c2e:	f7fd f807 	bl	1c40 <__aeabi_dcmpeq>
    4c32:	2800      	cmp	r0, #0
    4c34:	d100      	bne.n	4c38 <_dtoa_r+0x668>
    4c36:	e27f      	b.n	5138 <_dtoa_r+0xb68>
    4c38:	07e1      	lsls	r1, r4, #31
    4c3a:	d402      	bmi.n	4c42 <_dtoa_r+0x672>
    4c3c:	e27c      	b.n	5138 <_dtoa_r+0xb68>
    4c3e:	9c11      	ldr	r4, [sp, #68]	; 0x44
    4c40:	9406      	str	r4, [sp, #24]
    4c42:	1e6b      	subs	r3, r5, #1
    4c44:	781a      	ldrb	r2, [r3, #0]
    4c46:	2a39      	cmp	r2, #57	; 0x39
    4c48:	d126      	bne.n	4c98 <_dtoa_r+0x6c8>
    4c4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4c4c:	42a3      	cmp	r3, r4
    4c4e:	d01d      	beq.n	4c8c <_dtoa_r+0x6bc>
    4c50:	1c1d      	adds	r5, r3, #0
    4c52:	e7f6      	b.n	4c42 <_dtoa_r+0x672>
    4c54:	46c0      	nop			; (mov r8, r8)
    4c56:	46c0      	nop			; (mov r8, r8)
    4c58:	00000000 	.word	0x00000000
    4c5c:	3ff00000 	.word	0x3ff00000
    4c60:	00000000 	.word	0x00000000
    4c64:	40240000 	.word	0x40240000
    4c68:	00000000 	.word	0x00000000
    4c6c:	401c0000 	.word	0x401c0000
    4c70:	00000000 	.word	0x00000000
    4c74:	40140000 	.word	0x40140000
    4c78:	00000000 	.word	0x00000000
    4c7c:	3fe00000 	.word	0x3fe00000
    4c80:	00007d38 	.word	0x00007d38
    4c84:	00007e28 	.word	0x00007e28
    4c88:	fcc00000 	.word	0xfcc00000
    4c8c:	9c06      	ldr	r4, [sp, #24]
    4c8e:	2230      	movs	r2, #48	; 0x30
    4c90:	3401      	adds	r4, #1
    4c92:	9406      	str	r4, [sp, #24]
    4c94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4c96:	7022      	strb	r2, [r4, #0]
    4c98:	781a      	ldrb	r2, [r3, #0]
    4c9a:	3201      	adds	r2, #1
    4c9c:	701a      	strb	r2, [r3, #0]
    4c9e:	e24b      	b.n	5138 <_dtoa_r+0xb68>
    4ca0:	1c10      	adds	r0, r2, #0
    4ca2:	1c19      	adds	r1, r3, #0
    4ca4:	4bc9      	ldr	r3, [pc, #804]	; (4fcc <_dtoa_r+0x9fc>)
    4ca6:	4ac8      	ldr	r2, [pc, #800]	; (4fc8 <_dtoa_r+0x9f8>)
    4ca8:	f7fd fcdc 	bl	2664 <__aeabi_dmul>
    4cac:	4ac8      	ldr	r2, [pc, #800]	; (4fd0 <_dtoa_r+0xa00>)
    4cae:	4bc9      	ldr	r3, [pc, #804]	; (4fd4 <_dtoa_r+0xa04>)
    4cb0:	1c06      	adds	r6, r0, #0
    4cb2:	1c0f      	adds	r7, r1, #0
    4cb4:	f7fc ffc4 	bl	1c40 <__aeabi_dcmpeq>
    4cb8:	2800      	cmp	r0, #0
    4cba:	d100      	bne.n	4cbe <_dtoa_r+0x6ee>
    4cbc:	e786      	b.n	4bcc <_dtoa_r+0x5fc>
    4cbe:	e23b      	b.n	5138 <_dtoa_r+0xb68>
    4cc0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4cc2:	2d00      	cmp	r5, #0
    4cc4:	d031      	beq.n	4d2a <_dtoa_r+0x75a>
    4cc6:	9c20      	ldr	r4, [sp, #128]	; 0x80
    4cc8:	2c01      	cmp	r4, #1
    4cca:	dc0b      	bgt.n	4ce4 <_dtoa_r+0x714>
    4ccc:	9d16      	ldr	r5, [sp, #88]	; 0x58
    4cce:	2d00      	cmp	r5, #0
    4cd0:	d002      	beq.n	4cd8 <_dtoa_r+0x708>
    4cd2:	48c1      	ldr	r0, [pc, #772]	; (4fd8 <_dtoa_r+0xa08>)
    4cd4:	181b      	adds	r3, r3, r0
    4cd6:	e002      	b.n	4cde <_dtoa_r+0x70e>
    4cd8:	9918      	ldr	r1, [sp, #96]	; 0x60
    4cda:	2336      	movs	r3, #54	; 0x36
    4cdc:	1a5b      	subs	r3, r3, r1
    4cde:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4ce0:	9c02      	ldr	r4, [sp, #8]
    4ce2:	e016      	b.n	4d12 <_dtoa_r+0x742>
    4ce4:	9d08      	ldr	r5, [sp, #32]
    4ce6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4ce8:	3d01      	subs	r5, #1
    4cea:	42ac      	cmp	r4, r5
    4cec:	db01      	blt.n	4cf2 <_dtoa_r+0x722>
    4cee:	1b65      	subs	r5, r4, r5
    4cf0:	e006      	b.n	4d00 <_dtoa_r+0x730>
    4cf2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4cf4:	950d      	str	r5, [sp, #52]	; 0x34
    4cf6:	1b2b      	subs	r3, r5, r4
    4cf8:	9c12      	ldr	r4, [sp, #72]	; 0x48
    4cfa:	2500      	movs	r5, #0
    4cfc:	18e4      	adds	r4, r4, r3
    4cfe:	9412      	str	r4, [sp, #72]	; 0x48
    4d00:	9c08      	ldr	r4, [sp, #32]
    4d02:	2c00      	cmp	r4, #0
    4d04:	da03      	bge.n	4d0e <_dtoa_r+0x73e>
    4d06:	9802      	ldr	r0, [sp, #8]
    4d08:	2300      	movs	r3, #0
    4d0a:	1b04      	subs	r4, r0, r4
    4d0c:	e001      	b.n	4d12 <_dtoa_r+0x742>
    4d0e:	9c02      	ldr	r4, [sp, #8]
    4d10:	9b08      	ldr	r3, [sp, #32]
    4d12:	9902      	ldr	r1, [sp, #8]
    4d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4d16:	18c9      	adds	r1, r1, r3
    4d18:	9102      	str	r1, [sp, #8]
    4d1a:	18d2      	adds	r2, r2, r3
    4d1c:	9807      	ldr	r0, [sp, #28]
    4d1e:	2101      	movs	r1, #1
    4d20:	9209      	str	r2, [sp, #36]	; 0x24
    4d22:	f000 fe7a 	bl	5a1a <__i2b>
    4d26:	1c06      	adds	r6, r0, #0
    4d28:	e002      	b.n	4d30 <_dtoa_r+0x760>
    4d2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4d2c:	9c02      	ldr	r4, [sp, #8]
    4d2e:	9e10      	ldr	r6, [sp, #64]	; 0x40
    4d30:	2c00      	cmp	r4, #0
    4d32:	d00c      	beq.n	4d4e <_dtoa_r+0x77e>
    4d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4d36:	2b00      	cmp	r3, #0
    4d38:	dd09      	ble.n	4d4e <_dtoa_r+0x77e>
    4d3a:	42a3      	cmp	r3, r4
    4d3c:	dd00      	ble.n	4d40 <_dtoa_r+0x770>
    4d3e:	1c23      	adds	r3, r4, #0
    4d40:	9802      	ldr	r0, [sp, #8]
    4d42:	9909      	ldr	r1, [sp, #36]	; 0x24
    4d44:	1ac0      	subs	r0, r0, r3
    4d46:	1ac9      	subs	r1, r1, r3
    4d48:	9002      	str	r0, [sp, #8]
    4d4a:	1ae4      	subs	r4, r4, r3
    4d4c:	9109      	str	r1, [sp, #36]	; 0x24
    4d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d50:	2a00      	cmp	r2, #0
    4d52:	dd21      	ble.n	4d98 <_dtoa_r+0x7c8>
    4d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4d56:	2b00      	cmp	r3, #0
    4d58:	d018      	beq.n	4d8c <_dtoa_r+0x7bc>
    4d5a:	2d00      	cmp	r5, #0
    4d5c:	dd10      	ble.n	4d80 <_dtoa_r+0x7b0>
    4d5e:	1c31      	adds	r1, r6, #0
    4d60:	1c2a      	adds	r2, r5, #0
    4d62:	9807      	ldr	r0, [sp, #28]
    4d64:	f000 fef1 	bl	5b4a <__pow5mult>
    4d68:	1c06      	adds	r6, r0, #0
    4d6a:	1c31      	adds	r1, r6, #0
    4d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d6e:	9807      	ldr	r0, [sp, #28]
    4d70:	f000 fe5c 	bl	5a2c <__multiply>
    4d74:	990a      	ldr	r1, [sp, #40]	; 0x28
    4d76:	1c07      	adds	r7, r0, #0
    4d78:	9807      	ldr	r0, [sp, #28]
    4d7a:	f000 fd7d 	bl	5878 <_Bfree>
    4d7e:	970a      	str	r7, [sp, #40]	; 0x28
    4d80:	980d      	ldr	r0, [sp, #52]	; 0x34
    4d82:	1b42      	subs	r2, r0, r5
    4d84:	d008      	beq.n	4d98 <_dtoa_r+0x7c8>
    4d86:	9807      	ldr	r0, [sp, #28]
    4d88:	990a      	ldr	r1, [sp, #40]	; 0x28
    4d8a:	e002      	b.n	4d92 <_dtoa_r+0x7c2>
    4d8c:	9807      	ldr	r0, [sp, #28]
    4d8e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4d92:	f000 feda 	bl	5b4a <__pow5mult>
    4d96:	900a      	str	r0, [sp, #40]	; 0x28
    4d98:	9807      	ldr	r0, [sp, #28]
    4d9a:	2101      	movs	r1, #1
    4d9c:	f000 fe3d 	bl	5a1a <__i2b>
    4da0:	9d12      	ldr	r5, [sp, #72]	; 0x48
    4da2:	1c07      	adds	r7, r0, #0
    4da4:	2d00      	cmp	r5, #0
    4da6:	dd05      	ble.n	4db4 <_dtoa_r+0x7e4>
    4da8:	1c39      	adds	r1, r7, #0
    4daa:	9807      	ldr	r0, [sp, #28]
    4dac:	1c2a      	adds	r2, r5, #0
    4dae:	f000 fecc 	bl	5b4a <__pow5mult>
    4db2:	1c07      	adds	r7, r0, #0
    4db4:	9820      	ldr	r0, [sp, #128]	; 0x80
    4db6:	2500      	movs	r5, #0
    4db8:	2801      	cmp	r0, #1
    4dba:	dc10      	bgt.n	4dde <_dtoa_r+0x80e>
    4dbc:	9904      	ldr	r1, [sp, #16]
    4dbe:	42a9      	cmp	r1, r5
    4dc0:	d10d      	bne.n	4dde <_dtoa_r+0x80e>
    4dc2:	9a05      	ldr	r2, [sp, #20]
    4dc4:	0313      	lsls	r3, r2, #12
    4dc6:	42ab      	cmp	r3, r5
    4dc8:	d109      	bne.n	4dde <_dtoa_r+0x80e>
    4dca:	4b84      	ldr	r3, [pc, #528]	; (4fdc <_dtoa_r+0xa0c>)
    4dcc:	4213      	tst	r3, r2
    4dce:	d006      	beq.n	4dde <_dtoa_r+0x80e>
    4dd0:	9d02      	ldr	r5, [sp, #8]
    4dd2:	3501      	adds	r5, #1
    4dd4:	9502      	str	r5, [sp, #8]
    4dd6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4dd8:	3501      	adds	r5, #1
    4dda:	9509      	str	r5, [sp, #36]	; 0x24
    4ddc:	2501      	movs	r5, #1
    4dde:	9912      	ldr	r1, [sp, #72]	; 0x48
    4de0:	2001      	movs	r0, #1
    4de2:	2900      	cmp	r1, #0
    4de4:	d008      	beq.n	4df8 <_dtoa_r+0x828>
    4de6:	693b      	ldr	r3, [r7, #16]
    4de8:	3303      	adds	r3, #3
    4dea:	009b      	lsls	r3, r3, #2
    4dec:	18fb      	adds	r3, r7, r3
    4dee:	6858      	ldr	r0, [r3, #4]
    4df0:	f000 fdca 	bl	5988 <__hi0bits>
    4df4:	2320      	movs	r3, #32
    4df6:	1a18      	subs	r0, r3, r0
    4df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4dfa:	231f      	movs	r3, #31
    4dfc:	1880      	adds	r0, r0, r2
    4dfe:	4018      	ands	r0, r3
    4e00:	d00d      	beq.n	4e1e <_dtoa_r+0x84e>
    4e02:	2320      	movs	r3, #32
    4e04:	1a1b      	subs	r3, r3, r0
    4e06:	2b04      	cmp	r3, #4
    4e08:	dd06      	ble.n	4e18 <_dtoa_r+0x848>
    4e0a:	231c      	movs	r3, #28
    4e0c:	1a18      	subs	r0, r3, r0
    4e0e:	9b02      	ldr	r3, [sp, #8]
    4e10:	1824      	adds	r4, r4, r0
    4e12:	181b      	adds	r3, r3, r0
    4e14:	9302      	str	r3, [sp, #8]
    4e16:	e008      	b.n	4e2a <_dtoa_r+0x85a>
    4e18:	2b04      	cmp	r3, #4
    4e1a:	d008      	beq.n	4e2e <_dtoa_r+0x85e>
    4e1c:	1c18      	adds	r0, r3, #0
    4e1e:	9902      	ldr	r1, [sp, #8]
    4e20:	301c      	adds	r0, #28
    4e22:	1809      	adds	r1, r1, r0
    4e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4e26:	9102      	str	r1, [sp, #8]
    4e28:	1824      	adds	r4, r4, r0
    4e2a:	1812      	adds	r2, r2, r0
    4e2c:	9209      	str	r2, [sp, #36]	; 0x24
    4e2e:	9b02      	ldr	r3, [sp, #8]
    4e30:	2b00      	cmp	r3, #0
    4e32:	dd05      	ble.n	4e40 <_dtoa_r+0x870>
    4e34:	9807      	ldr	r0, [sp, #28]
    4e36:	990a      	ldr	r1, [sp, #40]	; 0x28
    4e38:	1c1a      	adds	r2, r3, #0
    4e3a:	f000 fec7 	bl	5bcc <__lshift>
    4e3e:	900a      	str	r0, [sp, #40]	; 0x28
    4e40:	9809      	ldr	r0, [sp, #36]	; 0x24
    4e42:	2800      	cmp	r0, #0
    4e44:	dd05      	ble.n	4e52 <_dtoa_r+0x882>
    4e46:	1c39      	adds	r1, r7, #0
    4e48:	9807      	ldr	r0, [sp, #28]
    4e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4e4c:	f000 febe 	bl	5bcc <__lshift>
    4e50:	1c07      	adds	r7, r0, #0
    4e52:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4e54:	2900      	cmp	r1, #0
    4e56:	d01b      	beq.n	4e90 <_dtoa_r+0x8c0>
    4e58:	980a      	ldr	r0, [sp, #40]	; 0x28
    4e5a:	1c39      	adds	r1, r7, #0
    4e5c:	f000 ff08 	bl	5c70 <__mcmp>
    4e60:	2800      	cmp	r0, #0
    4e62:	da15      	bge.n	4e90 <_dtoa_r+0x8c0>
    4e64:	9a06      	ldr	r2, [sp, #24]
    4e66:	2300      	movs	r3, #0
    4e68:	3a01      	subs	r2, #1
    4e6a:	9206      	str	r2, [sp, #24]
    4e6c:	9807      	ldr	r0, [sp, #28]
    4e6e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4e70:	220a      	movs	r2, #10
    4e72:	f000 fd0b 	bl	588c <__multadd>
    4e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4e78:	900a      	str	r0, [sp, #40]	; 0x28
    4e7a:	9810      	ldr	r0, [sp, #64]	; 0x40
    4e7c:	9308      	str	r3, [sp, #32]
    4e7e:	2800      	cmp	r0, #0
    4e80:	d006      	beq.n	4e90 <_dtoa_r+0x8c0>
    4e82:	1c31      	adds	r1, r6, #0
    4e84:	9807      	ldr	r0, [sp, #28]
    4e86:	220a      	movs	r2, #10
    4e88:	2300      	movs	r3, #0
    4e8a:	f000 fcff 	bl	588c <__multadd>
    4e8e:	1c06      	adds	r6, r0, #0
    4e90:	9908      	ldr	r1, [sp, #32]
    4e92:	2900      	cmp	r1, #0
    4e94:	dc2a      	bgt.n	4eec <_dtoa_r+0x91c>
    4e96:	9a20      	ldr	r2, [sp, #128]	; 0x80
    4e98:	2a02      	cmp	r2, #2
    4e9a:	dd27      	ble.n	4eec <_dtoa_r+0x91c>
    4e9c:	2900      	cmp	r1, #0
    4e9e:	d111      	bne.n	4ec4 <_dtoa_r+0x8f4>
    4ea0:	1c39      	adds	r1, r7, #0
    4ea2:	9807      	ldr	r0, [sp, #28]
    4ea4:	2205      	movs	r2, #5
    4ea6:	9b08      	ldr	r3, [sp, #32]
    4ea8:	f000 fcf0 	bl	588c <__multadd>
    4eac:	1c07      	adds	r7, r0, #0
    4eae:	1c39      	adds	r1, r7, #0
    4eb0:	980a      	ldr	r0, [sp, #40]	; 0x28
    4eb2:	f000 fedd 	bl	5c70 <__mcmp>
    4eb6:	2800      	cmp	r0, #0
    4eb8:	dc0d      	bgt.n	4ed6 <_dtoa_r+0x906>
    4eba:	e003      	b.n	4ec4 <_dtoa_r+0x8f4>
    4ebc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4ebe:	e000      	b.n	4ec2 <_dtoa_r+0x8f2>
    4ec0:	2700      	movs	r7, #0
    4ec2:	1c3e      	adds	r6, r7, #0
    4ec4:	9c21      	ldr	r4, [sp, #132]	; 0x84
    4ec6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4ec8:	43e4      	mvns	r4, r4
    4eca:	9406      	str	r4, [sp, #24]
    4ecc:	e00b      	b.n	4ee6 <_dtoa_r+0x916>
    4ece:	9d11      	ldr	r5, [sp, #68]	; 0x44
    4ed0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4ed2:	9506      	str	r5, [sp, #24]
    4ed4:	1c3e      	adds	r6, r7, #0
    4ed6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4ed8:	2331      	movs	r3, #49	; 0x31
    4eda:	7023      	strb	r3, [r4, #0]
    4edc:	9c06      	ldr	r4, [sp, #24]
    4ede:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    4ee0:	3401      	adds	r4, #1
    4ee2:	3501      	adds	r5, #1
    4ee4:	9406      	str	r4, [sp, #24]
    4ee6:	9602      	str	r6, [sp, #8]
    4ee8:	2600      	movs	r6, #0
    4eea:	e10f      	b.n	510c <_dtoa_r+0xb3c>
    4eec:	9810      	ldr	r0, [sp, #64]	; 0x40
    4eee:	2800      	cmp	r0, #0
    4ef0:	d100      	bne.n	4ef4 <_dtoa_r+0x924>
    4ef2:	e0c5      	b.n	5080 <_dtoa_r+0xab0>
    4ef4:	2c00      	cmp	r4, #0
    4ef6:	dd05      	ble.n	4f04 <_dtoa_r+0x934>
    4ef8:	1c31      	adds	r1, r6, #0
    4efa:	9807      	ldr	r0, [sp, #28]
    4efc:	1c22      	adds	r2, r4, #0
    4efe:	f000 fe65 	bl	5bcc <__lshift>
    4f02:	1c06      	adds	r6, r0, #0
    4f04:	9602      	str	r6, [sp, #8]
    4f06:	2d00      	cmp	r5, #0
    4f08:	d012      	beq.n	4f30 <_dtoa_r+0x960>
    4f0a:	6871      	ldr	r1, [r6, #4]
    4f0c:	9807      	ldr	r0, [sp, #28]
    4f0e:	f000 fc8b 	bl	5828 <_Balloc>
    4f12:	6932      	ldr	r2, [r6, #16]
    4f14:	1c31      	adds	r1, r6, #0
    4f16:	3202      	adds	r2, #2
    4f18:	1c04      	adds	r4, r0, #0
    4f1a:	0092      	lsls	r2, r2, #2
    4f1c:	310c      	adds	r1, #12
    4f1e:	300c      	adds	r0, #12
    4f20:	f7fe fa68 	bl	33f4 <memcpy>
    4f24:	9807      	ldr	r0, [sp, #28]
    4f26:	1c21      	adds	r1, r4, #0
    4f28:	2201      	movs	r2, #1
    4f2a:	f000 fe4f 	bl	5bcc <__lshift>
    4f2e:	9002      	str	r0, [sp, #8]
    4f30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4f32:	9d08      	ldr	r5, [sp, #32]
    4f34:	1c23      	adds	r3, r4, #0
    4f36:	3b01      	subs	r3, #1
    4f38:	195b      	adds	r3, r3, r5
    4f3a:	9409      	str	r4, [sp, #36]	; 0x24
    4f3c:	9310      	str	r3, [sp, #64]	; 0x40
    4f3e:	1c39      	adds	r1, r7, #0
    4f40:	980a      	ldr	r0, [sp, #40]	; 0x28
    4f42:	f7ff fab9 	bl	44b8 <quorem>
    4f46:	1c31      	adds	r1, r6, #0
    4f48:	900d      	str	r0, [sp, #52]	; 0x34
    4f4a:	1c04      	adds	r4, r0, #0
    4f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    4f4e:	f000 fe8f 	bl	5c70 <__mcmp>
    4f52:	1c39      	adds	r1, r7, #0
    4f54:	900c      	str	r0, [sp, #48]	; 0x30
    4f56:	9a02      	ldr	r2, [sp, #8]
    4f58:	9807      	ldr	r0, [sp, #28]
    4f5a:	f000 fea4 	bl	5ca6 <__mdiff>
    4f5e:	1c05      	adds	r5, r0, #0
    4f60:	68c0      	ldr	r0, [r0, #12]
    4f62:	3430      	adds	r4, #48	; 0x30
    4f64:	2800      	cmp	r0, #0
    4f66:	d105      	bne.n	4f74 <_dtoa_r+0x9a4>
    4f68:	980a      	ldr	r0, [sp, #40]	; 0x28
    4f6a:	1c29      	adds	r1, r5, #0
    4f6c:	f000 fe80 	bl	5c70 <__mcmp>
    4f70:	9008      	str	r0, [sp, #32]
    4f72:	e001      	b.n	4f78 <_dtoa_r+0x9a8>
    4f74:	2101      	movs	r1, #1
    4f76:	9108      	str	r1, [sp, #32]
    4f78:	1c29      	adds	r1, r5, #0
    4f7a:	9807      	ldr	r0, [sp, #28]
    4f7c:	f000 fc7c 	bl	5878 <_Bfree>
    4f80:	9b08      	ldr	r3, [sp, #32]
    4f82:	9d20      	ldr	r5, [sp, #128]	; 0x80
    4f84:	432b      	orrs	r3, r5
    4f86:	d10d      	bne.n	4fa4 <_dtoa_r+0x9d4>
    4f88:	9804      	ldr	r0, [sp, #16]
    4f8a:	2301      	movs	r3, #1
    4f8c:	4203      	tst	r3, r0
    4f8e:	d109      	bne.n	4fa4 <_dtoa_r+0x9d4>
    4f90:	2c39      	cmp	r4, #57	; 0x39
    4f92:	d044      	beq.n	501e <_dtoa_r+0xa4e>
    4f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4f96:	2d00      	cmp	r5, #0
    4f98:	dd01      	ble.n	4f9e <_dtoa_r+0x9ce>
    4f9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    4f9c:	3431      	adds	r4, #49	; 0x31
    4f9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4fa0:	3501      	adds	r5, #1
    4fa2:	e044      	b.n	502e <_dtoa_r+0xa5e>
    4fa4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4fa6:	2d00      	cmp	r5, #0
    4fa8:	da03      	bge.n	4fb2 <_dtoa_r+0x9e2>
    4faa:	9d08      	ldr	r5, [sp, #32]
    4fac:	2d00      	cmp	r5, #0
    4fae:	dc17      	bgt.n	4fe0 <_dtoa_r+0xa10>
    4fb0:	e028      	b.n	5004 <_dtoa_r+0xa34>
    4fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4fb4:	9d20      	ldr	r5, [sp, #128]	; 0x80
    4fb6:	432b      	orrs	r3, r5
    4fb8:	d129      	bne.n	500e <_dtoa_r+0xa3e>
    4fba:	9804      	ldr	r0, [sp, #16]
    4fbc:	2301      	movs	r3, #1
    4fbe:	4203      	tst	r3, r0
    4fc0:	d125      	bne.n	500e <_dtoa_r+0xa3e>
    4fc2:	e7f2      	b.n	4faa <_dtoa_r+0x9da>
    4fc4:	46c0      	nop			; (mov r8, r8)
    4fc6:	46c0      	nop			; (mov r8, r8)
    4fc8:	00000000 	.word	0x00000000
    4fcc:	40240000 	.word	0x40240000
	...
    4fd8:	00000433 	.word	0x00000433
    4fdc:	7ff00000 	.word	0x7ff00000
    4fe0:	990a      	ldr	r1, [sp, #40]	; 0x28
    4fe2:	9807      	ldr	r0, [sp, #28]
    4fe4:	2201      	movs	r2, #1
    4fe6:	f000 fdf1 	bl	5bcc <__lshift>
    4fea:	1c39      	adds	r1, r7, #0
    4fec:	900a      	str	r0, [sp, #40]	; 0x28
    4fee:	f000 fe3f 	bl	5c70 <__mcmp>
    4ff2:	2800      	cmp	r0, #0
    4ff4:	dc02      	bgt.n	4ffc <_dtoa_r+0xa2c>
    4ff6:	d105      	bne.n	5004 <_dtoa_r+0xa34>
    4ff8:	07e1      	lsls	r1, r4, #31
    4ffa:	d503      	bpl.n	5004 <_dtoa_r+0xa34>
    4ffc:	2c39      	cmp	r4, #57	; 0x39
    4ffe:	d00e      	beq.n	501e <_dtoa_r+0xa4e>
    5000:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    5002:	3431      	adds	r4, #49	; 0x31
    5004:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5006:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5008:	3501      	adds	r5, #1
    500a:	7014      	strb	r4, [r2, #0]
    500c:	e07e      	b.n	510c <_dtoa_r+0xb3c>
    500e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5010:	3501      	adds	r5, #1
    5012:	950c      	str	r5, [sp, #48]	; 0x30
    5014:	9d08      	ldr	r5, [sp, #32]
    5016:	2d00      	cmp	r5, #0
    5018:	dd0c      	ble.n	5034 <_dtoa_r+0xa64>
    501a:	2c39      	cmp	r4, #57	; 0x39
    501c:	d105      	bne.n	502a <_dtoa_r+0xa5a>
    501e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5020:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5022:	2339      	movs	r3, #57	; 0x39
    5024:	3501      	adds	r5, #1
    5026:	7023      	strb	r3, [r4, #0]
    5028:	e05b      	b.n	50e2 <_dtoa_r+0xb12>
    502a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    502c:	3401      	adds	r4, #1
    502e:	9809      	ldr	r0, [sp, #36]	; 0x24
    5030:	7004      	strb	r4, [r0, #0]
    5032:	e06b      	b.n	510c <_dtoa_r+0xb3c>
    5034:	9909      	ldr	r1, [sp, #36]	; 0x24
    5036:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5038:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    503a:	700c      	strb	r4, [r1, #0]
    503c:	4291      	cmp	r1, r2
    503e:	d03d      	beq.n	50bc <_dtoa_r+0xaec>
    5040:	990a      	ldr	r1, [sp, #40]	; 0x28
    5042:	220a      	movs	r2, #10
    5044:	2300      	movs	r3, #0
    5046:	9807      	ldr	r0, [sp, #28]
    5048:	f000 fc20 	bl	588c <__multadd>
    504c:	9c02      	ldr	r4, [sp, #8]
    504e:	900a      	str	r0, [sp, #40]	; 0x28
    5050:	1c31      	adds	r1, r6, #0
    5052:	9807      	ldr	r0, [sp, #28]
    5054:	220a      	movs	r2, #10
    5056:	2300      	movs	r3, #0
    5058:	42a6      	cmp	r6, r4
    505a:	d104      	bne.n	5066 <_dtoa_r+0xa96>
    505c:	f000 fc16 	bl	588c <__multadd>
    5060:	1c06      	adds	r6, r0, #0
    5062:	9002      	str	r0, [sp, #8]
    5064:	e009      	b.n	507a <_dtoa_r+0xaaa>
    5066:	f000 fc11 	bl	588c <__multadd>
    506a:	9902      	ldr	r1, [sp, #8]
    506c:	1c06      	adds	r6, r0, #0
    506e:	220a      	movs	r2, #10
    5070:	9807      	ldr	r0, [sp, #28]
    5072:	2300      	movs	r3, #0
    5074:	f000 fc0a 	bl	588c <__multadd>
    5078:	9002      	str	r0, [sp, #8]
    507a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    507c:	9509      	str	r5, [sp, #36]	; 0x24
    507e:	e75e      	b.n	4f3e <_dtoa_r+0x96e>
    5080:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    5082:	1c39      	adds	r1, r7, #0
    5084:	980a      	ldr	r0, [sp, #40]	; 0x28
    5086:	f7ff fa17 	bl	44b8 <quorem>
    508a:	1c04      	adds	r4, r0, #0
    508c:	3430      	adds	r4, #48	; 0x30
    508e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5090:	9908      	ldr	r1, [sp, #32]
    5092:	702c      	strb	r4, [r5, #0]
    5094:	3501      	adds	r5, #1
    5096:	1a2b      	subs	r3, r5, r0
    5098:	428b      	cmp	r3, r1
    509a:	db07      	blt.n	50ac <_dtoa_r+0xadc>
    509c:	1e0b      	subs	r3, r1, #0
    509e:	dc00      	bgt.n	50a2 <_dtoa_r+0xad2>
    50a0:	2301      	movs	r3, #1
    50a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    50a4:	9602      	str	r6, [sp, #8]
    50a6:	18d5      	adds	r5, r2, r3
    50a8:	2600      	movs	r6, #0
    50aa:	e007      	b.n	50bc <_dtoa_r+0xaec>
    50ac:	9807      	ldr	r0, [sp, #28]
    50ae:	990a      	ldr	r1, [sp, #40]	; 0x28
    50b0:	220a      	movs	r2, #10
    50b2:	2300      	movs	r3, #0
    50b4:	f000 fbea 	bl	588c <__multadd>
    50b8:	900a      	str	r0, [sp, #40]	; 0x28
    50ba:	e7e2      	b.n	5082 <_dtoa_r+0xab2>
    50bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    50be:	9807      	ldr	r0, [sp, #28]
    50c0:	2201      	movs	r2, #1
    50c2:	f000 fd83 	bl	5bcc <__lshift>
    50c6:	1c39      	adds	r1, r7, #0
    50c8:	900a      	str	r0, [sp, #40]	; 0x28
    50ca:	f000 fdd1 	bl	5c70 <__mcmp>
    50ce:	2800      	cmp	r0, #0
    50d0:	dc07      	bgt.n	50e2 <_dtoa_r+0xb12>
    50d2:	d115      	bne.n	5100 <_dtoa_r+0xb30>
    50d4:	07e3      	lsls	r3, r4, #31
    50d6:	d404      	bmi.n	50e2 <_dtoa_r+0xb12>
    50d8:	e012      	b.n	5100 <_dtoa_r+0xb30>
    50da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    50dc:	42a3      	cmp	r3, r4
    50de:	d005      	beq.n	50ec <_dtoa_r+0xb1c>
    50e0:	1c1d      	adds	r5, r3, #0
    50e2:	1e6b      	subs	r3, r5, #1
    50e4:	781a      	ldrb	r2, [r3, #0]
    50e6:	2a39      	cmp	r2, #57	; 0x39
    50e8:	d0f7      	beq.n	50da <_dtoa_r+0xb0a>
    50ea:	e006      	b.n	50fa <_dtoa_r+0xb2a>
    50ec:	9c06      	ldr	r4, [sp, #24]
    50ee:	2331      	movs	r3, #49	; 0x31
    50f0:	3401      	adds	r4, #1
    50f2:	9406      	str	r4, [sp, #24]
    50f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    50f6:	7023      	strb	r3, [r4, #0]
    50f8:	e008      	b.n	510c <_dtoa_r+0xb3c>
    50fa:	3201      	adds	r2, #1
    50fc:	701a      	strb	r2, [r3, #0]
    50fe:	e005      	b.n	510c <_dtoa_r+0xb3c>
    5100:	1e6b      	subs	r3, r5, #1
    5102:	781a      	ldrb	r2, [r3, #0]
    5104:	2a30      	cmp	r2, #48	; 0x30
    5106:	d101      	bne.n	510c <_dtoa_r+0xb3c>
    5108:	1c1d      	adds	r5, r3, #0
    510a:	e7f9      	b.n	5100 <_dtoa_r+0xb30>
    510c:	9807      	ldr	r0, [sp, #28]
    510e:	1c39      	adds	r1, r7, #0
    5110:	f000 fbb2 	bl	5878 <_Bfree>
    5114:	9c02      	ldr	r4, [sp, #8]
    5116:	2c00      	cmp	r4, #0
    5118:	d00e      	beq.n	5138 <_dtoa_r+0xb68>
    511a:	2e00      	cmp	r6, #0
    511c:	d005      	beq.n	512a <_dtoa_r+0xb5a>
    511e:	42a6      	cmp	r6, r4
    5120:	d003      	beq.n	512a <_dtoa_r+0xb5a>
    5122:	9807      	ldr	r0, [sp, #28]
    5124:	1c31      	adds	r1, r6, #0
    5126:	f000 fba7 	bl	5878 <_Bfree>
    512a:	9807      	ldr	r0, [sp, #28]
    512c:	9902      	ldr	r1, [sp, #8]
    512e:	f000 fba3 	bl	5878 <_Bfree>
    5132:	e001      	b.n	5138 <_dtoa_r+0xb68>
    5134:	9c11      	ldr	r4, [sp, #68]	; 0x44
    5136:	9406      	str	r4, [sp, #24]
    5138:	9807      	ldr	r0, [sp, #28]
    513a:	990a      	ldr	r1, [sp, #40]	; 0x28
    513c:	f000 fb9c 	bl	5878 <_Bfree>
    5140:	2300      	movs	r3, #0
    5142:	702b      	strb	r3, [r5, #0]
    5144:	9b06      	ldr	r3, [sp, #24]
    5146:	9c22      	ldr	r4, [sp, #136]	; 0x88
    5148:	3301      	adds	r3, #1
    514a:	6023      	str	r3, [r4, #0]
    514c:	9c24      	ldr	r4, [sp, #144]	; 0x90
    514e:	2c00      	cmp	r4, #0
    5150:	d003      	beq.n	515a <_dtoa_r+0xb8a>
    5152:	6025      	str	r5, [r4, #0]
    5154:	e001      	b.n	515a <_dtoa_r+0xb8a>
    5156:	4802      	ldr	r0, [pc, #8]	; (5160 <_dtoa_r+0xb90>)
    5158:	e000      	b.n	515c <_dtoa_r+0xb8c>
    515a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    515c:	b01b      	add	sp, #108	; 0x6c
    515e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5160:	00007d0c 	.word	0x00007d0c
    5164:	46c0      	nop			; (mov r8, r8)
    5166:	46c0      	nop			; (mov r8, r8)

00005168 <_malloc_trim_r>:
    5168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    516a:	1c0d      	adds	r5, r1, #0
    516c:	1c04      	adds	r4, r0, #0
    516e:	f000 fb58 	bl	5822 <__malloc_lock>
    5172:	4e20      	ldr	r6, [pc, #128]	; (51f4 <_malloc_trim_r+0x8c>)
    5174:	4a20      	ldr	r2, [pc, #128]	; (51f8 <_malloc_trim_r+0x90>)
    5176:	68b3      	ldr	r3, [r6, #8]
    5178:	685f      	ldr	r7, [r3, #4]
    517a:	2303      	movs	r3, #3
    517c:	439f      	bics	r7, r3
    517e:	1b7d      	subs	r5, r7, r5
    5180:	18ad      	adds	r5, r5, r2
    5182:	0b2d      	lsrs	r5, r5, #12
    5184:	4b1d      	ldr	r3, [pc, #116]	; (51fc <_malloc_trim_r+0x94>)
    5186:	3d01      	subs	r5, #1
    5188:	032d      	lsls	r5, r5, #12
    518a:	429d      	cmp	r5, r3
    518c:	dc04      	bgt.n	5198 <_malloc_trim_r+0x30>
    518e:	1c20      	adds	r0, r4, #0
    5190:	f000 fb48 	bl	5824 <__malloc_unlock>
    5194:	2000      	movs	r0, #0
    5196:	e02b      	b.n	51f0 <_malloc_trim_r+0x88>
    5198:	1c20      	adds	r0, r4, #0
    519a:	2100      	movs	r1, #0
    519c:	f000 ff5a 	bl	6054 <_sbrk_r>
    51a0:	68b2      	ldr	r2, [r6, #8]
    51a2:	19d3      	adds	r3, r2, r7
    51a4:	4298      	cmp	r0, r3
    51a6:	d1f2      	bne.n	518e <_malloc_trim_r+0x26>
    51a8:	4269      	negs	r1, r5
    51aa:	1c20      	adds	r0, r4, #0
    51ac:	f000 ff52 	bl	6054 <_sbrk_r>
    51b0:	3001      	adds	r0, #1
    51b2:	d110      	bne.n	51d6 <_malloc_trim_r+0x6e>
    51b4:	1c20      	adds	r0, r4, #0
    51b6:	2100      	movs	r1, #0
    51b8:	f000 ff4c 	bl	6054 <_sbrk_r>
    51bc:	68b3      	ldr	r3, [r6, #8]
    51be:	1ac2      	subs	r2, r0, r3
    51c0:	2a0f      	cmp	r2, #15
    51c2:	dde4      	ble.n	518e <_malloc_trim_r+0x26>
    51c4:	490e      	ldr	r1, [pc, #56]	; (5200 <_malloc_trim_r+0x98>)
    51c6:	6809      	ldr	r1, [r1, #0]
    51c8:	1a40      	subs	r0, r0, r1
    51ca:	490e      	ldr	r1, [pc, #56]	; (5204 <_malloc_trim_r+0x9c>)
    51cc:	6008      	str	r0, [r1, #0]
    51ce:	2101      	movs	r1, #1
    51d0:	430a      	orrs	r2, r1
    51d2:	605a      	str	r2, [r3, #4]
    51d4:	e7db      	b.n	518e <_malloc_trim_r+0x26>
    51d6:	68b3      	ldr	r3, [r6, #8]
    51d8:	1b7f      	subs	r7, r7, r5
    51da:	2601      	movs	r6, #1
    51dc:	4337      	orrs	r7, r6
    51de:	605f      	str	r7, [r3, #4]
    51e0:	4b08      	ldr	r3, [pc, #32]	; (5204 <_malloc_trim_r+0x9c>)
    51e2:	1c20      	adds	r0, r4, #0
    51e4:	681a      	ldr	r2, [r3, #0]
    51e6:	1b55      	subs	r5, r2, r5
    51e8:	601d      	str	r5, [r3, #0]
    51ea:	f000 fb1b 	bl	5824 <__malloc_unlock>
    51ee:	1c30      	adds	r0, r6, #0
    51f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51f2:	46c0      	nop			; (mov r8, r8)
    51f4:	200004b4 	.word	0x200004b4
    51f8:	00000fef 	.word	0x00000fef
    51fc:	00000fff 	.word	0x00000fff
    5200:	200008bc 	.word	0x200008bc
    5204:	20000930 	.word	0x20000930

00005208 <_free_r>:
    5208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    520a:	1c04      	adds	r4, r0, #0
    520c:	1e0d      	subs	r5, r1, #0
    520e:	d100      	bne.n	5212 <_free_r+0xa>
    5210:	e0aa      	b.n	5368 <_free_r+0x160>
    5212:	f000 fb06 	bl	5822 <__malloc_lock>
    5216:	1c29      	adds	r1, r5, #0
    5218:	3908      	subs	r1, #8
    521a:	684f      	ldr	r7, [r1, #4]
    521c:	2001      	movs	r0, #1
    521e:	1c3b      	adds	r3, r7, #0
    5220:	4383      	bics	r3, r0
    5222:	18c8      	adds	r0, r1, r3
    5224:	6846      	ldr	r6, [r0, #4]
    5226:	2203      	movs	r2, #3
    5228:	4396      	bics	r6, r2
    522a:	4a50      	ldr	r2, [pc, #320]	; (536c <_free_r+0x164>)
    522c:	6895      	ldr	r5, [r2, #8]
    522e:	46ac      	mov	ip, r5
    5230:	2501      	movs	r5, #1
    5232:	402f      	ands	r7, r5
    5234:	4560      	cmp	r0, ip
    5236:	d11a      	bne.n	526e <_free_r+0x66>
    5238:	18f3      	adds	r3, r6, r3
    523a:	2f00      	cmp	r7, #0
    523c:	d106      	bne.n	524c <_free_r+0x44>
    523e:	6808      	ldr	r0, [r1, #0]
    5240:	1a09      	subs	r1, r1, r0
    5242:	688d      	ldr	r5, [r1, #8]
    5244:	181b      	adds	r3, r3, r0
    5246:	68c8      	ldr	r0, [r1, #12]
    5248:	60e8      	str	r0, [r5, #12]
    524a:	6085      	str	r5, [r0, #8]
    524c:	2001      	movs	r0, #1
    524e:	4318      	orrs	r0, r3
    5250:	6048      	str	r0, [r1, #4]
    5252:	6091      	str	r1, [r2, #8]
    5254:	4a46      	ldr	r2, [pc, #280]	; (5370 <_free_r+0x168>)
    5256:	6812      	ldr	r2, [r2, #0]
    5258:	4293      	cmp	r3, r2
    525a:	d304      	bcc.n	5266 <_free_r+0x5e>
    525c:	4b45      	ldr	r3, [pc, #276]	; (5374 <_free_r+0x16c>)
    525e:	1c20      	adds	r0, r4, #0
    5260:	6819      	ldr	r1, [r3, #0]
    5262:	f7ff ff81 	bl	5168 <_malloc_trim_r>
    5266:	1c20      	adds	r0, r4, #0
    5268:	f000 fadc 	bl	5824 <__malloc_unlock>
    526c:	e07c      	b.n	5368 <_free_r+0x160>
    526e:	2500      	movs	r5, #0
    5270:	6046      	str	r6, [r0, #4]
    5272:	9501      	str	r5, [sp, #4]
    5274:	42af      	cmp	r7, r5
    5276:	d10d      	bne.n	5294 <_free_r+0x8c>
    5278:	680f      	ldr	r7, [r1, #0]
    527a:	2508      	movs	r5, #8
    527c:	1bc9      	subs	r1, r1, r7
    527e:	19db      	adds	r3, r3, r7
    5280:	688f      	ldr	r7, [r1, #8]
    5282:	18ad      	adds	r5, r5, r2
    5284:	42af      	cmp	r7, r5
    5286:	d003      	beq.n	5290 <_free_r+0x88>
    5288:	68cd      	ldr	r5, [r1, #12]
    528a:	60fd      	str	r5, [r7, #12]
    528c:	60af      	str	r7, [r5, #8]
    528e:	e001      	b.n	5294 <_free_r+0x8c>
    5290:	2501      	movs	r5, #1
    5292:	9501      	str	r5, [sp, #4]
    5294:	1987      	adds	r7, r0, r6
    5296:	687d      	ldr	r5, [r7, #4]
    5298:	2701      	movs	r7, #1
    529a:	423d      	tst	r5, r7
    529c:	d110      	bne.n	52c0 <_free_r+0xb8>
    529e:	9d01      	ldr	r5, [sp, #4]
    52a0:	199b      	adds	r3, r3, r6
    52a2:	6886      	ldr	r6, [r0, #8]
    52a4:	2d00      	cmp	r5, #0
    52a6:	d108      	bne.n	52ba <_free_r+0xb2>
    52a8:	4d33      	ldr	r5, [pc, #204]	; (5378 <_free_r+0x170>)
    52aa:	42ae      	cmp	r6, r5
    52ac:	d105      	bne.n	52ba <_free_r+0xb2>
    52ae:	60f1      	str	r1, [r6, #12]
    52b0:	60b1      	str	r1, [r6, #8]
    52b2:	9701      	str	r7, [sp, #4]
    52b4:	60ce      	str	r6, [r1, #12]
    52b6:	608e      	str	r6, [r1, #8]
    52b8:	e002      	b.n	52c0 <_free_r+0xb8>
    52ba:	68c0      	ldr	r0, [r0, #12]
    52bc:	60f0      	str	r0, [r6, #12]
    52be:	6086      	str	r6, [r0, #8]
    52c0:	2001      	movs	r0, #1
    52c2:	1c06      	adds	r6, r0, #0
    52c4:	9d01      	ldr	r5, [sp, #4]
    52c6:	431e      	orrs	r6, r3
    52c8:	604e      	str	r6, [r1, #4]
    52ca:	50cb      	str	r3, [r1, r3]
    52cc:	2d00      	cmp	r5, #0
    52ce:	d1ca      	bne.n	5266 <_free_r+0x5e>
    52d0:	4d2a      	ldr	r5, [pc, #168]	; (537c <_free_r+0x174>)
    52d2:	42ab      	cmp	r3, r5
    52d4:	d80d      	bhi.n	52f2 <_free_r+0xea>
    52d6:	08db      	lsrs	r3, r3, #3
    52d8:	109d      	asrs	r5, r3, #2
    52da:	40a8      	lsls	r0, r5
    52dc:	6855      	ldr	r5, [r2, #4]
    52de:	00db      	lsls	r3, r3, #3
    52e0:	4328      	orrs	r0, r5
    52e2:	6050      	str	r0, [r2, #4]
    52e4:	18d2      	adds	r2, r2, r3
    52e6:	6893      	ldr	r3, [r2, #8]
    52e8:	60ca      	str	r2, [r1, #12]
    52ea:	608b      	str	r3, [r1, #8]
    52ec:	6091      	str	r1, [r2, #8]
    52ee:	60d9      	str	r1, [r3, #12]
    52f0:	e7b9      	b.n	5266 <_free_r+0x5e>
    52f2:	0a5d      	lsrs	r5, r3, #9
    52f4:	2d04      	cmp	r5, #4
    52f6:	d802      	bhi.n	52fe <_free_r+0xf6>
    52f8:	0998      	lsrs	r0, r3, #6
    52fa:	3038      	adds	r0, #56	; 0x38
    52fc:	e016      	b.n	532c <_free_r+0x124>
    52fe:	2d14      	cmp	r5, #20
    5300:	d802      	bhi.n	5308 <_free_r+0x100>
    5302:	1c28      	adds	r0, r5, #0
    5304:	305b      	adds	r0, #91	; 0x5b
    5306:	e011      	b.n	532c <_free_r+0x124>
    5308:	2d54      	cmp	r5, #84	; 0x54
    530a:	d802      	bhi.n	5312 <_free_r+0x10a>
    530c:	0b18      	lsrs	r0, r3, #12
    530e:	306e      	adds	r0, #110	; 0x6e
    5310:	e00c      	b.n	532c <_free_r+0x124>
    5312:	20aa      	movs	r0, #170	; 0xaa
    5314:	0040      	lsls	r0, r0, #1
    5316:	4285      	cmp	r5, r0
    5318:	d802      	bhi.n	5320 <_free_r+0x118>
    531a:	0bd8      	lsrs	r0, r3, #15
    531c:	3077      	adds	r0, #119	; 0x77
    531e:	e005      	b.n	532c <_free_r+0x124>
    5320:	4e17      	ldr	r6, [pc, #92]	; (5380 <_free_r+0x178>)
    5322:	207e      	movs	r0, #126	; 0x7e
    5324:	42b5      	cmp	r5, r6
    5326:	d801      	bhi.n	532c <_free_r+0x124>
    5328:	0c98      	lsrs	r0, r3, #18
    532a:	307c      	adds	r0, #124	; 0x7c
    532c:	00c6      	lsls	r6, r0, #3
    532e:	1996      	adds	r6, r2, r6
    5330:	68b5      	ldr	r5, [r6, #8]
    5332:	42b5      	cmp	r5, r6
    5334:	d001      	beq.n	533a <_free_r+0x132>
    5336:	1c2a      	adds	r2, r5, #0
    5338:	e00b      	b.n	5352 <_free_r+0x14a>
    533a:	1080      	asrs	r0, r0, #2
    533c:	2301      	movs	r3, #1
    533e:	4083      	lsls	r3, r0
    5340:	1c18      	adds	r0, r3, #0
    5342:	6853      	ldr	r3, [r2, #4]
    5344:	4318      	orrs	r0, r3
    5346:	6050      	str	r0, [r2, #4]
    5348:	1c2a      	adds	r2, r5, #0
    534a:	e008      	b.n	535e <_free_r+0x156>
    534c:	6892      	ldr	r2, [r2, #8]
    534e:	42b2      	cmp	r2, r6
    5350:	d004      	beq.n	535c <_free_r+0x154>
    5352:	6855      	ldr	r5, [r2, #4]
    5354:	2003      	movs	r0, #3
    5356:	4385      	bics	r5, r0
    5358:	42ab      	cmp	r3, r5
    535a:	d3f7      	bcc.n	534c <_free_r+0x144>
    535c:	68d5      	ldr	r5, [r2, #12]
    535e:	60cd      	str	r5, [r1, #12]
    5360:	608a      	str	r2, [r1, #8]
    5362:	60a9      	str	r1, [r5, #8]
    5364:	60d1      	str	r1, [r2, #12]
    5366:	e77e      	b.n	5266 <_free_r+0x5e>
    5368:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    536a:	46c0      	nop			; (mov r8, r8)
    536c:	200004b4 	.word	0x200004b4
    5370:	200008c0 	.word	0x200008c0
    5374:	2000092c 	.word	0x2000092c
    5378:	200004bc 	.word	0x200004bc
    537c:	000001ff 	.word	0x000001ff
    5380:	00000554 	.word	0x00000554

00005384 <_setlocale_r>:
    5384:	b538      	push	{r3, r4, r5, lr}
    5386:	1c14      	adds	r4, r2, #0
    5388:	4d0c      	ldr	r5, [pc, #48]	; (53bc <_setlocale_r+0x38>)
    538a:	d101      	bne.n	5390 <_setlocale_r+0xc>
    538c:	1c28      	adds	r0, r5, #0
    538e:	e013      	b.n	53b8 <_setlocale_r+0x34>
    5390:	1c10      	adds	r0, r2, #0
    5392:	490b      	ldr	r1, [pc, #44]	; (53c0 <_setlocale_r+0x3c>)
    5394:	f000 fe70 	bl	6078 <strcmp>
    5398:	2800      	cmp	r0, #0
    539a:	d0f7      	beq.n	538c <_setlocale_r+0x8>
    539c:	1c20      	adds	r0, r4, #0
    539e:	1c29      	adds	r1, r5, #0
    53a0:	f000 fe6a 	bl	6078 <strcmp>
    53a4:	2800      	cmp	r0, #0
    53a6:	d0f1      	beq.n	538c <_setlocale_r+0x8>
    53a8:	1c20      	adds	r0, r4, #0
    53aa:	4906      	ldr	r1, [pc, #24]	; (53c4 <_setlocale_r+0x40>)
    53ac:	f000 fe64 	bl	6078 <strcmp>
    53b0:	4243      	negs	r3, r0
    53b2:	4158      	adcs	r0, r3
    53b4:	4240      	negs	r0, r0
    53b6:	4028      	ands	r0, r5
    53b8:	bd38      	pop	{r3, r4, r5, pc}
    53ba:	46c0      	nop			; (mov r8, r8)
    53bc:	00007cb8 	.word	0x00007cb8
    53c0:	00007d1b 	.word	0x00007d1b
    53c4:	00007d22 	.word	0x00007d22

000053c8 <__locale_charset>:
    53c8:	4800      	ldr	r0, [pc, #0]	; (53cc <__locale_charset+0x4>)
    53ca:	4770      	bx	lr
    53cc:	20000438 	.word	0x20000438

000053d0 <__locale_mb_cur_max>:
    53d0:	4b01      	ldr	r3, [pc, #4]	; (53d8 <__locale_mb_cur_max+0x8>)
    53d2:	6a18      	ldr	r0, [r3, #32]
    53d4:	4770      	bx	lr
    53d6:	46c0      	nop			; (mov r8, r8)
    53d8:	20000438 	.word	0x20000438

000053dc <__locale_msgcharset>:
    53dc:	4801      	ldr	r0, [pc, #4]	; (53e4 <__locale_msgcharset+0x8>)
    53de:	3024      	adds	r0, #36	; 0x24
    53e0:	4770      	bx	lr
    53e2:	46c0      	nop			; (mov r8, r8)
    53e4:	20000438 	.word	0x20000438

000053e8 <__locale_cjk_lang>:
    53e8:	2000      	movs	r0, #0
    53ea:	4770      	bx	lr

000053ec <_localeconv_r>:
    53ec:	4801      	ldr	r0, [pc, #4]	; (53f4 <_localeconv_r+0x8>)
    53ee:	3044      	adds	r0, #68	; 0x44
    53f0:	4770      	bx	lr
    53f2:	46c0      	nop			; (mov r8, r8)
    53f4:	20000438 	.word	0x20000438

000053f8 <setlocale>:
    53f8:	b508      	push	{r3, lr}
    53fa:	1c0a      	adds	r2, r1, #0
    53fc:	4903      	ldr	r1, [pc, #12]	; (540c <setlocale+0x14>)
    53fe:	1c03      	adds	r3, r0, #0
    5400:	6808      	ldr	r0, [r1, #0]
    5402:	1c19      	adds	r1, r3, #0
    5404:	f7ff ffbe 	bl	5384 <_setlocale_r>
    5408:	bd08      	pop	{r3, pc}
    540a:	46c0      	nop			; (mov r8, r8)
    540c:	20000008 	.word	0x20000008

00005410 <localeconv>:
    5410:	4801      	ldr	r0, [pc, #4]	; (5418 <localeconv+0x8>)
    5412:	3044      	adds	r0, #68	; 0x44
    5414:	4770      	bx	lr
    5416:	46c0      	nop			; (mov r8, r8)
    5418:	20000438 	.word	0x20000438

0000541c <_malloc_r>:
    541c:	b5f0      	push	{r4, r5, r6, r7, lr}
    541e:	1c0b      	adds	r3, r1, #0
    5420:	b087      	sub	sp, #28
    5422:	330b      	adds	r3, #11
    5424:	9003      	str	r0, [sp, #12]
    5426:	2b16      	cmp	r3, #22
    5428:	d904      	bls.n	5434 <_malloc_r+0x18>
    542a:	2207      	movs	r2, #7
    542c:	4393      	bics	r3, r2
    542e:	9301      	str	r3, [sp, #4]
    5430:	d502      	bpl.n	5438 <_malloc_r+0x1c>
    5432:	e004      	b.n	543e <_malloc_r+0x22>
    5434:	2410      	movs	r4, #16
    5436:	9401      	str	r4, [sp, #4]
    5438:	9d01      	ldr	r5, [sp, #4]
    543a:	428d      	cmp	r5, r1
    543c:	d203      	bcs.n	5446 <_malloc_r+0x2a>
    543e:	9e03      	ldr	r6, [sp, #12]
    5440:	230c      	movs	r3, #12
    5442:	6033      	str	r3, [r6, #0]
    5444:	e1ca      	b.n	57dc <_malloc_r+0x3c0>
    5446:	9803      	ldr	r0, [sp, #12]
    5448:	f000 f9eb 	bl	5822 <__malloc_lock>
    544c:	23f8      	movs	r3, #248	; 0xf8
    544e:	9f01      	ldr	r7, [sp, #4]
    5450:	33ff      	adds	r3, #255	; 0xff
    5452:	4cb0      	ldr	r4, [pc, #704]	; (5714 <_malloc_r+0x2f8>)
    5454:	429f      	cmp	r7, r3
    5456:	d817      	bhi.n	5488 <_malloc_r+0x6c>
    5458:	08fa      	lsrs	r2, r7, #3
    545a:	00d3      	lsls	r3, r2, #3
    545c:	18e3      	adds	r3, r4, r3
    545e:	68dd      	ldr	r5, [r3, #12]
    5460:	429d      	cmp	r5, r3
    5462:	d105      	bne.n	5470 <_malloc_r+0x54>
    5464:	1c2b      	adds	r3, r5, #0
    5466:	696d      	ldr	r5, [r5, #20]
    5468:	3308      	adds	r3, #8
    546a:	3202      	adds	r2, #2
    546c:	429d      	cmp	r5, r3
    546e:	d04a      	beq.n	5506 <_malloc_r+0xea>
    5470:	6868      	ldr	r0, [r5, #4]
    5472:	2303      	movs	r3, #3
    5474:	68ea      	ldr	r2, [r5, #12]
    5476:	68a9      	ldr	r1, [r5, #8]
    5478:	4398      	bics	r0, r3
    547a:	182b      	adds	r3, r5, r0
    547c:	60ca      	str	r2, [r1, #12]
    547e:	6091      	str	r1, [r2, #8]
    5480:	6859      	ldr	r1, [r3, #4]
    5482:	2201      	movs	r2, #1
    5484:	430a      	orrs	r2, r1
    5486:	e05c      	b.n	5542 <_malloc_r+0x126>
    5488:	9d01      	ldr	r5, [sp, #4]
    548a:	223f      	movs	r2, #63	; 0x3f
    548c:	0a6b      	lsrs	r3, r5, #9
    548e:	d01e      	beq.n	54ce <_malloc_r+0xb2>
    5490:	2b04      	cmp	r3, #4
    5492:	d802      	bhi.n	549a <_malloc_r+0x7e>
    5494:	09aa      	lsrs	r2, r5, #6
    5496:	3238      	adds	r2, #56	; 0x38
    5498:	e019      	b.n	54ce <_malloc_r+0xb2>
    549a:	2b14      	cmp	r3, #20
    549c:	d802      	bhi.n	54a4 <_malloc_r+0x88>
    549e:	1c1a      	adds	r2, r3, #0
    54a0:	325b      	adds	r2, #91	; 0x5b
    54a2:	e014      	b.n	54ce <_malloc_r+0xb2>
    54a4:	2b54      	cmp	r3, #84	; 0x54
    54a6:	d803      	bhi.n	54b0 <_malloc_r+0x94>
    54a8:	9e01      	ldr	r6, [sp, #4]
    54aa:	0b32      	lsrs	r2, r6, #12
    54ac:	326e      	adds	r2, #110	; 0x6e
    54ae:	e00e      	b.n	54ce <_malloc_r+0xb2>
    54b0:	22aa      	movs	r2, #170	; 0xaa
    54b2:	0052      	lsls	r2, r2, #1
    54b4:	4293      	cmp	r3, r2
    54b6:	d803      	bhi.n	54c0 <_malloc_r+0xa4>
    54b8:	9f01      	ldr	r7, [sp, #4]
    54ba:	0bfa      	lsrs	r2, r7, #15
    54bc:	3277      	adds	r2, #119	; 0x77
    54be:	e006      	b.n	54ce <_malloc_r+0xb2>
    54c0:	4995      	ldr	r1, [pc, #596]	; (5718 <_malloc_r+0x2fc>)
    54c2:	227e      	movs	r2, #126	; 0x7e
    54c4:	428b      	cmp	r3, r1
    54c6:	d802      	bhi.n	54ce <_malloc_r+0xb2>
    54c8:	9d01      	ldr	r5, [sp, #4]
    54ca:	0caa      	lsrs	r2, r5, #18
    54cc:	327c      	adds	r2, #124	; 0x7c
    54ce:	00d3      	lsls	r3, r2, #3
    54d0:	18e3      	adds	r3, r4, r3
    54d2:	68dd      	ldr	r5, [r3, #12]
    54d4:	429d      	cmp	r5, r3
    54d6:	d015      	beq.n	5504 <_malloc_r+0xe8>
    54d8:	686e      	ldr	r6, [r5, #4]
    54da:	2103      	movs	r1, #3
    54dc:	9f01      	ldr	r7, [sp, #4]
    54de:	438e      	bics	r6, r1
    54e0:	1bf0      	subs	r0, r6, r7
    54e2:	280f      	cmp	r0, #15
    54e4:	dd01      	ble.n	54ea <_malloc_r+0xce>
    54e6:	3a01      	subs	r2, #1
    54e8:	e00c      	b.n	5504 <_malloc_r+0xe8>
    54ea:	2800      	cmp	r0, #0
    54ec:	db08      	blt.n	5500 <_malloc_r+0xe4>
    54ee:	68eb      	ldr	r3, [r5, #12]
    54f0:	68aa      	ldr	r2, [r5, #8]
    54f2:	60d3      	str	r3, [r2, #12]
    54f4:	609a      	str	r2, [r3, #8]
    54f6:	19ab      	adds	r3, r5, r6
    54f8:	6858      	ldr	r0, [r3, #4]
    54fa:	2201      	movs	r2, #1
    54fc:	4302      	orrs	r2, r0
    54fe:	e020      	b.n	5542 <_malloc_r+0x126>
    5500:	68ed      	ldr	r5, [r5, #12]
    5502:	e7e7      	b.n	54d4 <_malloc_r+0xb8>
    5504:	3201      	adds	r2, #1
    5506:	1c20      	adds	r0, r4, #0
    5508:	6925      	ldr	r5, [r4, #16]
    550a:	3008      	adds	r0, #8
    550c:	4285      	cmp	r5, r0
    550e:	d061      	beq.n	55d4 <_malloc_r+0x1b8>
    5510:	6869      	ldr	r1, [r5, #4]
    5512:	2303      	movs	r3, #3
    5514:	9e01      	ldr	r6, [sp, #4]
    5516:	4399      	bics	r1, r3
    5518:	1c0b      	adds	r3, r1, #0
    551a:	1b89      	subs	r1, r1, r6
    551c:	290f      	cmp	r1, #15
    551e:	dd08      	ble.n	5532 <_malloc_r+0x116>
    5520:	2201      	movs	r2, #1
    5522:	19ab      	adds	r3, r5, r6
    5524:	4316      	orrs	r6, r2
    5526:	606e      	str	r6, [r5, #4]
    5528:	6163      	str	r3, [r4, #20]
    552a:	6123      	str	r3, [r4, #16]
    552c:	60d8      	str	r0, [r3, #12]
    552e:	6098      	str	r0, [r3, #8]
    5530:	e07f      	b.n	5632 <_malloc_r+0x216>
    5532:	6160      	str	r0, [r4, #20]
    5534:	6120      	str	r0, [r4, #16]
    5536:	2900      	cmp	r1, #0
    5538:	db05      	blt.n	5546 <_malloc_r+0x12a>
    553a:	18eb      	adds	r3, r5, r3
    553c:	685f      	ldr	r7, [r3, #4]
    553e:	2201      	movs	r2, #1
    5540:	433a      	orrs	r2, r7
    5542:	605a      	str	r2, [r3, #4]
    5544:	e157      	b.n	57f6 <_malloc_r+0x3da>
    5546:	4975      	ldr	r1, [pc, #468]	; (571c <_malloc_r+0x300>)
    5548:	428b      	cmp	r3, r1
    554a:	d80b      	bhi.n	5564 <_malloc_r+0x148>
    554c:	08db      	lsrs	r3, r3, #3
    554e:	1099      	asrs	r1, r3, #2
    5550:	2001      	movs	r0, #1
    5552:	4088      	lsls	r0, r1
    5554:	1c01      	adds	r1, r0, #0
    5556:	6860      	ldr	r0, [r4, #4]
    5558:	00db      	lsls	r3, r3, #3
    555a:	4301      	orrs	r1, r0
    555c:	18e3      	adds	r3, r4, r3
    555e:	6061      	str	r1, [r4, #4]
    5560:	6899      	ldr	r1, [r3, #8]
    5562:	e033      	b.n	55cc <_malloc_r+0x1b0>
    5564:	0a59      	lsrs	r1, r3, #9
    5566:	2904      	cmp	r1, #4
    5568:	d802      	bhi.n	5570 <_malloc_r+0x154>
    556a:	0998      	lsrs	r0, r3, #6
    556c:	3038      	adds	r0, #56	; 0x38
    556e:	e016      	b.n	559e <_malloc_r+0x182>
    5570:	2914      	cmp	r1, #20
    5572:	d802      	bhi.n	557a <_malloc_r+0x15e>
    5574:	1c08      	adds	r0, r1, #0
    5576:	305b      	adds	r0, #91	; 0x5b
    5578:	e011      	b.n	559e <_malloc_r+0x182>
    557a:	2954      	cmp	r1, #84	; 0x54
    557c:	d802      	bhi.n	5584 <_malloc_r+0x168>
    557e:	0b18      	lsrs	r0, r3, #12
    5580:	306e      	adds	r0, #110	; 0x6e
    5582:	e00c      	b.n	559e <_malloc_r+0x182>
    5584:	20aa      	movs	r0, #170	; 0xaa
    5586:	0040      	lsls	r0, r0, #1
    5588:	4281      	cmp	r1, r0
    558a:	d802      	bhi.n	5592 <_malloc_r+0x176>
    558c:	0bd8      	lsrs	r0, r3, #15
    558e:	3077      	adds	r0, #119	; 0x77
    5590:	e005      	b.n	559e <_malloc_r+0x182>
    5592:	4e61      	ldr	r6, [pc, #388]	; (5718 <_malloc_r+0x2fc>)
    5594:	207e      	movs	r0, #126	; 0x7e
    5596:	42b1      	cmp	r1, r6
    5598:	d801      	bhi.n	559e <_malloc_r+0x182>
    559a:	0c98      	lsrs	r0, r3, #18
    559c:	307c      	adds	r0, #124	; 0x7c
    559e:	00c6      	lsls	r6, r0, #3
    55a0:	19a6      	adds	r6, r4, r6
    55a2:	68b1      	ldr	r1, [r6, #8]
    55a4:	42b1      	cmp	r1, r6
    55a6:	d10b      	bne.n	55c0 <_malloc_r+0x1a4>
    55a8:	1080      	asrs	r0, r0, #2
    55aa:	2301      	movs	r3, #1
    55ac:	4083      	lsls	r3, r0
    55ae:	1c18      	adds	r0, r3, #0
    55b0:	6863      	ldr	r3, [r4, #4]
    55b2:	4318      	orrs	r0, r3
    55b4:	6060      	str	r0, [r4, #4]
    55b6:	1c0b      	adds	r3, r1, #0
    55b8:	e008      	b.n	55cc <_malloc_r+0x1b0>
    55ba:	6889      	ldr	r1, [r1, #8]
    55bc:	42b1      	cmp	r1, r6
    55be:	d004      	beq.n	55ca <_malloc_r+0x1ae>
    55c0:	684f      	ldr	r7, [r1, #4]
    55c2:	2003      	movs	r0, #3
    55c4:	4387      	bics	r7, r0
    55c6:	42bb      	cmp	r3, r7
    55c8:	d3f7      	bcc.n	55ba <_malloc_r+0x19e>
    55ca:	68cb      	ldr	r3, [r1, #12]
    55cc:	60eb      	str	r3, [r5, #12]
    55ce:	60a9      	str	r1, [r5, #8]
    55d0:	609d      	str	r5, [r3, #8]
    55d2:	60cd      	str	r5, [r1, #12]
    55d4:	1093      	asrs	r3, r2, #2
    55d6:	2101      	movs	r1, #1
    55d8:	4099      	lsls	r1, r3
    55da:	1c0b      	adds	r3, r1, #0
    55dc:	6861      	ldr	r1, [r4, #4]
    55de:	428b      	cmp	r3, r1
    55e0:	d857      	bhi.n	5692 <_malloc_r+0x276>
    55e2:	4219      	tst	r1, r3
    55e4:	d105      	bne.n	55f2 <_malloc_r+0x1d6>
    55e6:	2003      	movs	r0, #3
    55e8:	4382      	bics	r2, r0
    55ea:	005b      	lsls	r3, r3, #1
    55ec:	3204      	adds	r2, #4
    55ee:	4219      	tst	r1, r3
    55f0:	d0fb      	beq.n	55ea <_malloc_r+0x1ce>
    55f2:	00d7      	lsls	r7, r2, #3
    55f4:	19e7      	adds	r7, r4, r7
    55f6:	9704      	str	r7, [sp, #16]
    55f8:	1c38      	adds	r0, r7, #0
    55fa:	4694      	mov	ip, r2
    55fc:	68c5      	ldr	r5, [r0, #12]
    55fe:	e000      	b.n	5602 <_malloc_r+0x1e6>
    5600:	68ed      	ldr	r5, [r5, #12]
    5602:	2103      	movs	r1, #3
    5604:	4285      	cmp	r5, r0
    5606:	d025      	beq.n	5654 <_malloc_r+0x238>
    5608:	686e      	ldr	r6, [r5, #4]
    560a:	9f01      	ldr	r7, [sp, #4]
    560c:	438e      	bics	r6, r1
    560e:	9602      	str	r6, [sp, #8]
    5610:	1bf1      	subs	r1, r6, r7
    5612:	290f      	cmp	r1, #15
    5614:	dd11      	ble.n	563a <_malloc_r+0x21e>
    5616:	2201      	movs	r2, #1
    5618:	1c38      	adds	r0, r7, #0
    561a:	4310      	orrs	r0, r2
    561c:	6068      	str	r0, [r5, #4]
    561e:	68ae      	ldr	r6, [r5, #8]
    5620:	68e8      	ldr	r0, [r5, #12]
    5622:	19eb      	adds	r3, r5, r7
    5624:	60f0      	str	r0, [r6, #12]
    5626:	3408      	adds	r4, #8
    5628:	6086      	str	r6, [r0, #8]
    562a:	60e3      	str	r3, [r4, #12]
    562c:	60a3      	str	r3, [r4, #8]
    562e:	60dc      	str	r4, [r3, #12]
    5630:	609c      	str	r4, [r3, #8]
    5632:	430a      	orrs	r2, r1
    5634:	605a      	str	r2, [r3, #4]
    5636:	5059      	str	r1, [r3, r1]
    5638:	e0dd      	b.n	57f6 <_malloc_r+0x3da>
    563a:	2900      	cmp	r1, #0
    563c:	dbe0      	blt.n	5600 <_malloc_r+0x1e4>
    563e:	9802      	ldr	r0, [sp, #8]
    5640:	2301      	movs	r3, #1
    5642:	182e      	adds	r6, r5, r0
    5644:	6871      	ldr	r1, [r6, #4]
    5646:	68aa      	ldr	r2, [r5, #8]
    5648:	430b      	orrs	r3, r1
    564a:	6073      	str	r3, [r6, #4]
    564c:	68eb      	ldr	r3, [r5, #12]
    564e:	60d3      	str	r3, [r2, #12]
    5650:	609a      	str	r2, [r3, #8]
    5652:	e0d0      	b.n	57f6 <_malloc_r+0x3da>
    5654:	2501      	movs	r5, #1
    5656:	44ac      	add	ip, r5
    5658:	4666      	mov	r6, ip
    565a:	3008      	adds	r0, #8
    565c:	420e      	tst	r6, r1
    565e:	d1cd      	bne.n	55fc <_malloc_r+0x1e0>
    5660:	0797      	lsls	r7, r2, #30
    5662:	d103      	bne.n	566c <_malloc_r+0x250>
    5664:	6862      	ldr	r2, [r4, #4]
    5666:	439a      	bics	r2, r3
    5668:	6062      	str	r2, [r4, #4]
    566a:	e006      	b.n	567a <_malloc_r+0x25e>
    566c:	9904      	ldr	r1, [sp, #16]
    566e:	3a01      	subs	r2, #1
    5670:	6808      	ldr	r0, [r1, #0]
    5672:	3908      	subs	r1, #8
    5674:	9004      	str	r0, [sp, #16]
    5676:	4288      	cmp	r0, r1
    5678:	d0f2      	beq.n	5660 <_malloc_r+0x244>
    567a:	6861      	ldr	r1, [r4, #4]
    567c:	005b      	lsls	r3, r3, #1
    567e:	428b      	cmp	r3, r1
    5680:	d807      	bhi.n	5692 <_malloc_r+0x276>
    5682:	2b00      	cmp	r3, #0
    5684:	d005      	beq.n	5692 <_malloc_r+0x276>
    5686:	4662      	mov	r2, ip
    5688:	4219      	tst	r1, r3
    568a:	d1b2      	bne.n	55f2 <_malloc_r+0x1d6>
    568c:	3204      	adds	r2, #4
    568e:	005b      	lsls	r3, r3, #1
    5690:	e7fa      	b.n	5688 <_malloc_r+0x26c>
    5692:	68a6      	ldr	r6, [r4, #8]
    5694:	2303      	movs	r3, #3
    5696:	6871      	ldr	r1, [r6, #4]
    5698:	9d01      	ldr	r5, [sp, #4]
    569a:	4399      	bics	r1, r3
    569c:	9102      	str	r1, [sp, #8]
    569e:	42a9      	cmp	r1, r5
    56a0:	d303      	bcc.n	56aa <_malloc_r+0x28e>
    56a2:	1b4b      	subs	r3, r1, r5
    56a4:	2b0f      	cmp	r3, #15
    56a6:	dd00      	ble.n	56aa <_malloc_r+0x28e>
    56a8:	e09a      	b.n	57e0 <_malloc_r+0x3c4>
    56aa:	9f02      	ldr	r7, [sp, #8]
    56ac:	4a1c      	ldr	r2, [pc, #112]	; (5720 <_malloc_r+0x304>)
    56ae:	19f7      	adds	r7, r6, r7
    56b0:	9705      	str	r7, [sp, #20]
    56b2:	4f1c      	ldr	r7, [pc, #112]	; (5724 <_malloc_r+0x308>)
    56b4:	9d01      	ldr	r5, [sp, #4]
    56b6:	6838      	ldr	r0, [r7, #0]
    56b8:	6892      	ldr	r2, [r2, #8]
    56ba:	182b      	adds	r3, r5, r0
    56bc:	3201      	adds	r2, #1
    56be:	d101      	bne.n	56c4 <_malloc_r+0x2a8>
    56c0:	3310      	adds	r3, #16
    56c2:	e003      	b.n	56cc <_malloc_r+0x2b0>
    56c4:	4918      	ldr	r1, [pc, #96]	; (5728 <_malloc_r+0x30c>)
    56c6:	185b      	adds	r3, r3, r1
    56c8:	0b1b      	lsrs	r3, r3, #12
    56ca:	031b      	lsls	r3, r3, #12
    56cc:	9304      	str	r3, [sp, #16]
    56ce:	9803      	ldr	r0, [sp, #12]
    56d0:	9904      	ldr	r1, [sp, #16]
    56d2:	f000 fcbf 	bl	6054 <_sbrk_r>
    56d6:	1c05      	adds	r5, r0, #0
    56d8:	1c42      	adds	r2, r0, #1
    56da:	d071      	beq.n	57c0 <_malloc_r+0x3a4>
    56dc:	9b05      	ldr	r3, [sp, #20]
    56de:	4298      	cmp	r0, r3
    56e0:	d201      	bcs.n	56e6 <_malloc_r+0x2ca>
    56e2:	42a6      	cmp	r6, r4
    56e4:	d16c      	bne.n	57c0 <_malloc_r+0x3a4>
    56e6:	6879      	ldr	r1, [r7, #4]
    56e8:	9804      	ldr	r0, [sp, #16]
    56ea:	1843      	adds	r3, r0, r1
    56ec:	607b      	str	r3, [r7, #4]
    56ee:	9f05      	ldr	r7, [sp, #20]
    56f0:	42bd      	cmp	r5, r7
    56f2:	d108      	bne.n	5706 <_malloc_r+0x2ea>
    56f4:	052a      	lsls	r2, r5, #20
    56f6:	d106      	bne.n	5706 <_malloc_r+0x2ea>
    56f8:	9d02      	ldr	r5, [sp, #8]
    56fa:	68a3      	ldr	r3, [r4, #8]
    56fc:	2201      	movs	r2, #1
    56fe:	1944      	adds	r4, r0, r5
    5700:	4314      	orrs	r4, r2
    5702:	605c      	str	r4, [r3, #4]
    5704:	e052      	b.n	57ac <_malloc_r+0x390>
    5706:	4a06      	ldr	r2, [pc, #24]	; (5720 <_malloc_r+0x304>)
    5708:	4f06      	ldr	r7, [pc, #24]	; (5724 <_malloc_r+0x308>)
    570a:	6890      	ldr	r0, [r2, #8]
    570c:	3001      	adds	r0, #1
    570e:	d10d      	bne.n	572c <_malloc_r+0x310>
    5710:	6095      	str	r5, [r2, #8]
    5712:	e00f      	b.n	5734 <_malloc_r+0x318>
    5714:	200004b4 	.word	0x200004b4
    5718:	00000554 	.word	0x00000554
    571c:	000001ff 	.word	0x000001ff
    5720:	200008b4 	.word	0x200008b4
    5724:	2000092c 	.word	0x2000092c
    5728:	0000100f 	.word	0x0000100f
    572c:	9c05      	ldr	r4, [sp, #20]
    572e:	1b2a      	subs	r2, r5, r4
    5730:	189b      	adds	r3, r3, r2
    5732:	607b      	str	r3, [r7, #4]
    5734:	2307      	movs	r3, #7
    5736:	2400      	movs	r4, #0
    5738:	402b      	ands	r3, r5
    573a:	42a3      	cmp	r3, r4
    573c:	d002      	beq.n	5744 <_malloc_r+0x328>
    573e:	2408      	movs	r4, #8
    5740:	1ae4      	subs	r4, r4, r3
    5742:	192d      	adds	r5, r5, r4
    5744:	9904      	ldr	r1, [sp, #16]
    5746:	2080      	movs	r0, #128	; 0x80
    5748:	186b      	adds	r3, r5, r1
    574a:	0140      	lsls	r0, r0, #5
    574c:	051b      	lsls	r3, r3, #20
    574e:	1824      	adds	r4, r4, r0
    5750:	0d1b      	lsrs	r3, r3, #20
    5752:	1ae4      	subs	r4, r4, r3
    5754:	9803      	ldr	r0, [sp, #12]
    5756:	1c21      	adds	r1, r4, #0
    5758:	f000 fc7c 	bl	6054 <_sbrk_r>
    575c:	1c42      	adds	r2, r0, #1
    575e:	d101      	bne.n	5764 <_malloc_r+0x348>
    5760:	1c28      	adds	r0, r5, #0
    5762:	2400      	movs	r4, #0
    5764:	6879      	ldr	r1, [r7, #4]
    5766:	1b40      	subs	r0, r0, r5
    5768:	1863      	adds	r3, r4, r1
    576a:	607b      	str	r3, [r7, #4]
    576c:	1904      	adds	r4, r0, r4
    576e:	4b25      	ldr	r3, [pc, #148]	; (5804 <_malloc_r+0x3e8>)
    5770:	2201      	movs	r2, #1
    5772:	4314      	orrs	r4, r2
    5774:	609d      	str	r5, [r3, #8]
    5776:	606c      	str	r4, [r5, #4]
    5778:	429e      	cmp	r6, r3
    577a:	d017      	beq.n	57ac <_malloc_r+0x390>
    577c:	9c02      	ldr	r4, [sp, #8]
    577e:	2c0f      	cmp	r4, #15
    5780:	d801      	bhi.n	5786 <_malloc_r+0x36a>
    5782:	606a      	str	r2, [r5, #4]
    5784:	e01c      	b.n	57c0 <_malloc_r+0x3a4>
    5786:	9b02      	ldr	r3, [sp, #8]
    5788:	6875      	ldr	r5, [r6, #4]
    578a:	2107      	movs	r1, #7
    578c:	3b0c      	subs	r3, #12
    578e:	438b      	bics	r3, r1
    5790:	402a      	ands	r2, r5
    5792:	431a      	orrs	r2, r3
    5794:	6072      	str	r2, [r6, #4]
    5796:	2105      	movs	r1, #5
    5798:	18f2      	adds	r2, r6, r3
    579a:	6051      	str	r1, [r2, #4]
    579c:	6091      	str	r1, [r2, #8]
    579e:	2b0f      	cmp	r3, #15
    57a0:	d904      	bls.n	57ac <_malloc_r+0x390>
    57a2:	1c31      	adds	r1, r6, #0
    57a4:	3108      	adds	r1, #8
    57a6:	9803      	ldr	r0, [sp, #12]
    57a8:	f7ff fd2e 	bl	5208 <_free_r>
    57ac:	4a16      	ldr	r2, [pc, #88]	; (5808 <_malloc_r+0x3ec>)
    57ae:	6853      	ldr	r3, [r2, #4]
    57b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    57b2:	428b      	cmp	r3, r1
    57b4:	d900      	bls.n	57b8 <_malloc_r+0x39c>
    57b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    57b8:	6b16      	ldr	r6, [r2, #48]	; 0x30
    57ba:	42b3      	cmp	r3, r6
    57bc:	d900      	bls.n	57c0 <_malloc_r+0x3a4>
    57be:	6313      	str	r3, [r2, #48]	; 0x30
    57c0:	4b10      	ldr	r3, [pc, #64]	; (5804 <_malloc_r+0x3e8>)
    57c2:	9f01      	ldr	r7, [sp, #4]
    57c4:	689b      	ldr	r3, [r3, #8]
    57c6:	685a      	ldr	r2, [r3, #4]
    57c8:	2303      	movs	r3, #3
    57ca:	439a      	bics	r2, r3
    57cc:	1bd3      	subs	r3, r2, r7
    57ce:	42ba      	cmp	r2, r7
    57d0:	d301      	bcc.n	57d6 <_malloc_r+0x3ba>
    57d2:	2b0f      	cmp	r3, #15
    57d4:	dc04      	bgt.n	57e0 <_malloc_r+0x3c4>
    57d6:	9803      	ldr	r0, [sp, #12]
    57d8:	f000 f824 	bl	5824 <__malloc_unlock>
    57dc:	2000      	movs	r0, #0
    57de:	e00f      	b.n	5800 <_malloc_r+0x3e4>
    57e0:	4808      	ldr	r0, [pc, #32]	; (5804 <_malloc_r+0x3e8>)
    57e2:	9a01      	ldr	r2, [sp, #4]
    57e4:	6885      	ldr	r5, [r0, #8]
    57e6:	2101      	movs	r1, #1
    57e8:	9c01      	ldr	r4, [sp, #4]
    57ea:	430a      	orrs	r2, r1
    57ec:	606a      	str	r2, [r5, #4]
    57ee:	430b      	orrs	r3, r1
    57f0:	192a      	adds	r2, r5, r4
    57f2:	6082      	str	r2, [r0, #8]
    57f4:	6053      	str	r3, [r2, #4]
    57f6:	9803      	ldr	r0, [sp, #12]
    57f8:	f000 f814 	bl	5824 <__malloc_unlock>
    57fc:	1c28      	adds	r0, r5, #0
    57fe:	3008      	adds	r0, #8
    5800:	b007      	add	sp, #28
    5802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5804:	200004b4 	.word	0x200004b4
    5808:	2000092c 	.word	0x2000092c

0000580c <memchr>:
    580c:	b2c9      	uxtb	r1, r1
    580e:	1882      	adds	r2, r0, r2
    5810:	4290      	cmp	r0, r2
    5812:	d004      	beq.n	581e <memchr+0x12>
    5814:	7803      	ldrb	r3, [r0, #0]
    5816:	428b      	cmp	r3, r1
    5818:	d002      	beq.n	5820 <memchr+0x14>
    581a:	3001      	adds	r0, #1
    581c:	e7f8      	b.n	5810 <memchr+0x4>
    581e:	2000      	movs	r0, #0
    5820:	4770      	bx	lr

00005822 <__malloc_lock>:
    5822:	4770      	bx	lr

00005824 <__malloc_unlock>:
    5824:	4770      	bx	lr
	...

00005828 <_Balloc>:
    5828:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    582a:	b570      	push	{r4, r5, r6, lr}
    582c:	1c04      	adds	r4, r0, #0
    582e:	1c0d      	adds	r5, r1, #0
    5830:	2b00      	cmp	r3, #0
    5832:	d008      	beq.n	5846 <_Balloc+0x1e>
    5834:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5836:	00aa      	lsls	r2, r5, #2
    5838:	189a      	adds	r2, r3, r2
    583a:	6810      	ldr	r0, [r2, #0]
    583c:	2800      	cmp	r0, #0
    583e:	d00b      	beq.n	5858 <_Balloc+0x30>
    5840:	6803      	ldr	r3, [r0, #0]
    5842:	6013      	str	r3, [r2, #0]
    5844:	e014      	b.n	5870 <_Balloc+0x48>
    5846:	2104      	movs	r1, #4
    5848:	2221      	movs	r2, #33	; 0x21
    584a:	f001 f89d 	bl	6988 <_calloc_r>
    584e:	64e0      	str	r0, [r4, #76]	; 0x4c
    5850:	2800      	cmp	r0, #0
    5852:	d1ef      	bne.n	5834 <_Balloc+0xc>
    5854:	2000      	movs	r0, #0
    5856:	e00e      	b.n	5876 <_Balloc+0x4e>
    5858:	2101      	movs	r1, #1
    585a:	1c0e      	adds	r6, r1, #0
    585c:	40ae      	lsls	r6, r5
    585e:	1d72      	adds	r2, r6, #5
    5860:	0092      	lsls	r2, r2, #2
    5862:	1c20      	adds	r0, r4, #0
    5864:	f001 f890 	bl	6988 <_calloc_r>
    5868:	2800      	cmp	r0, #0
    586a:	d0f3      	beq.n	5854 <_Balloc+0x2c>
    586c:	6045      	str	r5, [r0, #4]
    586e:	6086      	str	r6, [r0, #8]
    5870:	2200      	movs	r2, #0
    5872:	6102      	str	r2, [r0, #16]
    5874:	60c2      	str	r2, [r0, #12]
    5876:	bd70      	pop	{r4, r5, r6, pc}

00005878 <_Bfree>:
    5878:	2900      	cmp	r1, #0
    587a:	d006      	beq.n	588a <_Bfree+0x12>
    587c:	684a      	ldr	r2, [r1, #4]
    587e:	0093      	lsls	r3, r2, #2
    5880:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    5882:	18d3      	adds	r3, r2, r3
    5884:	681a      	ldr	r2, [r3, #0]
    5886:	600a      	str	r2, [r1, #0]
    5888:	6019      	str	r1, [r3, #0]
    588a:	4770      	bx	lr

0000588c <__multadd>:
    588c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    588e:	1c0c      	adds	r4, r1, #0
    5890:	1c1e      	adds	r6, r3, #0
    5892:	690d      	ldr	r5, [r1, #16]
    5894:	1c07      	adds	r7, r0, #0
    5896:	3114      	adds	r1, #20
    5898:	2300      	movs	r3, #0
    589a:	6808      	ldr	r0, [r1, #0]
    589c:	3301      	adds	r3, #1
    589e:	b280      	uxth	r0, r0
    58a0:	4350      	muls	r0, r2
    58a2:	1980      	adds	r0, r0, r6
    58a4:	4684      	mov	ip, r0
    58a6:	0c06      	lsrs	r6, r0, #16
    58a8:	6808      	ldr	r0, [r1, #0]
    58aa:	0c00      	lsrs	r0, r0, #16
    58ac:	4350      	muls	r0, r2
    58ae:	1830      	adds	r0, r6, r0
    58b0:	0c06      	lsrs	r6, r0, #16
    58b2:	0400      	lsls	r0, r0, #16
    58b4:	9001      	str	r0, [sp, #4]
    58b6:	4660      	mov	r0, ip
    58b8:	b280      	uxth	r0, r0
    58ba:	4684      	mov	ip, r0
    58bc:	9801      	ldr	r0, [sp, #4]
    58be:	4484      	add	ip, r0
    58c0:	4660      	mov	r0, ip
    58c2:	c101      	stmia	r1!, {r0}
    58c4:	42ab      	cmp	r3, r5
    58c6:	dbe8      	blt.n	589a <__multadd+0xe>
    58c8:	2e00      	cmp	r6, #0
    58ca:	d01b      	beq.n	5904 <__multadd+0x78>
    58cc:	68a3      	ldr	r3, [r4, #8]
    58ce:	429d      	cmp	r5, r3
    58d0:	db12      	blt.n	58f8 <__multadd+0x6c>
    58d2:	6861      	ldr	r1, [r4, #4]
    58d4:	1c38      	adds	r0, r7, #0
    58d6:	3101      	adds	r1, #1
    58d8:	f7ff ffa6 	bl	5828 <_Balloc>
    58dc:	6922      	ldr	r2, [r4, #16]
    58de:	1c21      	adds	r1, r4, #0
    58e0:	3202      	adds	r2, #2
    58e2:	9001      	str	r0, [sp, #4]
    58e4:	310c      	adds	r1, #12
    58e6:	0092      	lsls	r2, r2, #2
    58e8:	300c      	adds	r0, #12
    58ea:	f7fd fd83 	bl	33f4 <memcpy>
    58ee:	1c21      	adds	r1, r4, #0
    58f0:	1c38      	adds	r0, r7, #0
    58f2:	f7ff ffc1 	bl	5878 <_Bfree>
    58f6:	9c01      	ldr	r4, [sp, #4]
    58f8:	1d2b      	adds	r3, r5, #4
    58fa:	009b      	lsls	r3, r3, #2
    58fc:	18e3      	adds	r3, r4, r3
    58fe:	3501      	adds	r5, #1
    5900:	605e      	str	r6, [r3, #4]
    5902:	6125      	str	r5, [r4, #16]
    5904:	1c20      	adds	r0, r4, #0
    5906:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005908 <__s2b>:
    5908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    590a:	1c06      	adds	r6, r0, #0
    590c:	1c18      	adds	r0, r3, #0
    590e:	1c0f      	adds	r7, r1, #0
    5910:	3008      	adds	r0, #8
    5912:	2109      	movs	r1, #9
    5914:	9301      	str	r3, [sp, #4]
    5916:	1c14      	adds	r4, r2, #0
    5918:	f001 fa34 	bl	6d84 <__aeabi_idiv>
    591c:	2301      	movs	r3, #1
    591e:	2100      	movs	r1, #0
    5920:	4298      	cmp	r0, r3
    5922:	dd02      	ble.n	592a <__s2b+0x22>
    5924:	005b      	lsls	r3, r3, #1
    5926:	3101      	adds	r1, #1
    5928:	e7fa      	b.n	5920 <__s2b+0x18>
    592a:	1c30      	adds	r0, r6, #0
    592c:	f7ff ff7c 	bl	5828 <_Balloc>
    5930:	9b08      	ldr	r3, [sp, #32]
    5932:	1c01      	adds	r1, r0, #0
    5934:	6143      	str	r3, [r0, #20]
    5936:	2301      	movs	r3, #1
    5938:	6103      	str	r3, [r0, #16]
    593a:	2c09      	cmp	r4, #9
    593c:	dd12      	ble.n	5964 <__s2b+0x5c>
    593e:	1c3b      	adds	r3, r7, #0
    5940:	3309      	adds	r3, #9
    5942:	9300      	str	r3, [sp, #0]
    5944:	1c1d      	adds	r5, r3, #0
    5946:	193f      	adds	r7, r7, r4
    5948:	782b      	ldrb	r3, [r5, #0]
    594a:	1c30      	adds	r0, r6, #0
    594c:	3b30      	subs	r3, #48	; 0x30
    594e:	220a      	movs	r2, #10
    5950:	f7ff ff9c 	bl	588c <__multadd>
    5954:	3501      	adds	r5, #1
    5956:	1c01      	adds	r1, r0, #0
    5958:	42bd      	cmp	r5, r7
    595a:	d1f5      	bne.n	5948 <__s2b+0x40>
    595c:	9b00      	ldr	r3, [sp, #0]
    595e:	191f      	adds	r7, r3, r4
    5960:	3f08      	subs	r7, #8
    5962:	e001      	b.n	5968 <__s2b+0x60>
    5964:	370a      	adds	r7, #10
    5966:	2409      	movs	r4, #9
    5968:	1c25      	adds	r5, r4, #0
    596a:	9b01      	ldr	r3, [sp, #4]
    596c:	429d      	cmp	r5, r3
    596e:	da09      	bge.n	5984 <__s2b+0x7c>
    5970:	1b3b      	subs	r3, r7, r4
    5972:	5d5b      	ldrb	r3, [r3, r5]
    5974:	1c30      	adds	r0, r6, #0
    5976:	3b30      	subs	r3, #48	; 0x30
    5978:	220a      	movs	r2, #10
    597a:	f7ff ff87 	bl	588c <__multadd>
    597e:	3501      	adds	r5, #1
    5980:	1c01      	adds	r1, r0, #0
    5982:	e7f2      	b.n	596a <__s2b+0x62>
    5984:	1c08      	adds	r0, r1, #0
    5986:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005988 <__hi0bits>:
    5988:	2200      	movs	r2, #0
    598a:	1c03      	adds	r3, r0, #0
    598c:	0c01      	lsrs	r1, r0, #16
    598e:	4291      	cmp	r1, r2
    5990:	d101      	bne.n	5996 <__hi0bits+0xe>
    5992:	0403      	lsls	r3, r0, #16
    5994:	2210      	movs	r2, #16
    5996:	0e19      	lsrs	r1, r3, #24
    5998:	d101      	bne.n	599e <__hi0bits+0x16>
    599a:	3208      	adds	r2, #8
    599c:	021b      	lsls	r3, r3, #8
    599e:	0f19      	lsrs	r1, r3, #28
    59a0:	d101      	bne.n	59a6 <__hi0bits+0x1e>
    59a2:	3204      	adds	r2, #4
    59a4:	011b      	lsls	r3, r3, #4
    59a6:	0f99      	lsrs	r1, r3, #30
    59a8:	d101      	bne.n	59ae <__hi0bits+0x26>
    59aa:	3202      	adds	r2, #2
    59ac:	009b      	lsls	r3, r3, #2
    59ae:	2b00      	cmp	r3, #0
    59b0:	db04      	blt.n	59bc <__hi0bits+0x34>
    59b2:	2020      	movs	r0, #32
    59b4:	0059      	lsls	r1, r3, #1
    59b6:	d502      	bpl.n	59be <__hi0bits+0x36>
    59b8:	1c50      	adds	r0, r2, #1
    59ba:	e000      	b.n	59be <__hi0bits+0x36>
    59bc:	1c10      	adds	r0, r2, #0
    59be:	4770      	bx	lr

000059c0 <__lo0bits>:
    59c0:	6803      	ldr	r3, [r0, #0]
    59c2:	2207      	movs	r2, #7
    59c4:	1c01      	adds	r1, r0, #0
    59c6:	401a      	ands	r2, r3
    59c8:	d00b      	beq.n	59e2 <__lo0bits+0x22>
    59ca:	2201      	movs	r2, #1
    59cc:	2000      	movs	r0, #0
    59ce:	4213      	tst	r3, r2
    59d0:	d122      	bne.n	5a18 <__lo0bits+0x58>
    59d2:	2002      	movs	r0, #2
    59d4:	4203      	tst	r3, r0
    59d6:	d001      	beq.n	59dc <__lo0bits+0x1c>
    59d8:	40d3      	lsrs	r3, r2
    59da:	e01b      	b.n	5a14 <__lo0bits+0x54>
    59dc:	089b      	lsrs	r3, r3, #2
    59de:	600b      	str	r3, [r1, #0]
    59e0:	e01a      	b.n	5a18 <__lo0bits+0x58>
    59e2:	b298      	uxth	r0, r3
    59e4:	2800      	cmp	r0, #0
    59e6:	d101      	bne.n	59ec <__lo0bits+0x2c>
    59e8:	0c1b      	lsrs	r3, r3, #16
    59ea:	2210      	movs	r2, #16
    59ec:	b2d8      	uxtb	r0, r3
    59ee:	2800      	cmp	r0, #0
    59f0:	d101      	bne.n	59f6 <__lo0bits+0x36>
    59f2:	3208      	adds	r2, #8
    59f4:	0a1b      	lsrs	r3, r3, #8
    59f6:	0718      	lsls	r0, r3, #28
    59f8:	d101      	bne.n	59fe <__lo0bits+0x3e>
    59fa:	3204      	adds	r2, #4
    59fc:	091b      	lsrs	r3, r3, #4
    59fe:	0798      	lsls	r0, r3, #30
    5a00:	d101      	bne.n	5a06 <__lo0bits+0x46>
    5a02:	3202      	adds	r2, #2
    5a04:	089b      	lsrs	r3, r3, #2
    5a06:	07d8      	lsls	r0, r3, #31
    5a08:	d404      	bmi.n	5a14 <__lo0bits+0x54>
    5a0a:	085b      	lsrs	r3, r3, #1
    5a0c:	2020      	movs	r0, #32
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d002      	beq.n	5a18 <__lo0bits+0x58>
    5a12:	3201      	adds	r2, #1
    5a14:	600b      	str	r3, [r1, #0]
    5a16:	1c10      	adds	r0, r2, #0
    5a18:	4770      	bx	lr

00005a1a <__i2b>:
    5a1a:	b510      	push	{r4, lr}
    5a1c:	1c0c      	adds	r4, r1, #0
    5a1e:	2101      	movs	r1, #1
    5a20:	f7ff ff02 	bl	5828 <_Balloc>
    5a24:	2301      	movs	r3, #1
    5a26:	6144      	str	r4, [r0, #20]
    5a28:	6103      	str	r3, [r0, #16]
    5a2a:	bd10      	pop	{r4, pc}

00005a2c <__multiply>:
    5a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a2e:	1c0c      	adds	r4, r1, #0
    5a30:	1c15      	adds	r5, r2, #0
    5a32:	6909      	ldr	r1, [r1, #16]
    5a34:	6912      	ldr	r2, [r2, #16]
    5a36:	b08b      	sub	sp, #44	; 0x2c
    5a38:	4291      	cmp	r1, r2
    5a3a:	da02      	bge.n	5a42 <__multiply+0x16>
    5a3c:	1c23      	adds	r3, r4, #0
    5a3e:	1c2c      	adds	r4, r5, #0
    5a40:	1c1d      	adds	r5, r3, #0
    5a42:	6927      	ldr	r7, [r4, #16]
    5a44:	692e      	ldr	r6, [r5, #16]
    5a46:	68a2      	ldr	r2, [r4, #8]
    5a48:	19bb      	adds	r3, r7, r6
    5a4a:	6861      	ldr	r1, [r4, #4]
    5a4c:	9302      	str	r3, [sp, #8]
    5a4e:	4293      	cmp	r3, r2
    5a50:	dd00      	ble.n	5a54 <__multiply+0x28>
    5a52:	3101      	adds	r1, #1
    5a54:	f7ff fee8 	bl	5828 <_Balloc>
    5a58:	1c03      	adds	r3, r0, #0
    5a5a:	9003      	str	r0, [sp, #12]
    5a5c:	9802      	ldr	r0, [sp, #8]
    5a5e:	3314      	adds	r3, #20
    5a60:	0082      	lsls	r2, r0, #2
    5a62:	189a      	adds	r2, r3, r2
    5a64:	1c19      	adds	r1, r3, #0
    5a66:	4291      	cmp	r1, r2
    5a68:	d202      	bcs.n	5a70 <__multiply+0x44>
    5a6a:	2000      	movs	r0, #0
    5a6c:	c101      	stmia	r1!, {r0}
    5a6e:	e7fa      	b.n	5a66 <__multiply+0x3a>
    5a70:	3514      	adds	r5, #20
    5a72:	3414      	adds	r4, #20
    5a74:	00bf      	lsls	r7, r7, #2
    5a76:	46ac      	mov	ip, r5
    5a78:	00b6      	lsls	r6, r6, #2
    5a7a:	19e7      	adds	r7, r4, r7
    5a7c:	4466      	add	r6, ip
    5a7e:	9404      	str	r4, [sp, #16]
    5a80:	9707      	str	r7, [sp, #28]
    5a82:	9609      	str	r6, [sp, #36]	; 0x24
    5a84:	9e09      	ldr	r6, [sp, #36]	; 0x24
    5a86:	45b4      	cmp	ip, r6
    5a88:	d256      	bcs.n	5b38 <__multiply+0x10c>
    5a8a:	4665      	mov	r5, ip
    5a8c:	882d      	ldrh	r5, [r5, #0]
    5a8e:	9505      	str	r5, [sp, #20]
    5a90:	2d00      	cmp	r5, #0
    5a92:	d01f      	beq.n	5ad4 <__multiply+0xa8>
    5a94:	9c04      	ldr	r4, [sp, #16]
    5a96:	1c19      	adds	r1, r3, #0
    5a98:	2000      	movs	r0, #0
    5a9a:	680f      	ldr	r7, [r1, #0]
    5a9c:	cc40      	ldmia	r4!, {r6}
    5a9e:	b2bf      	uxth	r7, r7
    5aa0:	9d05      	ldr	r5, [sp, #20]
    5aa2:	9706      	str	r7, [sp, #24]
    5aa4:	b2b7      	uxth	r7, r6
    5aa6:	436f      	muls	r7, r5
    5aa8:	9d06      	ldr	r5, [sp, #24]
    5aaa:	0c36      	lsrs	r6, r6, #16
    5aac:	19ef      	adds	r7, r5, r7
    5aae:	183f      	adds	r7, r7, r0
    5ab0:	6808      	ldr	r0, [r1, #0]
    5ab2:	9108      	str	r1, [sp, #32]
    5ab4:	0c05      	lsrs	r5, r0, #16
    5ab6:	9805      	ldr	r0, [sp, #20]
    5ab8:	4346      	muls	r6, r0
    5aba:	0c38      	lsrs	r0, r7, #16
    5abc:	19ad      	adds	r5, r5, r6
    5abe:	182d      	adds	r5, r5, r0
    5ac0:	0c28      	lsrs	r0, r5, #16
    5ac2:	b2bf      	uxth	r7, r7
    5ac4:	042d      	lsls	r5, r5, #16
    5ac6:	433d      	orrs	r5, r7
    5ac8:	c120      	stmia	r1!, {r5}
    5aca:	9d07      	ldr	r5, [sp, #28]
    5acc:	42ac      	cmp	r4, r5
    5ace:	d3e4      	bcc.n	5a9a <__multiply+0x6e>
    5ad0:	9e08      	ldr	r6, [sp, #32]
    5ad2:	6070      	str	r0, [r6, #4]
    5ad4:	4667      	mov	r7, ip
    5ad6:	887d      	ldrh	r5, [r7, #2]
    5ad8:	2d00      	cmp	r5, #0
    5ada:	d022      	beq.n	5b22 <__multiply+0xf6>
    5adc:	2600      	movs	r6, #0
    5ade:	6818      	ldr	r0, [r3, #0]
    5ae0:	9c04      	ldr	r4, [sp, #16]
    5ae2:	1c19      	adds	r1, r3, #0
    5ae4:	9601      	str	r6, [sp, #4]
    5ae6:	8827      	ldrh	r7, [r4, #0]
    5ae8:	b280      	uxth	r0, r0
    5aea:	436f      	muls	r7, r5
    5aec:	9706      	str	r7, [sp, #24]
    5aee:	9e06      	ldr	r6, [sp, #24]
    5af0:	884f      	ldrh	r7, [r1, #2]
    5af2:	9105      	str	r1, [sp, #20]
    5af4:	19f6      	adds	r6, r6, r7
    5af6:	9f01      	ldr	r7, [sp, #4]
    5af8:	19f7      	adds	r7, r6, r7
    5afa:	9706      	str	r7, [sp, #24]
    5afc:	043f      	lsls	r7, r7, #16
    5afe:	4338      	orrs	r0, r7
    5b00:	6008      	str	r0, [r1, #0]
    5b02:	cc01      	ldmia	r4!, {r0}
    5b04:	888f      	ldrh	r7, [r1, #4]
    5b06:	0c00      	lsrs	r0, r0, #16
    5b08:	4368      	muls	r0, r5
    5b0a:	19c0      	adds	r0, r0, r7
    5b0c:	9f06      	ldr	r7, [sp, #24]
    5b0e:	3104      	adds	r1, #4
    5b10:	0c3e      	lsrs	r6, r7, #16
    5b12:	1980      	adds	r0, r0, r6
    5b14:	9f07      	ldr	r7, [sp, #28]
    5b16:	0c06      	lsrs	r6, r0, #16
    5b18:	9601      	str	r6, [sp, #4]
    5b1a:	42a7      	cmp	r7, r4
    5b1c:	d8e3      	bhi.n	5ae6 <__multiply+0xba>
    5b1e:	9905      	ldr	r1, [sp, #20]
    5b20:	6048      	str	r0, [r1, #4]
    5b22:	2504      	movs	r5, #4
    5b24:	44ac      	add	ip, r5
    5b26:	195b      	adds	r3, r3, r5
    5b28:	e7ac      	b.n	5a84 <__multiply+0x58>
    5b2a:	3a04      	subs	r2, #4
    5b2c:	6810      	ldr	r0, [r2, #0]
    5b2e:	2800      	cmp	r0, #0
    5b30:	d105      	bne.n	5b3e <__multiply+0x112>
    5b32:	9f02      	ldr	r7, [sp, #8]
    5b34:	3f01      	subs	r7, #1
    5b36:	9702      	str	r7, [sp, #8]
    5b38:	9d02      	ldr	r5, [sp, #8]
    5b3a:	2d00      	cmp	r5, #0
    5b3c:	dcf5      	bgt.n	5b2a <__multiply+0xfe>
    5b3e:	9f03      	ldr	r7, [sp, #12]
    5b40:	9e02      	ldr	r6, [sp, #8]
    5b42:	1c38      	adds	r0, r7, #0
    5b44:	613e      	str	r6, [r7, #16]
    5b46:	b00b      	add	sp, #44	; 0x2c
    5b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005b4a <__pow5mult>:
    5b4a:	2303      	movs	r3, #3
    5b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b4e:	4013      	ands	r3, r2
    5b50:	1c05      	adds	r5, r0, #0
    5b52:	1c0e      	adds	r6, r1, #0
    5b54:	1c17      	adds	r7, r2, #0
    5b56:	2b00      	cmp	r3, #0
    5b58:	d007      	beq.n	5b6a <__pow5mult+0x20>
    5b5a:	4a1a      	ldr	r2, [pc, #104]	; (5bc4 <__pow5mult+0x7a>)
    5b5c:	3b01      	subs	r3, #1
    5b5e:	009b      	lsls	r3, r3, #2
    5b60:	589a      	ldr	r2, [r3, r2]
    5b62:	2300      	movs	r3, #0
    5b64:	f7ff fe92 	bl	588c <__multadd>
    5b68:	1c06      	adds	r6, r0, #0
    5b6a:	10bf      	asrs	r7, r7, #2
    5b6c:	d028      	beq.n	5bc0 <__pow5mult+0x76>
    5b6e:	6cac      	ldr	r4, [r5, #72]	; 0x48
    5b70:	2c00      	cmp	r4, #0
    5b72:	d10e      	bne.n	5b92 <__pow5mult+0x48>
    5b74:	1c28      	adds	r0, r5, #0
    5b76:	4914      	ldr	r1, [pc, #80]	; (5bc8 <__pow5mult+0x7e>)
    5b78:	f7ff ff4f 	bl	5a1a <__i2b>
    5b7c:	2300      	movs	r3, #0
    5b7e:	64a8      	str	r0, [r5, #72]	; 0x48
    5b80:	1c04      	adds	r4, r0, #0
    5b82:	6003      	str	r3, [r0, #0]
    5b84:	e005      	b.n	5b92 <__pow5mult+0x48>
    5b86:	107f      	asrs	r7, r7, #1
    5b88:	d01a      	beq.n	5bc0 <__pow5mult+0x76>
    5b8a:	6820      	ldr	r0, [r4, #0]
    5b8c:	2800      	cmp	r0, #0
    5b8e:	d00e      	beq.n	5bae <__pow5mult+0x64>
    5b90:	1c04      	adds	r4, r0, #0
    5b92:	07fb      	lsls	r3, r7, #31
    5b94:	d5f7      	bpl.n	5b86 <__pow5mult+0x3c>
    5b96:	1c31      	adds	r1, r6, #0
    5b98:	1c22      	adds	r2, r4, #0
    5b9a:	1c28      	adds	r0, r5, #0
    5b9c:	f7ff ff46 	bl	5a2c <__multiply>
    5ba0:	1c31      	adds	r1, r6, #0
    5ba2:	9001      	str	r0, [sp, #4]
    5ba4:	1c28      	adds	r0, r5, #0
    5ba6:	f7ff fe67 	bl	5878 <_Bfree>
    5baa:	9e01      	ldr	r6, [sp, #4]
    5bac:	e7eb      	b.n	5b86 <__pow5mult+0x3c>
    5bae:	1c28      	adds	r0, r5, #0
    5bb0:	1c21      	adds	r1, r4, #0
    5bb2:	1c22      	adds	r2, r4, #0
    5bb4:	f7ff ff3a 	bl	5a2c <__multiply>
    5bb8:	2300      	movs	r3, #0
    5bba:	6020      	str	r0, [r4, #0]
    5bbc:	6003      	str	r3, [r0, #0]
    5bbe:	e7e7      	b.n	5b90 <__pow5mult+0x46>
    5bc0:	1c30      	adds	r0, r6, #0
    5bc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5bc4:	00007d28 	.word	0x00007d28
    5bc8:	00000271 	.word	0x00000271

00005bcc <__lshift>:
    5bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bce:	1c0c      	adds	r4, r1, #0
    5bd0:	b085      	sub	sp, #20
    5bd2:	9003      	str	r0, [sp, #12]
    5bd4:	6920      	ldr	r0, [r4, #16]
    5bd6:	1155      	asrs	r5, r2, #5
    5bd8:	1828      	adds	r0, r5, r0
    5bda:	9002      	str	r0, [sp, #8]
    5bdc:	6849      	ldr	r1, [r1, #4]
    5bde:	3001      	adds	r0, #1
    5be0:	68a3      	ldr	r3, [r4, #8]
    5be2:	1c17      	adds	r7, r2, #0
    5be4:	9000      	str	r0, [sp, #0]
    5be6:	9a00      	ldr	r2, [sp, #0]
    5be8:	429a      	cmp	r2, r3
    5bea:	dd02      	ble.n	5bf2 <__lshift+0x26>
    5bec:	3101      	adds	r1, #1
    5bee:	005b      	lsls	r3, r3, #1
    5bf0:	e7f9      	b.n	5be6 <__lshift+0x1a>
    5bf2:	9803      	ldr	r0, [sp, #12]
    5bf4:	f7ff fe18 	bl	5828 <_Balloc>
    5bf8:	1c02      	adds	r2, r0, #0
    5bfa:	1c06      	adds	r6, r0, #0
    5bfc:	3214      	adds	r2, #20
    5bfe:	2300      	movs	r3, #0
    5c00:	42ab      	cmp	r3, r5
    5c02:	da04      	bge.n	5c0e <__lshift+0x42>
    5c04:	0099      	lsls	r1, r3, #2
    5c06:	2000      	movs	r0, #0
    5c08:	5050      	str	r0, [r2, r1]
    5c0a:	3301      	adds	r3, #1
    5c0c:	e7f8      	b.n	5c00 <__lshift+0x34>
    5c0e:	43eb      	mvns	r3, r5
    5c10:	17db      	asrs	r3, r3, #31
    5c12:	401d      	ands	r5, r3
    5c14:	00ad      	lsls	r5, r5, #2
    5c16:	6920      	ldr	r0, [r4, #16]
    5c18:	1955      	adds	r5, r2, r5
    5c1a:	1c22      	adds	r2, r4, #0
    5c1c:	3214      	adds	r2, #20
    5c1e:	0083      	lsls	r3, r0, #2
    5c20:	189b      	adds	r3, r3, r2
    5c22:	469c      	mov	ip, r3
    5c24:	231f      	movs	r3, #31
    5c26:	401f      	ands	r7, r3
    5c28:	d014      	beq.n	5c54 <__lshift+0x88>
    5c2a:	2320      	movs	r3, #32
    5c2c:	1bdb      	subs	r3, r3, r7
    5c2e:	9301      	str	r3, [sp, #4]
    5c30:	2300      	movs	r3, #0
    5c32:	6810      	ldr	r0, [r2, #0]
    5c34:	1c29      	adds	r1, r5, #0
    5c36:	40b8      	lsls	r0, r7
    5c38:	4303      	orrs	r3, r0
    5c3a:	c508      	stmia	r5!, {r3}
    5c3c:	ca08      	ldmia	r2!, {r3}
    5c3e:	9801      	ldr	r0, [sp, #4]
    5c40:	40c3      	lsrs	r3, r0
    5c42:	4594      	cmp	ip, r2
    5c44:	d8f5      	bhi.n	5c32 <__lshift+0x66>
    5c46:	604b      	str	r3, [r1, #4]
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d007      	beq.n	5c5c <__lshift+0x90>
    5c4c:	9902      	ldr	r1, [sp, #8]
    5c4e:	3102      	adds	r1, #2
    5c50:	9100      	str	r1, [sp, #0]
    5c52:	e003      	b.n	5c5c <__lshift+0x90>
    5c54:	ca08      	ldmia	r2!, {r3}
    5c56:	c508      	stmia	r5!, {r3}
    5c58:	4594      	cmp	ip, r2
    5c5a:	d8fb      	bhi.n	5c54 <__lshift+0x88>
    5c5c:	9b00      	ldr	r3, [sp, #0]
    5c5e:	9803      	ldr	r0, [sp, #12]
    5c60:	3b01      	subs	r3, #1
    5c62:	6133      	str	r3, [r6, #16]
    5c64:	1c21      	adds	r1, r4, #0
    5c66:	f7ff fe07 	bl	5878 <_Bfree>
    5c6a:	1c30      	adds	r0, r6, #0
    5c6c:	b005      	add	sp, #20
    5c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005c70 <__mcmp>:
    5c70:	b510      	push	{r4, lr}
    5c72:	6902      	ldr	r2, [r0, #16]
    5c74:	690c      	ldr	r4, [r1, #16]
    5c76:	1c03      	adds	r3, r0, #0
    5c78:	1b10      	subs	r0, r2, r4
    5c7a:	d113      	bne.n	5ca4 <__mcmp+0x34>
    5c7c:	1c1a      	adds	r2, r3, #0
    5c7e:	00a0      	lsls	r0, r4, #2
    5c80:	3214      	adds	r2, #20
    5c82:	3114      	adds	r1, #20
    5c84:	1813      	adds	r3, r2, r0
    5c86:	1809      	adds	r1, r1, r0
    5c88:	3b04      	subs	r3, #4
    5c8a:	3904      	subs	r1, #4
    5c8c:	681c      	ldr	r4, [r3, #0]
    5c8e:	6808      	ldr	r0, [r1, #0]
    5c90:	4284      	cmp	r4, r0
    5c92:	d004      	beq.n	5c9e <__mcmp+0x2e>
    5c94:	4284      	cmp	r4, r0
    5c96:	4180      	sbcs	r0, r0
    5c98:	2301      	movs	r3, #1
    5c9a:	4318      	orrs	r0, r3
    5c9c:	e002      	b.n	5ca4 <__mcmp+0x34>
    5c9e:	4293      	cmp	r3, r2
    5ca0:	d8f2      	bhi.n	5c88 <__mcmp+0x18>
    5ca2:	2000      	movs	r0, #0
    5ca4:	bd10      	pop	{r4, pc}

00005ca6 <__mdiff>:
    5ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ca8:	1c07      	adds	r7, r0, #0
    5caa:	b085      	sub	sp, #20
    5cac:	1c08      	adds	r0, r1, #0
    5cae:	1c0d      	adds	r5, r1, #0
    5cb0:	1c11      	adds	r1, r2, #0
    5cb2:	1c14      	adds	r4, r2, #0
    5cb4:	f7ff ffdc 	bl	5c70 <__mcmp>
    5cb8:	1e06      	subs	r6, r0, #0
    5cba:	d107      	bne.n	5ccc <__mdiff+0x26>
    5cbc:	1c38      	adds	r0, r7, #0
    5cbe:	1c31      	adds	r1, r6, #0
    5cc0:	f7ff fdb2 	bl	5828 <_Balloc>
    5cc4:	2301      	movs	r3, #1
    5cc6:	6103      	str	r3, [r0, #16]
    5cc8:	6146      	str	r6, [r0, #20]
    5cca:	e050      	b.n	5d6e <__mdiff+0xc8>
    5ccc:	2800      	cmp	r0, #0
    5cce:	db01      	blt.n	5cd4 <__mdiff+0x2e>
    5cd0:	2600      	movs	r6, #0
    5cd2:	e003      	b.n	5cdc <__mdiff+0x36>
    5cd4:	1c2b      	adds	r3, r5, #0
    5cd6:	2601      	movs	r6, #1
    5cd8:	1c25      	adds	r5, r4, #0
    5cda:	1c1c      	adds	r4, r3, #0
    5cdc:	6869      	ldr	r1, [r5, #4]
    5cde:	1c38      	adds	r0, r7, #0
    5ce0:	f7ff fda2 	bl	5828 <_Balloc>
    5ce4:	692a      	ldr	r2, [r5, #16]
    5ce6:	1c2b      	adds	r3, r5, #0
    5ce8:	3314      	adds	r3, #20
    5cea:	0091      	lsls	r1, r2, #2
    5cec:	1859      	adds	r1, r3, r1
    5cee:	9102      	str	r1, [sp, #8]
    5cf0:	6921      	ldr	r1, [r4, #16]
    5cf2:	1c25      	adds	r5, r4, #0
    5cf4:	3514      	adds	r5, #20
    5cf6:	0089      	lsls	r1, r1, #2
    5cf8:	1869      	adds	r1, r5, r1
    5cfa:	1c04      	adds	r4, r0, #0
    5cfc:	9103      	str	r1, [sp, #12]
    5cfe:	60c6      	str	r6, [r0, #12]
    5d00:	3414      	adds	r4, #20
    5d02:	2100      	movs	r1, #0
    5d04:	cb40      	ldmia	r3!, {r6}
    5d06:	cd80      	ldmia	r5!, {r7}
    5d08:	46b4      	mov	ip, r6
    5d0a:	b2b6      	uxth	r6, r6
    5d0c:	1871      	adds	r1, r6, r1
    5d0e:	b2be      	uxth	r6, r7
    5d10:	1b8e      	subs	r6, r1, r6
    5d12:	4661      	mov	r1, ip
    5d14:	9601      	str	r6, [sp, #4]
    5d16:	0c3f      	lsrs	r7, r7, #16
    5d18:	0c0e      	lsrs	r6, r1, #16
    5d1a:	1bf7      	subs	r7, r6, r7
    5d1c:	9e01      	ldr	r6, [sp, #4]
    5d1e:	3404      	adds	r4, #4
    5d20:	1431      	asrs	r1, r6, #16
    5d22:	187f      	adds	r7, r7, r1
    5d24:	1439      	asrs	r1, r7, #16
    5d26:	043f      	lsls	r7, r7, #16
    5d28:	9700      	str	r7, [sp, #0]
    5d2a:	9f01      	ldr	r7, [sp, #4]
    5d2c:	1f26      	subs	r6, r4, #4
    5d2e:	46b4      	mov	ip, r6
    5d30:	b2be      	uxth	r6, r7
    5d32:	9f00      	ldr	r7, [sp, #0]
    5d34:	4337      	orrs	r7, r6
    5d36:	4666      	mov	r6, ip
    5d38:	6037      	str	r7, [r6, #0]
    5d3a:	9f03      	ldr	r7, [sp, #12]
    5d3c:	42bd      	cmp	r5, r7
    5d3e:	d3e1      	bcc.n	5d04 <__mdiff+0x5e>
    5d40:	9e02      	ldr	r6, [sp, #8]
    5d42:	1c25      	adds	r5, r4, #0
    5d44:	42b3      	cmp	r3, r6
    5d46:	d20b      	bcs.n	5d60 <__mdiff+0xba>
    5d48:	cb80      	ldmia	r3!, {r7}
    5d4a:	b2bd      	uxth	r5, r7
    5d4c:	186d      	adds	r5, r5, r1
    5d4e:	142e      	asrs	r6, r5, #16
    5d50:	0c3f      	lsrs	r7, r7, #16
    5d52:	19f6      	adds	r6, r6, r7
    5d54:	1431      	asrs	r1, r6, #16
    5d56:	b2ad      	uxth	r5, r5
    5d58:	0436      	lsls	r6, r6, #16
    5d5a:	4335      	orrs	r5, r6
    5d5c:	c420      	stmia	r4!, {r5}
    5d5e:	e7ef      	b.n	5d40 <__mdiff+0x9a>
    5d60:	3d04      	subs	r5, #4
    5d62:	682f      	ldr	r7, [r5, #0]
    5d64:	2f00      	cmp	r7, #0
    5d66:	d101      	bne.n	5d6c <__mdiff+0xc6>
    5d68:	3a01      	subs	r2, #1
    5d6a:	e7f9      	b.n	5d60 <__mdiff+0xba>
    5d6c:	6102      	str	r2, [r0, #16]
    5d6e:	b005      	add	sp, #20
    5d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005d72 <__ulp>:
    5d72:	4b0e      	ldr	r3, [pc, #56]	; (5dac <__ulp+0x3a>)
    5d74:	4a0e      	ldr	r2, [pc, #56]	; (5db0 <__ulp+0x3e>)
    5d76:	400b      	ands	r3, r1
    5d78:	189b      	adds	r3, r3, r2
    5d7a:	b510      	push	{r4, lr}
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	dd01      	ble.n	5d84 <__ulp+0x12>
    5d80:	1c19      	adds	r1, r3, #0
    5d82:	e009      	b.n	5d98 <__ulp+0x26>
    5d84:	425b      	negs	r3, r3
    5d86:	151b      	asrs	r3, r3, #20
    5d88:	2000      	movs	r0, #0
    5d8a:	2100      	movs	r1, #0
    5d8c:	2b13      	cmp	r3, #19
    5d8e:	dc05      	bgt.n	5d9c <__ulp+0x2a>
    5d90:	2280      	movs	r2, #128	; 0x80
    5d92:	0312      	lsls	r2, r2, #12
    5d94:	1c11      	adds	r1, r2, #0
    5d96:	4119      	asrs	r1, r3
    5d98:	2000      	movs	r0, #0
    5d9a:	e006      	b.n	5daa <__ulp+0x38>
    5d9c:	2201      	movs	r2, #1
    5d9e:	2b32      	cmp	r3, #50	; 0x32
    5da0:	dc02      	bgt.n	5da8 <__ulp+0x36>
    5da2:	2433      	movs	r4, #51	; 0x33
    5da4:	1ae3      	subs	r3, r4, r3
    5da6:	409a      	lsls	r2, r3
    5da8:	1c10      	adds	r0, r2, #0
    5daa:	bd10      	pop	{r4, pc}
    5dac:	7ff00000 	.word	0x7ff00000
    5db0:	fcc00000 	.word	0xfcc00000

00005db4 <__b2d>:
    5db4:	6903      	ldr	r3, [r0, #16]
    5db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5db8:	1c06      	adds	r6, r0, #0
    5dba:	3614      	adds	r6, #20
    5dbc:	009b      	lsls	r3, r3, #2
    5dbe:	18f3      	adds	r3, r6, r3
    5dc0:	1c1c      	adds	r4, r3, #0
    5dc2:	3c04      	subs	r4, #4
    5dc4:	6825      	ldr	r5, [r4, #0]
    5dc6:	1c0f      	adds	r7, r1, #0
    5dc8:	1c28      	adds	r0, r5, #0
    5dca:	9301      	str	r3, [sp, #4]
    5dcc:	f7ff fddc 	bl	5988 <__hi0bits>
    5dd0:	2320      	movs	r3, #32
    5dd2:	1a1b      	subs	r3, r3, r0
    5dd4:	603b      	str	r3, [r7, #0]
    5dd6:	491f      	ldr	r1, [pc, #124]	; (5e54 <__b2d+0xa0>)
    5dd8:	280a      	cmp	r0, #10
    5dda:	dc13      	bgt.n	5e04 <__b2d+0x50>
    5ddc:	230b      	movs	r3, #11
    5dde:	1a1b      	subs	r3, r3, r0
    5de0:	1c2f      	adds	r7, r5, #0
    5de2:	40df      	lsrs	r7, r3
    5de4:	469c      	mov	ip, r3
    5de6:	1c0b      	adds	r3, r1, #0
    5de8:	433b      	orrs	r3, r7
    5dea:	2100      	movs	r1, #0
    5dec:	42b4      	cmp	r4, r6
    5dee:	d902      	bls.n	5df6 <__b2d+0x42>
    5df0:	9901      	ldr	r1, [sp, #4]
    5df2:	3908      	subs	r1, #8
    5df4:	6809      	ldr	r1, [r1, #0]
    5df6:	4664      	mov	r4, ip
    5df8:	40e1      	lsrs	r1, r4
    5dfa:	3015      	adds	r0, #21
    5dfc:	4085      	lsls	r5, r0
    5dfe:	1c0a      	adds	r2, r1, #0
    5e00:	432a      	orrs	r2, r5
    5e02:	e022      	b.n	5e4a <__b2d+0x96>
    5e04:	2700      	movs	r7, #0
    5e06:	42b4      	cmp	r4, r6
    5e08:	d902      	bls.n	5e10 <__b2d+0x5c>
    5e0a:	9c01      	ldr	r4, [sp, #4]
    5e0c:	3c08      	subs	r4, #8
    5e0e:	6827      	ldr	r7, [r4, #0]
    5e10:	230b      	movs	r3, #11
    5e12:	425b      	negs	r3, r3
    5e14:	181b      	adds	r3, r3, r0
    5e16:	469c      	mov	ip, r3
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d013      	beq.n	5e44 <__b2d+0x90>
    5e1c:	232b      	movs	r3, #43	; 0x2b
    5e1e:	1a18      	subs	r0, r3, r0
    5e20:	4663      	mov	r3, ip
    5e22:	409d      	lsls	r5, r3
    5e24:	4329      	orrs	r1, r5
    5e26:	1c3d      	adds	r5, r7, #0
    5e28:	1c0b      	adds	r3, r1, #0
    5e2a:	40c5      	lsrs	r5, r0
    5e2c:	432b      	orrs	r3, r5
    5e2e:	2100      	movs	r1, #0
    5e30:	42b4      	cmp	r4, r6
    5e32:	d901      	bls.n	5e38 <__b2d+0x84>
    5e34:	3c04      	subs	r4, #4
    5e36:	6821      	ldr	r1, [r4, #0]
    5e38:	40c1      	lsrs	r1, r0
    5e3a:	4664      	mov	r4, ip
    5e3c:	40a7      	lsls	r7, r4
    5e3e:	1c0a      	adds	r2, r1, #0
    5e40:	433a      	orrs	r2, r7
    5e42:	e002      	b.n	5e4a <__b2d+0x96>
    5e44:	1c0b      	adds	r3, r1, #0
    5e46:	432b      	orrs	r3, r5
    5e48:	1c3a      	adds	r2, r7, #0
    5e4a:	1c10      	adds	r0, r2, #0
    5e4c:	1c19      	adds	r1, r3, #0
    5e4e:	b003      	add	sp, #12
    5e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e52:	46c0      	nop			; (mov r8, r8)
    5e54:	3ff00000 	.word	0x3ff00000

00005e58 <__d2b>:
    5e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e5a:	2101      	movs	r1, #1
    5e5c:	1c1d      	adds	r5, r3, #0
    5e5e:	1c14      	adds	r4, r2, #0
    5e60:	f7ff fce2 	bl	5828 <_Balloc>
    5e64:	006f      	lsls	r7, r5, #1
    5e66:	032b      	lsls	r3, r5, #12
    5e68:	1c06      	adds	r6, r0, #0
    5e6a:	0b1b      	lsrs	r3, r3, #12
    5e6c:	0d7f      	lsrs	r7, r7, #21
    5e6e:	d002      	beq.n	5e76 <__d2b+0x1e>
    5e70:	2280      	movs	r2, #128	; 0x80
    5e72:	0352      	lsls	r2, r2, #13
    5e74:	4313      	orrs	r3, r2
    5e76:	9301      	str	r3, [sp, #4]
    5e78:	2c00      	cmp	r4, #0
    5e7a:	d019      	beq.n	5eb0 <__d2b+0x58>
    5e7c:	4668      	mov	r0, sp
    5e7e:	9400      	str	r4, [sp, #0]
    5e80:	f7ff fd9e 	bl	59c0 <__lo0bits>
    5e84:	9a00      	ldr	r2, [sp, #0]
    5e86:	2800      	cmp	r0, #0
    5e88:	d009      	beq.n	5e9e <__d2b+0x46>
    5e8a:	9b01      	ldr	r3, [sp, #4]
    5e8c:	2120      	movs	r1, #32
    5e8e:	1c1c      	adds	r4, r3, #0
    5e90:	1a09      	subs	r1, r1, r0
    5e92:	408c      	lsls	r4, r1
    5e94:	4322      	orrs	r2, r4
    5e96:	40c3      	lsrs	r3, r0
    5e98:	6172      	str	r2, [r6, #20]
    5e9a:	9301      	str	r3, [sp, #4]
    5e9c:	e000      	b.n	5ea0 <__d2b+0x48>
    5e9e:	6172      	str	r2, [r6, #20]
    5ea0:	9c01      	ldr	r4, [sp, #4]
    5ea2:	61b4      	str	r4, [r6, #24]
    5ea4:	4263      	negs	r3, r4
    5ea6:	4163      	adcs	r3, r4
    5ea8:	2402      	movs	r4, #2
    5eaa:	1ae4      	subs	r4, r4, r3
    5eac:	6134      	str	r4, [r6, #16]
    5eae:	e007      	b.n	5ec0 <__d2b+0x68>
    5eb0:	a801      	add	r0, sp, #4
    5eb2:	f7ff fd85 	bl	59c0 <__lo0bits>
    5eb6:	9901      	ldr	r1, [sp, #4]
    5eb8:	2401      	movs	r4, #1
    5eba:	6171      	str	r1, [r6, #20]
    5ebc:	6134      	str	r4, [r6, #16]
    5ebe:	3020      	adds	r0, #32
    5ec0:	2f00      	cmp	r7, #0
    5ec2:	d009      	beq.n	5ed8 <__d2b+0x80>
    5ec4:	4a0d      	ldr	r2, [pc, #52]	; (5efc <__d2b+0xa4>)
    5ec6:	9c08      	ldr	r4, [sp, #32]
    5ec8:	18bf      	adds	r7, r7, r2
    5eca:	183f      	adds	r7, r7, r0
    5ecc:	6027      	str	r7, [r4, #0]
    5ece:	2335      	movs	r3, #53	; 0x35
    5ed0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5ed2:	1a18      	subs	r0, r3, r0
    5ed4:	6020      	str	r0, [r4, #0]
    5ed6:	e00e      	b.n	5ef6 <__d2b+0x9e>
    5ed8:	4909      	ldr	r1, [pc, #36]	; (5f00 <__d2b+0xa8>)
    5eda:	9a08      	ldr	r2, [sp, #32]
    5edc:	1840      	adds	r0, r0, r1
    5ede:	4909      	ldr	r1, [pc, #36]	; (5f04 <__d2b+0xac>)
    5ee0:	6010      	str	r0, [r2, #0]
    5ee2:	1863      	adds	r3, r4, r1
    5ee4:	009b      	lsls	r3, r3, #2
    5ee6:	18f3      	adds	r3, r6, r3
    5ee8:	6958      	ldr	r0, [r3, #20]
    5eea:	f7ff fd4d 	bl	5988 <__hi0bits>
    5eee:	0164      	lsls	r4, r4, #5
    5ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5ef2:	1a24      	subs	r4, r4, r0
    5ef4:	6014      	str	r4, [r2, #0]
    5ef6:	1c30      	adds	r0, r6, #0
    5ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5efa:	46c0      	nop			; (mov r8, r8)
    5efc:	fffffbcd 	.word	0xfffffbcd
    5f00:	fffffbce 	.word	0xfffffbce
    5f04:	3fffffff 	.word	0x3fffffff

00005f08 <__ratio>:
    5f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f0a:	1c0e      	adds	r6, r1, #0
    5f0c:	4669      	mov	r1, sp
    5f0e:	1c07      	adds	r7, r0, #0
    5f10:	f7ff ff50 	bl	5db4 <__b2d>
    5f14:	1c04      	adds	r4, r0, #0
    5f16:	1c0d      	adds	r5, r1, #0
    5f18:	1c30      	adds	r0, r6, #0
    5f1a:	a901      	add	r1, sp, #4
    5f1c:	f7ff ff4a 	bl	5db4 <__b2d>
    5f20:	1c02      	adds	r2, r0, #0
    5f22:	1c0b      	adds	r3, r1, #0
    5f24:	9800      	ldr	r0, [sp, #0]
    5f26:	9901      	ldr	r1, [sp, #4]
    5f28:	693f      	ldr	r7, [r7, #16]
    5f2a:	1a40      	subs	r0, r0, r1
    5f2c:	6931      	ldr	r1, [r6, #16]
    5f2e:	4684      	mov	ip, r0
    5f30:	1a79      	subs	r1, r7, r1
    5f32:	0149      	lsls	r1, r1, #5
    5f34:	4461      	add	r1, ip
    5f36:	2900      	cmp	r1, #0
    5f38:	dd02      	ble.n	5f40 <__ratio+0x38>
    5f3a:	0509      	lsls	r1, r1, #20
    5f3c:	194d      	adds	r5, r1, r5
    5f3e:	e001      	b.n	5f44 <__ratio+0x3c>
    5f40:	0509      	lsls	r1, r1, #20
    5f42:	1a5b      	subs	r3, r3, r1
    5f44:	1c20      	adds	r0, r4, #0
    5f46:	1c29      	adds	r1, r5, #0
    5f48:	f000 ff7c 	bl	6e44 <__aeabi_ddiv>
    5f4c:	b003      	add	sp, #12
    5f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f50 <_mprec_log10>:
    5f50:	b510      	push	{r4, lr}
    5f52:	1e04      	subs	r4, r0, #0
    5f54:	2c17      	cmp	r4, #23
    5f56:	dc05      	bgt.n	5f64 <_mprec_log10+0x14>
    5f58:	4b0b      	ldr	r3, [pc, #44]	; (5f88 <_mprec_log10+0x38>)
    5f5a:	00c4      	lsls	r4, r0, #3
    5f5c:	191c      	adds	r4, r3, r4
    5f5e:	6920      	ldr	r0, [r4, #16]
    5f60:	6961      	ldr	r1, [r4, #20]
    5f62:	e008      	b.n	5f76 <_mprec_log10+0x26>
    5f64:	4905      	ldr	r1, [pc, #20]	; (5f7c <_mprec_log10+0x2c>)
    5f66:	4804      	ldr	r0, [pc, #16]	; (5f78 <_mprec_log10+0x28>)
    5f68:	4a05      	ldr	r2, [pc, #20]	; (5f80 <_mprec_log10+0x30>)
    5f6a:	4b06      	ldr	r3, [pc, #24]	; (5f84 <_mprec_log10+0x34>)
    5f6c:	3c01      	subs	r4, #1
    5f6e:	f7fc fb79 	bl	2664 <__aeabi_dmul>
    5f72:	2c00      	cmp	r4, #0
    5f74:	d1f8      	bne.n	5f68 <_mprec_log10+0x18>
    5f76:	bd10      	pop	{r4, pc}
    5f78:	00000000 	.word	0x00000000
    5f7c:	3ff00000 	.word	0x3ff00000
    5f80:	00000000 	.word	0x00000000
    5f84:	40240000 	.word	0x40240000
    5f88:	00007d28 	.word	0x00007d28

00005f8c <__copybits>:
    5f8c:	3901      	subs	r1, #1
    5f8e:	b510      	push	{r4, lr}
    5f90:	1c13      	adds	r3, r2, #0
    5f92:	1149      	asrs	r1, r1, #5
    5f94:	6912      	ldr	r2, [r2, #16]
    5f96:	3101      	adds	r1, #1
    5f98:	0089      	lsls	r1, r1, #2
    5f9a:	3314      	adds	r3, #20
    5f9c:	0092      	lsls	r2, r2, #2
    5f9e:	1841      	adds	r1, r0, r1
    5fa0:	189a      	adds	r2, r3, r2
    5fa2:	4293      	cmp	r3, r2
    5fa4:	d202      	bcs.n	5fac <__copybits+0x20>
    5fa6:	cb10      	ldmia	r3!, {r4}
    5fa8:	c010      	stmia	r0!, {r4}
    5faa:	e7fa      	b.n	5fa2 <__copybits+0x16>
    5fac:	4288      	cmp	r0, r1
    5fae:	d202      	bcs.n	5fb6 <__copybits+0x2a>
    5fb0:	2300      	movs	r3, #0
    5fb2:	c008      	stmia	r0!, {r3}
    5fb4:	e7fa      	b.n	5fac <__copybits+0x20>
    5fb6:	bd10      	pop	{r4, pc}

00005fb8 <__any_on>:
    5fb8:	1c02      	adds	r2, r0, #0
    5fba:	6900      	ldr	r0, [r0, #16]
    5fbc:	b510      	push	{r4, lr}
    5fbe:	3214      	adds	r2, #20
    5fc0:	114b      	asrs	r3, r1, #5
    5fc2:	4283      	cmp	r3, r0
    5fc4:	dc0d      	bgt.n	5fe2 <__any_on+0x2a>
    5fc6:	da0d      	bge.n	5fe4 <__any_on+0x2c>
    5fc8:	201f      	movs	r0, #31
    5fca:	4001      	ands	r1, r0
    5fcc:	d00a      	beq.n	5fe4 <__any_on+0x2c>
    5fce:	0098      	lsls	r0, r3, #2
    5fd0:	5884      	ldr	r4, [r0, r2]
    5fd2:	1c20      	adds	r0, r4, #0
    5fd4:	40c8      	lsrs	r0, r1
    5fd6:	4088      	lsls	r0, r1
    5fd8:	1c01      	adds	r1, r0, #0
    5fda:	2001      	movs	r0, #1
    5fdc:	42a1      	cmp	r1, r4
    5fde:	d10c      	bne.n	5ffa <__any_on+0x42>
    5fe0:	e000      	b.n	5fe4 <__any_on+0x2c>
    5fe2:	1c03      	adds	r3, r0, #0
    5fe4:	009b      	lsls	r3, r3, #2
    5fe6:	18d3      	adds	r3, r2, r3
    5fe8:	4293      	cmp	r3, r2
    5fea:	d905      	bls.n	5ff8 <__any_on+0x40>
    5fec:	3b04      	subs	r3, #4
    5fee:	6819      	ldr	r1, [r3, #0]
    5ff0:	2900      	cmp	r1, #0
    5ff2:	d0f9      	beq.n	5fe8 <__any_on+0x30>
    5ff4:	2001      	movs	r0, #1
    5ff6:	e000      	b.n	5ffa <__any_on+0x42>
    5ff8:	2000      	movs	r0, #0
    5ffa:	bd10      	pop	{r4, pc}
    5ffc:	46c0      	nop			; (mov r8, r8)
    5ffe:	46c0      	nop			; (mov r8, r8)

00006000 <__fpclassifyd>:
    6000:	b530      	push	{r4, r5, lr}
    6002:	1c0b      	adds	r3, r1, #0
    6004:	1c04      	adds	r4, r0, #0
    6006:	1c02      	adds	r2, r0, #0
    6008:	431c      	orrs	r4, r3
    600a:	2002      	movs	r0, #2
    600c:	2c00      	cmp	r4, #0
    600e:	d017      	beq.n	6040 <__fpclassifyd+0x40>
    6010:	2480      	movs	r4, #128	; 0x80
    6012:	0624      	lsls	r4, r4, #24
    6014:	42a3      	cmp	r3, r4
    6016:	d101      	bne.n	601c <__fpclassifyd+0x1c>
    6018:	2a00      	cmp	r2, #0
    601a:	d011      	beq.n	6040 <__fpclassifyd+0x40>
    601c:	4809      	ldr	r0, [pc, #36]	; (6044 <__fpclassifyd+0x44>)
    601e:	0059      	lsls	r1, r3, #1
    6020:	0849      	lsrs	r1, r1, #1
    6022:	4c09      	ldr	r4, [pc, #36]	; (6048 <__fpclassifyd+0x48>)
    6024:	180d      	adds	r5, r1, r0
    6026:	2004      	movs	r0, #4
    6028:	42a5      	cmp	r5, r4
    602a:	d909      	bls.n	6040 <__fpclassifyd+0x40>
    602c:	4c07      	ldr	r4, [pc, #28]	; (604c <__fpclassifyd+0x4c>)
    602e:	2003      	movs	r0, #3
    6030:	42a1      	cmp	r1, r4
    6032:	d905      	bls.n	6040 <__fpclassifyd+0x40>
    6034:	4c06      	ldr	r4, [pc, #24]	; (6050 <__fpclassifyd+0x50>)
    6036:	2000      	movs	r0, #0
    6038:	42a1      	cmp	r1, r4
    603a:	d101      	bne.n	6040 <__fpclassifyd+0x40>
    603c:	4250      	negs	r0, r2
    603e:	4150      	adcs	r0, r2
    6040:	bd30      	pop	{r4, r5, pc}
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	fff00000 	.word	0xfff00000
    6048:	7fdfffff 	.word	0x7fdfffff
    604c:	000fffff 	.word	0x000fffff
    6050:	7ff00000 	.word	0x7ff00000

00006054 <_sbrk_r>:
    6054:	b538      	push	{r3, r4, r5, lr}
    6056:	4c07      	ldr	r4, [pc, #28]	; (6074 <_sbrk_r+0x20>)
    6058:	2300      	movs	r3, #0
    605a:	1c05      	adds	r5, r0, #0
    605c:	1c08      	adds	r0, r1, #0
    605e:	6023      	str	r3, [r4, #0]
    6060:	f7fb fc2e 	bl	18c0 <_sbrk>
    6064:	1c43      	adds	r3, r0, #1
    6066:	d103      	bne.n	6070 <_sbrk_r+0x1c>
    6068:	6823      	ldr	r3, [r4, #0]
    606a:	2b00      	cmp	r3, #0
    606c:	d000      	beq.n	6070 <_sbrk_r+0x1c>
    606e:	602b      	str	r3, [r5, #0]
    6070:	bd38      	pop	{r3, r4, r5, pc}
    6072:	46c0      	nop			; (mov r8, r8)
    6074:	200009f8 	.word	0x200009f8

00006078 <strcmp>:
    6078:	7802      	ldrb	r2, [r0, #0]
    607a:	780b      	ldrb	r3, [r1, #0]
    607c:	3001      	adds	r0, #1
    607e:	3101      	adds	r1, #1
    6080:	2a00      	cmp	r2, #0
    6082:	d001      	beq.n	6088 <strcmp+0x10>
    6084:	429a      	cmp	r2, r3
    6086:	d0f7      	beq.n	6078 <strcmp>
    6088:	1ad0      	subs	r0, r2, r3
    608a:	4770      	bx	lr

0000608c <strlen>:
    608c:	2300      	movs	r3, #0
    608e:	5cc2      	ldrb	r2, [r0, r3]
    6090:	3301      	adds	r3, #1
    6092:	2a00      	cmp	r2, #0
    6094:	d1fb      	bne.n	608e <strlen+0x2>
    6096:	1e58      	subs	r0, r3, #1
    6098:	4770      	bx	lr
	...

0000609c <__ssprint_r>:
    609c:	b5f0      	push	{r4, r5, r6, r7, lr}
    609e:	b087      	sub	sp, #28
    60a0:	9003      	str	r0, [sp, #12]
    60a2:	6810      	ldr	r0, [r2, #0]
    60a4:	1c0c      	adds	r4, r1, #0
    60a6:	9004      	str	r0, [sp, #16]
    60a8:	6890      	ldr	r0, [r2, #8]
    60aa:	1c16      	adds	r6, r2, #0
    60ac:	2800      	cmp	r0, #0
    60ae:	d003      	beq.n	60b8 <__ssprint_r+0x1c>
    60b0:	2100      	movs	r1, #0
    60b2:	9102      	str	r1, [sp, #8]
    60b4:	1c0d      	adds	r5, r1, #0
    60b6:	e01e      	b.n	60f6 <__ssprint_r+0x5a>
    60b8:	6050      	str	r0, [r2, #4]
    60ba:	e074      	b.n	61a6 <__ssprint_r+0x10a>
    60bc:	68a7      	ldr	r7, [r4, #8]
    60be:	42bd      	cmp	r5, r7
    60c0:	d363      	bcc.n	618a <__ssprint_r+0xee>
    60c2:	2290      	movs	r2, #144	; 0x90
    60c4:	89a3      	ldrh	r3, [r4, #12]
    60c6:	00d2      	lsls	r2, r2, #3
    60c8:	4213      	tst	r3, r2
    60ca:	d11e      	bne.n	610a <__ssprint_r+0x6e>
    60cc:	42bd      	cmp	r5, r7
    60ce:	d35c      	bcc.n	618a <__ssprint_r+0xee>
    60d0:	1c3a      	adds	r2, r7, #0
    60d2:	9902      	ldr	r1, [sp, #8]
    60d4:	6820      	ldr	r0, [r4, #0]
    60d6:	f000 fc83 	bl	69e0 <memmove>
    60da:	68a1      	ldr	r1, [r4, #8]
    60dc:	6822      	ldr	r2, [r4, #0]
    60de:	1bcb      	subs	r3, r1, r7
    60e0:	60a3      	str	r3, [r4, #8]
    60e2:	68b0      	ldr	r0, [r6, #8]
    60e4:	9b02      	ldr	r3, [sp, #8]
    60e6:	19d7      	adds	r7, r2, r7
    60e8:	195b      	adds	r3, r3, r5
    60ea:	1b45      	subs	r5, r0, r5
    60ec:	6027      	str	r7, [r4, #0]
    60ee:	9302      	str	r3, [sp, #8]
    60f0:	60b5      	str	r5, [r6, #8]
    60f2:	d04c      	beq.n	618e <__ssprint_r+0xf2>
    60f4:	2500      	movs	r5, #0
    60f6:	2d00      	cmp	r5, #0
    60f8:	d1e0      	bne.n	60bc <__ssprint_r+0x20>
    60fa:	9a04      	ldr	r2, [sp, #16]
    60fc:	9b04      	ldr	r3, [sp, #16]
    60fe:	6812      	ldr	r2, [r2, #0]
    6100:	685d      	ldr	r5, [r3, #4]
    6102:	3308      	adds	r3, #8
    6104:	9202      	str	r2, [sp, #8]
    6106:	9304      	str	r3, [sp, #16]
    6108:	e7f5      	b.n	60f6 <__ssprint_r+0x5a>
    610a:	6921      	ldr	r1, [r4, #16]
    610c:	6820      	ldr	r0, [r4, #0]
    610e:	2203      	movs	r2, #3
    6110:	1a40      	subs	r0, r0, r1
    6112:	9005      	str	r0, [sp, #20]
    6114:	6960      	ldr	r0, [r4, #20]
    6116:	4342      	muls	r2, r0
    6118:	0fd0      	lsrs	r0, r2, #31
    611a:	1882      	adds	r2, r0, r2
    611c:	1052      	asrs	r2, r2, #1
    611e:	9201      	str	r2, [sp, #4]
    6120:	9a05      	ldr	r2, [sp, #20]
    6122:	9801      	ldr	r0, [sp, #4]
    6124:	3201      	adds	r2, #1
    6126:	1952      	adds	r2, r2, r5
    6128:	4290      	cmp	r0, r2
    612a:	d200      	bcs.n	612e <__ssprint_r+0x92>
    612c:	9201      	str	r2, [sp, #4]
    612e:	9803      	ldr	r0, [sp, #12]
    6130:	055a      	lsls	r2, r3, #21
    6132:	d513      	bpl.n	615c <__ssprint_r+0xc0>
    6134:	9901      	ldr	r1, [sp, #4]
    6136:	f7ff f971 	bl	541c <_malloc_r>
    613a:	1e07      	subs	r7, r0, #0
    613c:	d103      	bne.n	6146 <__ssprint_r+0xaa>
    613e:	9803      	ldr	r0, [sp, #12]
    6140:	230c      	movs	r3, #12
    6142:	6003      	str	r3, [r0, #0]
    6144:	e026      	b.n	6194 <__ssprint_r+0xf8>
    6146:	9a05      	ldr	r2, [sp, #20]
    6148:	6921      	ldr	r1, [r4, #16]
    614a:	f7fd f953 	bl	33f4 <memcpy>
    614e:	89a2      	ldrh	r2, [r4, #12]
    6150:	4b16      	ldr	r3, [pc, #88]	; (61ac <__ssprint_r+0x110>)
    6152:	4013      	ands	r3, r2
    6154:	2280      	movs	r2, #128	; 0x80
    6156:	4313      	orrs	r3, r2
    6158:	81a3      	strh	r3, [r4, #12]
    615a:	e00c      	b.n	6176 <__ssprint_r+0xda>
    615c:	9a01      	ldr	r2, [sp, #4]
    615e:	f000 fc59 	bl	6a14 <_realloc_r>
    6162:	1e07      	subs	r7, r0, #0
    6164:	d107      	bne.n	6176 <__ssprint_r+0xda>
    6166:	6921      	ldr	r1, [r4, #16]
    6168:	9803      	ldr	r0, [sp, #12]
    616a:	f7ff f84d 	bl	5208 <_free_r>
    616e:	9903      	ldr	r1, [sp, #12]
    6170:	230c      	movs	r3, #12
    6172:	600b      	str	r3, [r1, #0]
    6174:	e00e      	b.n	6194 <__ssprint_r+0xf8>
    6176:	9a05      	ldr	r2, [sp, #20]
    6178:	9b01      	ldr	r3, [sp, #4]
    617a:	6127      	str	r7, [r4, #16]
    617c:	6163      	str	r3, [r4, #20]
    617e:	18bf      	adds	r7, r7, r2
    6180:	1a9b      	subs	r3, r3, r2
    6182:	6027      	str	r7, [r4, #0]
    6184:	60a3      	str	r3, [r4, #8]
    6186:	1c2f      	adds	r7, r5, #0
    6188:	e7a0      	b.n	60cc <__ssprint_r+0x30>
    618a:	1c2f      	adds	r7, r5, #0
    618c:	e7a0      	b.n	60d0 <__ssprint_r+0x34>
    618e:	6075      	str	r5, [r6, #4]
    6190:	1c28      	adds	r0, r5, #0
    6192:	e008      	b.n	61a6 <__ssprint_r+0x10a>
    6194:	89a3      	ldrh	r3, [r4, #12]
    6196:	2240      	movs	r2, #64	; 0x40
    6198:	4313      	orrs	r3, r2
    619a:	81a3      	strh	r3, [r4, #12]
    619c:	2001      	movs	r0, #1
    619e:	2300      	movs	r3, #0
    61a0:	60b3      	str	r3, [r6, #8]
    61a2:	6073      	str	r3, [r6, #4]
    61a4:	4240      	negs	r0, r0
    61a6:	b007      	add	sp, #28
    61a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	fffffb7f 	.word	0xfffffb7f

000061b0 <_svfiprintf_r>:
    61b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61b2:	1c1c      	adds	r4, r3, #0
    61b4:	898b      	ldrh	r3, [r1, #12]
    61b6:	b0b1      	sub	sp, #196	; 0xc4
    61b8:	9007      	str	r0, [sp, #28]
    61ba:	9105      	str	r1, [sp, #20]
    61bc:	9208      	str	r2, [sp, #32]
    61be:	0618      	lsls	r0, r3, #24
    61c0:	d512      	bpl.n	61e8 <_svfiprintf_r+0x38>
    61c2:	6909      	ldr	r1, [r1, #16]
    61c4:	2900      	cmp	r1, #0
    61c6:	d10f      	bne.n	61e8 <_svfiprintf_r+0x38>
    61c8:	9807      	ldr	r0, [sp, #28]
    61ca:	2140      	movs	r1, #64	; 0x40
    61cc:	f7ff f926 	bl	541c <_malloc_r>
    61d0:	9f05      	ldr	r7, [sp, #20]
    61d2:	6038      	str	r0, [r7, #0]
    61d4:	6138      	str	r0, [r7, #16]
    61d6:	2800      	cmp	r0, #0
    61d8:	d103      	bne.n	61e2 <_svfiprintf_r+0x32>
    61da:	9f07      	ldr	r7, [sp, #28]
    61dc:	230c      	movs	r3, #12
    61de:	603b      	str	r3, [r7, #0]
    61e0:	e3cb      	b.n	697a <_svfiprintf_r+0x7ca>
    61e2:	9f05      	ldr	r7, [sp, #20]
    61e4:	2340      	movs	r3, #64	; 0x40
    61e6:	617b      	str	r3, [r7, #20]
    61e8:	2300      	movs	r3, #0
    61ea:	ad20      	add	r5, sp, #128	; 0x80
    61ec:	9513      	str	r5, [sp, #76]	; 0x4c
    61ee:	9315      	str	r3, [sp, #84]	; 0x54
    61f0:	9314      	str	r3, [sp, #80]	; 0x50
    61f2:	930e      	str	r3, [sp, #56]	; 0x38
    61f4:	930c      	str	r3, [sp, #48]	; 0x30
    61f6:	9e08      	ldr	r6, [sp, #32]
    61f8:	7833      	ldrb	r3, [r6, #0]
    61fa:	2b00      	cmp	r3, #0
    61fc:	d103      	bne.n	6206 <_svfiprintf_r+0x56>
    61fe:	9808      	ldr	r0, [sp, #32]
    6200:	1a37      	subs	r7, r6, r0
    6202:	d104      	bne.n	620e <_svfiprintf_r+0x5e>
    6204:	e01c      	b.n	6240 <_svfiprintf_r+0x90>
    6206:	2b25      	cmp	r3, #37	; 0x25
    6208:	d0f9      	beq.n	61fe <_svfiprintf_r+0x4e>
    620a:	3601      	adds	r6, #1
    620c:	e7f4      	b.n	61f8 <_svfiprintf_r+0x48>
    620e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6210:	9908      	ldr	r1, [sp, #32]
    6212:	18bb      	adds	r3, r7, r2
    6214:	9315      	str	r3, [sp, #84]	; 0x54
    6216:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6218:	6029      	str	r1, [r5, #0]
    621a:	3301      	adds	r3, #1
    621c:	606f      	str	r7, [r5, #4]
    621e:	9314      	str	r3, [sp, #80]	; 0x50
    6220:	2b07      	cmp	r3, #7
    6222:	dc01      	bgt.n	6228 <_svfiprintf_r+0x78>
    6224:	3508      	adds	r5, #8
    6226:	e008      	b.n	623a <_svfiprintf_r+0x8a>
    6228:	9807      	ldr	r0, [sp, #28]
    622a:	9905      	ldr	r1, [sp, #20]
    622c:	aa13      	add	r2, sp, #76	; 0x4c
    622e:	f7ff ff35 	bl	609c <__ssprint_r>
    6232:	2800      	cmp	r0, #0
    6234:	d000      	beq.n	6238 <_svfiprintf_r+0x88>
    6236:	e39b      	b.n	6970 <_svfiprintf_r+0x7c0>
    6238:	ad20      	add	r5, sp, #128	; 0x80
    623a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    623c:	19db      	adds	r3, r3, r7
    623e:	930c      	str	r3, [sp, #48]	; 0x30
    6240:	7833      	ldrb	r3, [r6, #0]
    6242:	2b00      	cmp	r3, #0
    6244:	d100      	bne.n	6248 <_svfiprintf_r+0x98>
    6246:	e38b      	b.n	6960 <_svfiprintf_r+0x7b0>
    6248:	4669      	mov	r1, sp
    624a:	2200      	movs	r2, #0
    624c:	3147      	adds	r1, #71	; 0x47
    624e:	700a      	strb	r2, [r1, #0]
    6250:	2101      	movs	r1, #1
    6252:	4249      	negs	r1, r1
    6254:	1c73      	adds	r3, r6, #1
    6256:	9104      	str	r1, [sp, #16]
    6258:	920b      	str	r2, [sp, #44]	; 0x2c
    625a:	1c16      	adds	r6, r2, #0
    625c:	1c5f      	adds	r7, r3, #1
    625e:	781b      	ldrb	r3, [r3, #0]
    6260:	9708      	str	r7, [sp, #32]
    6262:	2b58      	cmp	r3, #88	; 0x58
    6264:	d070      	beq.n	6348 <_svfiprintf_r+0x198>
    6266:	dc38      	bgt.n	62da <_svfiprintf_r+0x12a>
    6268:	2b2e      	cmp	r3, #46	; 0x2e
    626a:	d100      	bne.n	626e <_svfiprintf_r+0xbe>
    626c:	e07e      	b.n	636c <_svfiprintf_r+0x1bc>
    626e:	dc1c      	bgt.n	62aa <_svfiprintf_r+0xfa>
    6270:	2b2a      	cmp	r3, #42	; 0x2a
    6272:	d071      	beq.n	6358 <_svfiprintf_r+0x1a8>
    6274:	dc06      	bgt.n	6284 <_svfiprintf_r+0xd4>
    6276:	2b20      	cmp	r3, #32
    6278:	d06b      	beq.n	6352 <_svfiprintf_r+0x1a2>
    627a:	2b23      	cmp	r3, #35	; 0x23
    627c:	d000      	beq.n	6280 <_svfiprintf_r+0xd0>
    627e:	e214      	b.n	66aa <_svfiprintf_r+0x4fa>
    6280:	2301      	movs	r3, #1
    6282:	e071      	b.n	6368 <_svfiprintf_r+0x1b8>
    6284:	2b2b      	cmp	r3, #43	; 0x2b
    6286:	d10d      	bne.n	62a4 <_svfiprintf_r+0xf4>
    6288:	1c1a      	adds	r2, r3, #0
    628a:	e009      	b.n	62a0 <_svfiprintf_r+0xf0>
    628c:	1d23      	adds	r3, r4, #4
    628e:	6824      	ldr	r4, [r4, #0]
    6290:	9404      	str	r4, [sp, #16]
    6292:	2c00      	cmp	r4, #0
    6294:	da72      	bge.n	637c <_svfiprintf_r+0x1cc>
    6296:	1c1c      	adds	r4, r3, #0
    6298:	2301      	movs	r3, #1
    629a:	425b      	negs	r3, r3
    629c:	9108      	str	r1, [sp, #32]
    629e:	9304      	str	r3, [sp, #16]
    62a0:	9b08      	ldr	r3, [sp, #32]
    62a2:	e7db      	b.n	625c <_svfiprintf_r+0xac>
    62a4:	2b2d      	cmp	r3, #45	; 0x2d
    62a6:	d05e      	beq.n	6366 <_svfiprintf_r+0x1b6>
    62a8:	e1ff      	b.n	66aa <_svfiprintf_r+0x4fa>
    62aa:	2b39      	cmp	r3, #57	; 0x39
    62ac:	dc06      	bgt.n	62bc <_svfiprintf_r+0x10c>
    62ae:	2b31      	cmp	r3, #49	; 0x31
    62b0:	da7a      	bge.n	63a8 <_svfiprintf_r+0x1f8>
    62b2:	2b30      	cmp	r3, #48	; 0x30
    62b4:	d000      	beq.n	62b8 <_svfiprintf_r+0x108>
    62b6:	e1f8      	b.n	66aa <_svfiprintf_r+0x4fa>
    62b8:	2380      	movs	r3, #128	; 0x80
    62ba:	e055      	b.n	6368 <_svfiprintf_r+0x1b8>
    62bc:	2b4f      	cmp	r3, #79	; 0x4f
    62be:	d100      	bne.n	62c2 <_svfiprintf_r+0x112>
    62c0:	e0df      	b.n	6482 <_svfiprintf_r+0x2d2>
    62c2:	2b55      	cmp	r3, #85	; 0x55
    62c4:	d100      	bne.n	62c8 <_svfiprintf_r+0x118>
    62c6:	e122      	b.n	650e <_svfiprintf_r+0x35e>
    62c8:	2b44      	cmp	r3, #68	; 0x44
    62ca:	d000      	beq.n	62ce <_svfiprintf_r+0x11e>
    62cc:	e1ed      	b.n	66aa <_svfiprintf_r+0x4fa>
    62ce:	466b      	mov	r3, sp
    62d0:	3347      	adds	r3, #71	; 0x47
    62d2:	701a      	strb	r2, [r3, #0]
    62d4:	2310      	movs	r3, #16
    62d6:	431e      	orrs	r6, r3
    62d8:	e093      	b.n	6402 <_svfiprintf_r+0x252>
    62da:	2b6e      	cmp	r3, #110	; 0x6e
    62dc:	d100      	bne.n	62e0 <_svfiprintf_r+0x130>
    62de:	e0b7      	b.n	6450 <_svfiprintf_r+0x2a0>
    62e0:	dc0c      	bgt.n	62fc <_svfiprintf_r+0x14c>
    62e2:	2b68      	cmp	r3, #104	; 0x68
    62e4:	d073      	beq.n	63ce <_svfiprintf_r+0x21e>
    62e6:	dc04      	bgt.n	62f2 <_svfiprintf_r+0x142>
    62e8:	2b63      	cmp	r3, #99	; 0x63
    62ea:	d07d      	beq.n	63e8 <_svfiprintf_r+0x238>
    62ec:	2b64      	cmp	r3, #100	; 0x64
    62ee:	d027      	beq.n	6340 <_svfiprintf_r+0x190>
    62f0:	e1db      	b.n	66aa <_svfiprintf_r+0x4fa>
    62f2:	2b69      	cmp	r3, #105	; 0x69
    62f4:	d024      	beq.n	6340 <_svfiprintf_r+0x190>
    62f6:	2b6c      	cmp	r3, #108	; 0x6c
    62f8:	d06b      	beq.n	63d2 <_svfiprintf_r+0x222>
    62fa:	e1d6      	b.n	66aa <_svfiprintf_r+0x4fa>
    62fc:	2b71      	cmp	r3, #113	; 0x71
    62fe:	d071      	beq.n	63e4 <_svfiprintf_r+0x234>
    6300:	dc14      	bgt.n	632c <_svfiprintf_r+0x17c>
    6302:	2b6f      	cmp	r3, #111	; 0x6f
    6304:	d100      	bne.n	6308 <_svfiprintf_r+0x158>
    6306:	e0be      	b.n	6486 <_svfiprintf_r+0x2d6>
    6308:	2b70      	cmp	r3, #112	; 0x70
    630a:	d000      	beq.n	630e <_svfiprintf_r+0x15e>
    630c:	e1cd      	b.n	66aa <_svfiprintf_r+0x4fa>
    630e:	6821      	ldr	r1, [r4, #0]
    6310:	2200      	movs	r2, #0
    6312:	ab12      	add	r3, sp, #72	; 0x48
    6314:	9102      	str	r1, [sp, #8]
    6316:	4fc0      	ldr	r7, [pc, #768]	; (6618 <_svfiprintf_r+0x468>)
    6318:	2130      	movs	r1, #48	; 0x30
    631a:	9203      	str	r2, [sp, #12]
    631c:	7019      	strb	r1, [r3, #0]
    631e:	2202      	movs	r2, #2
    6320:	2178      	movs	r1, #120	; 0x78
    6322:	4316      	orrs	r6, r2
    6324:	7059      	strb	r1, [r3, #1]
    6326:	3404      	adds	r4, #4
    6328:	970e      	str	r7, [sp, #56]	; 0x38
    632a:	e13f      	b.n	65ac <_svfiprintf_r+0x3fc>
    632c:	2b75      	cmp	r3, #117	; 0x75
    632e:	d100      	bne.n	6332 <_svfiprintf_r+0x182>
    6330:	e0ef      	b.n	6512 <_svfiprintf_r+0x362>
    6332:	2b78      	cmp	r3, #120	; 0x78
    6334:	d100      	bne.n	6338 <_svfiprintf_r+0x188>
    6336:	e10b      	b.n	6550 <_svfiprintf_r+0x3a0>
    6338:	2b73      	cmp	r3, #115	; 0x73
    633a:	d000      	beq.n	633e <_svfiprintf_r+0x18e>
    633c:	e1b5      	b.n	66aa <_svfiprintf_r+0x4fa>
    633e:	e0c6      	b.n	64ce <_svfiprintf_r+0x31e>
    6340:	466b      	mov	r3, sp
    6342:	3347      	adds	r3, #71	; 0x47
    6344:	701a      	strb	r2, [r3, #0]
    6346:	e05c      	b.n	6402 <_svfiprintf_r+0x252>
    6348:	4669      	mov	r1, sp
    634a:	3147      	adds	r1, #71	; 0x47
    634c:	700a      	strb	r2, [r1, #0]
    634e:	4fb3      	ldr	r7, [pc, #716]	; (661c <_svfiprintf_r+0x46c>)
    6350:	e102      	b.n	6558 <_svfiprintf_r+0x3a8>
    6352:	2a00      	cmp	r2, #0
    6354:	d098      	beq.n	6288 <_svfiprintf_r+0xd8>
    6356:	e7a3      	b.n	62a0 <_svfiprintf_r+0xf0>
    6358:	6827      	ldr	r7, [r4, #0]
    635a:	3404      	adds	r4, #4
    635c:	970b      	str	r7, [sp, #44]	; 0x2c
    635e:	2f00      	cmp	r7, #0
    6360:	da9e      	bge.n	62a0 <_svfiprintf_r+0xf0>
    6362:	427f      	negs	r7, r7
    6364:	970b      	str	r7, [sp, #44]	; 0x2c
    6366:	2304      	movs	r3, #4
    6368:	431e      	orrs	r6, r3
    636a:	e799      	b.n	62a0 <_svfiprintf_r+0xf0>
    636c:	9f08      	ldr	r7, [sp, #32]
    636e:	9908      	ldr	r1, [sp, #32]
    6370:	783b      	ldrb	r3, [r7, #0]
    6372:	3101      	adds	r1, #1
    6374:	2b2a      	cmp	r3, #42	; 0x2a
    6376:	d089      	beq.n	628c <_svfiprintf_r+0xdc>
    6378:	2000      	movs	r0, #0
    637a:	e002      	b.n	6382 <_svfiprintf_r+0x1d2>
    637c:	1c1c      	adds	r4, r3, #0
    637e:	9108      	str	r1, [sp, #32]
    6380:	e78e      	b.n	62a0 <_svfiprintf_r+0xf0>
    6382:	1c1f      	adds	r7, r3, #0
    6384:	3f30      	subs	r7, #48	; 0x30
    6386:	9108      	str	r1, [sp, #32]
    6388:	2f09      	cmp	r7, #9
    638a:	d805      	bhi.n	6398 <_svfiprintf_r+0x1e8>
    638c:	230a      	movs	r3, #10
    638e:	4358      	muls	r0, r3
    6390:	780b      	ldrb	r3, [r1, #0]
    6392:	19c0      	adds	r0, r0, r7
    6394:	3101      	adds	r1, #1
    6396:	e7f4      	b.n	6382 <_svfiprintf_r+0x1d2>
    6398:	9004      	str	r0, [sp, #16]
    639a:	2800      	cmp	r0, #0
    639c:	db00      	blt.n	63a0 <_svfiprintf_r+0x1f0>
    639e:	e760      	b.n	6262 <_svfiprintf_r+0xb2>
    63a0:	2101      	movs	r1, #1
    63a2:	4249      	negs	r1, r1
    63a4:	9104      	str	r1, [sp, #16]
    63a6:	e75c      	b.n	6262 <_svfiprintf_r+0xb2>
    63a8:	2700      	movs	r7, #0
    63aa:	970b      	str	r7, [sp, #44]	; 0x2c
    63ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    63ae:	210a      	movs	r1, #10
    63b0:	4379      	muls	r1, r7
    63b2:	9f08      	ldr	r7, [sp, #32]
    63b4:	3b30      	subs	r3, #48	; 0x30
    63b6:	18cb      	adds	r3, r1, r3
    63b8:	3701      	adds	r7, #1
    63ba:	930b      	str	r3, [sp, #44]	; 0x2c
    63bc:	1c3b      	adds	r3, r7, #0
    63be:	3b01      	subs	r3, #1
    63c0:	781b      	ldrb	r3, [r3, #0]
    63c2:	9708      	str	r7, [sp, #32]
    63c4:	1c19      	adds	r1, r3, #0
    63c6:	3930      	subs	r1, #48	; 0x30
    63c8:	2909      	cmp	r1, #9
    63ca:	d9ef      	bls.n	63ac <_svfiprintf_r+0x1fc>
    63cc:	e749      	b.n	6262 <_svfiprintf_r+0xb2>
    63ce:	2340      	movs	r3, #64	; 0x40
    63d0:	e7ca      	b.n	6368 <_svfiprintf_r+0x1b8>
    63d2:	9f08      	ldr	r7, [sp, #32]
    63d4:	783b      	ldrb	r3, [r7, #0]
    63d6:	2b6c      	cmp	r3, #108	; 0x6c
    63d8:	d102      	bne.n	63e0 <_svfiprintf_r+0x230>
    63da:	3701      	adds	r7, #1
    63dc:	9708      	str	r7, [sp, #32]
    63de:	e001      	b.n	63e4 <_svfiprintf_r+0x234>
    63e0:	2310      	movs	r3, #16
    63e2:	e7c1      	b.n	6368 <_svfiprintf_r+0x1b8>
    63e4:	2320      	movs	r3, #32
    63e6:	e7bf      	b.n	6368 <_svfiprintf_r+0x1b8>
    63e8:	6820      	ldr	r0, [r4, #0]
    63ea:	466a      	mov	r2, sp
    63ec:	ab16      	add	r3, sp, #88	; 0x58
    63ee:	2700      	movs	r7, #0
    63f0:	3247      	adds	r2, #71	; 0x47
    63f2:	2101      	movs	r1, #1
    63f4:	7018      	strb	r0, [r3, #0]
    63f6:	7017      	strb	r7, [r2, #0]
    63f8:	3404      	adds	r4, #4
    63fa:	9104      	str	r1, [sp, #16]
    63fc:	9709      	str	r7, [sp, #36]	; 0x24
    63fe:	9306      	str	r3, [sp, #24]
    6400:	e163      	b.n	66ca <_svfiprintf_r+0x51a>
    6402:	06b2      	lsls	r2, r6, #26
    6404:	d509      	bpl.n	641a <_svfiprintf_r+0x26a>
    6406:	1de3      	adds	r3, r4, #7
    6408:	2207      	movs	r2, #7
    640a:	4393      	bics	r3, r2
    640c:	1c1c      	adds	r4, r3, #0
    640e:	6818      	ldr	r0, [r3, #0]
    6410:	6859      	ldr	r1, [r3, #4]
    6412:	3408      	adds	r4, #8
    6414:	9002      	str	r0, [sp, #8]
    6416:	9103      	str	r1, [sp, #12]
    6418:	e00a      	b.n	6430 <_svfiprintf_r+0x280>
    641a:	1d23      	adds	r3, r4, #4
    641c:	6822      	ldr	r2, [r4, #0]
    641e:	06f1      	lsls	r1, r6, #27
    6420:	d402      	bmi.n	6428 <_svfiprintf_r+0x278>
    6422:	0677      	lsls	r7, r6, #25
    6424:	d500      	bpl.n	6428 <_svfiprintf_r+0x278>
    6426:	b212      	sxth	r2, r2
    6428:	9202      	str	r2, [sp, #8]
    642a:	17d2      	asrs	r2, r2, #31
    642c:	9203      	str	r2, [sp, #12]
    642e:	1c1c      	adds	r4, r3, #0
    6430:	9803      	ldr	r0, [sp, #12]
    6432:	2800      	cmp	r0, #0
    6434:	db00      	blt.n	6438 <_svfiprintf_r+0x288>
    6436:	e0be      	b.n	65b6 <_svfiprintf_r+0x406>
    6438:	9802      	ldr	r0, [sp, #8]
    643a:	9903      	ldr	r1, [sp, #12]
    643c:	2300      	movs	r3, #0
    643e:	4242      	negs	r2, r0
    6440:	418b      	sbcs	r3, r1
    6442:	9202      	str	r2, [sp, #8]
    6444:	9303      	str	r3, [sp, #12]
    6446:	466b      	mov	r3, sp
    6448:	222d      	movs	r2, #45	; 0x2d
    644a:	3347      	adds	r3, #71	; 0x47
    644c:	701a      	strb	r2, [r3, #0]
    644e:	e0b2      	b.n	65b6 <_svfiprintf_r+0x406>
    6450:	466b      	mov	r3, sp
    6452:	3347      	adds	r3, #71	; 0x47
    6454:	701a      	strb	r2, [r3, #0]
    6456:	1d23      	adds	r3, r4, #4
    6458:	06b1      	lsls	r1, r6, #26
    645a:	d505      	bpl.n	6468 <_svfiprintf_r+0x2b8>
    645c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    645e:	6822      	ldr	r2, [r4, #0]
    6460:	17f9      	asrs	r1, r7, #31
    6462:	6017      	str	r7, [r2, #0]
    6464:	6051      	str	r1, [r2, #4]
    6466:	e00a      	b.n	647e <_svfiprintf_r+0x2ce>
    6468:	06f0      	lsls	r0, r6, #27
    646a:	d405      	bmi.n	6478 <_svfiprintf_r+0x2c8>
    646c:	0670      	lsls	r0, r6, #25
    646e:	d503      	bpl.n	6478 <_svfiprintf_r+0x2c8>
    6470:	6822      	ldr	r2, [r4, #0]
    6472:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6474:	8017      	strh	r7, [r2, #0]
    6476:	e002      	b.n	647e <_svfiprintf_r+0x2ce>
    6478:	6822      	ldr	r2, [r4, #0]
    647a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    647c:	6017      	str	r7, [r2, #0]
    647e:	1c1c      	adds	r4, r3, #0
    6480:	e6b9      	b.n	61f6 <_svfiprintf_r+0x46>
    6482:	2310      	movs	r3, #16
    6484:	431e      	orrs	r6, r3
    6486:	2220      	movs	r2, #32
    6488:	4032      	ands	r2, r6
    648a:	d00a      	beq.n	64a2 <_svfiprintf_r+0x2f2>
    648c:	1de3      	adds	r3, r4, #7
    648e:	2207      	movs	r2, #7
    6490:	4393      	bics	r3, r2
    6492:	6818      	ldr	r0, [r3, #0]
    6494:	6859      	ldr	r1, [r3, #4]
    6496:	9002      	str	r0, [sp, #8]
    6498:	9103      	str	r1, [sp, #12]
    649a:	1c1c      	adds	r4, r3, #0
    649c:	3408      	adds	r4, #8
    649e:	2200      	movs	r2, #0
    64a0:	e084      	b.n	65ac <_svfiprintf_r+0x3fc>
    64a2:	2010      	movs	r0, #16
    64a4:	4030      	ands	r0, r6
    64a6:	1d21      	adds	r1, r4, #4
    64a8:	2800      	cmp	r0, #0
    64aa:	d004      	beq.n	64b6 <_svfiprintf_r+0x306>
    64ac:	6824      	ldr	r4, [r4, #0]
    64ae:	9203      	str	r2, [sp, #12]
    64b0:	9402      	str	r4, [sp, #8]
    64b2:	1c0c      	adds	r4, r1, #0
    64b4:	e07a      	b.n	65ac <_svfiprintf_r+0x3fc>
    64b6:	2340      	movs	r3, #64	; 0x40
    64b8:	4033      	ands	r3, r6
    64ba:	d003      	beq.n	64c4 <_svfiprintf_r+0x314>
    64bc:	8824      	ldrh	r4, [r4, #0]
    64be:	9003      	str	r0, [sp, #12]
    64c0:	9402      	str	r4, [sp, #8]
    64c2:	e002      	b.n	64ca <_svfiprintf_r+0x31a>
    64c4:	6824      	ldr	r4, [r4, #0]
    64c6:	9303      	str	r3, [sp, #12]
    64c8:	9402      	str	r4, [sp, #8]
    64ca:	1c0c      	adds	r4, r1, #0
    64cc:	e7e7      	b.n	649e <_svfiprintf_r+0x2ee>
    64ce:	6823      	ldr	r3, [r4, #0]
    64d0:	9f04      	ldr	r7, [sp, #16]
    64d2:	9306      	str	r3, [sp, #24]
    64d4:	466b      	mov	r3, sp
    64d6:	2200      	movs	r2, #0
    64d8:	3347      	adds	r3, #71	; 0x47
    64da:	3404      	adds	r4, #4
    64dc:	701a      	strb	r2, [r3, #0]
    64de:	4297      	cmp	r7, r2
    64e0:	db0e      	blt.n	6500 <_svfiprintf_r+0x350>
    64e2:	1c11      	adds	r1, r2, #0
    64e4:	9806      	ldr	r0, [sp, #24]
    64e6:	1c3a      	adds	r2, r7, #0
    64e8:	f7ff f990 	bl	580c <memchr>
    64ec:	2800      	cmp	r0, #0
    64ee:	d100      	bne.n	64f2 <_svfiprintf_r+0x342>
    64f0:	e0ea      	b.n	66c8 <_svfiprintf_r+0x518>
    64f2:	9906      	ldr	r1, [sp, #24]
    64f4:	1a40      	subs	r0, r0, r1
    64f6:	9004      	str	r0, [sp, #16]
    64f8:	42b8      	cmp	r0, r7
    64fa:	dd05      	ble.n	6508 <_svfiprintf_r+0x358>
    64fc:	9704      	str	r7, [sp, #16]
    64fe:	e003      	b.n	6508 <_svfiprintf_r+0x358>
    6500:	9806      	ldr	r0, [sp, #24]
    6502:	f7ff fdc3 	bl	608c <strlen>
    6506:	9004      	str	r0, [sp, #16]
    6508:	2700      	movs	r7, #0
    650a:	9709      	str	r7, [sp, #36]	; 0x24
    650c:	e0dd      	b.n	66ca <_svfiprintf_r+0x51a>
    650e:	2310      	movs	r3, #16
    6510:	431e      	orrs	r6, r3
    6512:	2220      	movs	r2, #32
    6514:	4032      	ands	r2, r6
    6516:	d009      	beq.n	652c <_svfiprintf_r+0x37c>
    6518:	1de3      	adds	r3, r4, #7
    651a:	2207      	movs	r2, #7
    651c:	4393      	bics	r3, r2
    651e:	1c1c      	adds	r4, r3, #0
    6520:	6818      	ldr	r0, [r3, #0]
    6522:	6859      	ldr	r1, [r3, #4]
    6524:	3408      	adds	r4, #8
    6526:	9002      	str	r0, [sp, #8]
    6528:	9103      	str	r1, [sp, #12]
    652a:	e00f      	b.n	654c <_svfiprintf_r+0x39c>
    652c:	2110      	movs	r1, #16
    652e:	4031      	ands	r1, r6
    6530:	1d23      	adds	r3, r4, #4
    6532:	2900      	cmp	r1, #0
    6534:	d106      	bne.n	6544 <_svfiprintf_r+0x394>
    6536:	2240      	movs	r2, #64	; 0x40
    6538:	4032      	ands	r2, r6
    653a:	d003      	beq.n	6544 <_svfiprintf_r+0x394>
    653c:	8824      	ldrh	r4, [r4, #0]
    653e:	9103      	str	r1, [sp, #12]
    6540:	9402      	str	r4, [sp, #8]
    6542:	e002      	b.n	654a <_svfiprintf_r+0x39a>
    6544:	6824      	ldr	r4, [r4, #0]
    6546:	9203      	str	r2, [sp, #12]
    6548:	9402      	str	r4, [sp, #8]
    654a:	1c1c      	adds	r4, r3, #0
    654c:	2201      	movs	r2, #1
    654e:	e02d      	b.n	65ac <_svfiprintf_r+0x3fc>
    6550:	4669      	mov	r1, sp
    6552:	3147      	adds	r1, #71	; 0x47
    6554:	4f30      	ldr	r7, [pc, #192]	; (6618 <_svfiprintf_r+0x468>)
    6556:	700a      	strb	r2, [r1, #0]
    6558:	2120      	movs	r1, #32
    655a:	970e      	str	r7, [sp, #56]	; 0x38
    655c:	4031      	ands	r1, r6
    655e:	d009      	beq.n	6574 <_svfiprintf_r+0x3c4>
    6560:	1de2      	adds	r2, r4, #7
    6562:	2107      	movs	r1, #7
    6564:	438a      	bics	r2, r1
    6566:	1c14      	adds	r4, r2, #0
    6568:	6810      	ldr	r0, [r2, #0]
    656a:	6851      	ldr	r1, [r2, #4]
    656c:	3408      	adds	r4, #8
    656e:	9002      	str	r0, [sp, #8]
    6570:	9103      	str	r1, [sp, #12]
    6572:	e00f      	b.n	6594 <_svfiprintf_r+0x3e4>
    6574:	2010      	movs	r0, #16
    6576:	4030      	ands	r0, r6
    6578:	1d22      	adds	r2, r4, #4
    657a:	2800      	cmp	r0, #0
    657c:	d106      	bne.n	658c <_svfiprintf_r+0x3dc>
    657e:	2140      	movs	r1, #64	; 0x40
    6580:	4031      	ands	r1, r6
    6582:	d003      	beq.n	658c <_svfiprintf_r+0x3dc>
    6584:	8824      	ldrh	r4, [r4, #0]
    6586:	9003      	str	r0, [sp, #12]
    6588:	9402      	str	r4, [sp, #8]
    658a:	e002      	b.n	6592 <_svfiprintf_r+0x3e2>
    658c:	6824      	ldr	r4, [r4, #0]
    658e:	9103      	str	r1, [sp, #12]
    6590:	9402      	str	r4, [sp, #8]
    6592:	1c14      	adds	r4, r2, #0
    6594:	2202      	movs	r2, #2
    6596:	07f1      	lsls	r1, r6, #31
    6598:	d508      	bpl.n	65ac <_svfiprintf_r+0x3fc>
    659a:	9902      	ldr	r1, [sp, #8]
    659c:	9f03      	ldr	r7, [sp, #12]
    659e:	4339      	orrs	r1, r7
    65a0:	d004      	beq.n	65ac <_svfiprintf_r+0x3fc>
    65a2:	a912      	add	r1, sp, #72	; 0x48
    65a4:	2030      	movs	r0, #48	; 0x30
    65a6:	7008      	strb	r0, [r1, #0]
    65a8:	704b      	strb	r3, [r1, #1]
    65aa:	4316      	orrs	r6, r2
    65ac:	466b      	mov	r3, sp
    65ae:	2100      	movs	r1, #0
    65b0:	3347      	adds	r3, #71	; 0x47
    65b2:	7019      	strb	r1, [r3, #0]
    65b4:	e000      	b.n	65b8 <_svfiprintf_r+0x408>
    65b6:	2201      	movs	r2, #1
    65b8:	9f04      	ldr	r7, [sp, #16]
    65ba:	2f00      	cmp	r7, #0
    65bc:	db01      	blt.n	65c2 <_svfiprintf_r+0x412>
    65be:	2380      	movs	r3, #128	; 0x80
    65c0:	439e      	bics	r6, r3
    65c2:	9b02      	ldr	r3, [sp, #8]
    65c4:	9803      	ldr	r0, [sp, #12]
    65c6:	4303      	orrs	r3, r0
    65c8:	d102      	bne.n	65d0 <_svfiprintf_r+0x420>
    65ca:	9f04      	ldr	r7, [sp, #16]
    65cc:	2f00      	cmp	r7, #0
    65ce:	d05b      	beq.n	6688 <_svfiprintf_r+0x4d8>
    65d0:	466f      	mov	r7, sp
    65d2:	377f      	adds	r7, #127	; 0x7f
    65d4:	2a01      	cmp	r2, #1
    65d6:	d023      	beq.n	6620 <_svfiprintf_r+0x470>
    65d8:	2a02      	cmp	r2, #2
    65da:	d03f      	beq.n	665c <_svfiprintf_r+0x4ac>
    65dc:	9802      	ldr	r0, [sp, #8]
    65de:	2307      	movs	r3, #7
    65e0:	4003      	ands	r3, r0
    65e2:	3330      	adds	r3, #48	; 0x30
    65e4:	9903      	ldr	r1, [sp, #12]
    65e6:	9a02      	ldr	r2, [sp, #8]
    65e8:	9706      	str	r7, [sp, #24]
    65ea:	703b      	strb	r3, [r7, #0]
    65ec:	9f03      	ldr	r7, [sp, #12]
    65ee:	0748      	lsls	r0, r1, #29
    65f0:	08d1      	lsrs	r1, r2, #3
    65f2:	08fa      	lsrs	r2, r7, #3
    65f4:	4308      	orrs	r0, r1
    65f6:	9203      	str	r2, [sp, #12]
    65f8:	9002      	str	r0, [sp, #8]
    65fa:	1c02      	adds	r2, r0, #0
    65fc:	9f06      	ldr	r7, [sp, #24]
    65fe:	9803      	ldr	r0, [sp, #12]
    6600:	3f01      	subs	r7, #1
    6602:	4302      	orrs	r2, r0
    6604:	d1ea      	bne.n	65dc <_svfiprintf_r+0x42c>
    6606:	07f1      	lsls	r1, r6, #31
    6608:	d548      	bpl.n	669c <_svfiprintf_r+0x4ec>
    660a:	2b30      	cmp	r3, #48	; 0x30
    660c:	d046      	beq.n	669c <_svfiprintf_r+0x4ec>
    660e:	2230      	movs	r2, #48	; 0x30
    6610:	9706      	str	r7, [sp, #24]
    6612:	703a      	strb	r2, [r7, #0]
    6614:	e042      	b.n	669c <_svfiprintf_r+0x4ec>
    6616:	46c0      	nop			; (mov r8, r8)
    6618:	00007cfb 	.word	0x00007cfb
    661c:	00007cea 	.word	0x00007cea
    6620:	9a03      	ldr	r2, [sp, #12]
    6622:	2a00      	cmp	r2, #0
    6624:	d104      	bne.n	6630 <_svfiprintf_r+0x480>
    6626:	9b02      	ldr	r3, [sp, #8]
    6628:	2b09      	cmp	r3, #9
    662a:	d801      	bhi.n	6630 <_svfiprintf_r+0x480>
    662c:	3330      	adds	r3, #48	; 0x30
    662e:	e033      	b.n	6698 <_svfiprintf_r+0x4e8>
    6630:	9802      	ldr	r0, [sp, #8]
    6632:	9903      	ldr	r1, [sp, #12]
    6634:	220a      	movs	r2, #10
    6636:	2300      	movs	r3, #0
    6638:	9706      	str	r7, [sp, #24]
    663a:	f7fb fb2f 	bl	1c9c <__aeabi_uldivmod>
    663e:	9802      	ldr	r0, [sp, #8]
    6640:	9903      	ldr	r1, [sp, #12]
    6642:	3230      	adds	r2, #48	; 0x30
    6644:	703a      	strb	r2, [r7, #0]
    6646:	220a      	movs	r2, #10
    6648:	2300      	movs	r3, #0
    664a:	f7fb fb27 	bl	1c9c <__aeabi_uldivmod>
    664e:	1c03      	adds	r3, r0, #0
    6650:	9002      	str	r0, [sp, #8]
    6652:	9103      	str	r1, [sp, #12]
    6654:	3f01      	subs	r7, #1
    6656:	430b      	orrs	r3, r1
    6658:	d1ea      	bne.n	6630 <_svfiprintf_r+0x480>
    665a:	e01f      	b.n	669c <_svfiprintf_r+0x4ec>
    665c:	9802      	ldr	r0, [sp, #8]
    665e:	9a03      	ldr	r2, [sp, #12]
    6660:	990e      	ldr	r1, [sp, #56]	; 0x38
    6662:	230f      	movs	r3, #15
    6664:	4003      	ands	r3, r0
    6666:	5ccb      	ldrb	r3, [r1, r3]
    6668:	0711      	lsls	r1, r2, #28
    666a:	0902      	lsrs	r2, r0, #4
    666c:	9803      	ldr	r0, [sp, #12]
    666e:	703b      	strb	r3, [r7, #0]
    6670:	0903      	lsrs	r3, r0, #4
    6672:	4311      	orrs	r1, r2
    6674:	9303      	str	r3, [sp, #12]
    6676:	9102      	str	r1, [sp, #8]
    6678:	1c0b      	adds	r3, r1, #0
    667a:	9903      	ldr	r1, [sp, #12]
    667c:	9706      	str	r7, [sp, #24]
    667e:	430b      	orrs	r3, r1
    6680:	3f01      	subs	r7, #1
    6682:	2b00      	cmp	r3, #0
    6684:	d1ea      	bne.n	665c <_svfiprintf_r+0x4ac>
    6686:	e009      	b.n	669c <_svfiprintf_r+0x4ec>
    6688:	af20      	add	r7, sp, #128	; 0x80
    668a:	9706      	str	r7, [sp, #24]
    668c:	2a00      	cmp	r2, #0
    668e:	d105      	bne.n	669c <_svfiprintf_r+0x4ec>
    6690:	07f0      	lsls	r0, r6, #31
    6692:	d503      	bpl.n	669c <_svfiprintf_r+0x4ec>
    6694:	3f01      	subs	r7, #1
    6696:	2330      	movs	r3, #48	; 0x30
    6698:	703b      	strb	r3, [r7, #0]
    669a:	9706      	str	r7, [sp, #24]
    669c:	9f04      	ldr	r7, [sp, #16]
    669e:	ab20      	add	r3, sp, #128	; 0x80
    66a0:	9709      	str	r7, [sp, #36]	; 0x24
    66a2:	9f06      	ldr	r7, [sp, #24]
    66a4:	1bdb      	subs	r3, r3, r7
    66a6:	9304      	str	r3, [sp, #16]
    66a8:	e00f      	b.n	66ca <_svfiprintf_r+0x51a>
    66aa:	4669      	mov	r1, sp
    66ac:	3147      	adds	r1, #71	; 0x47
    66ae:	700a      	strb	r2, [r1, #0]
    66b0:	2b00      	cmp	r3, #0
    66b2:	d100      	bne.n	66b6 <_svfiprintf_r+0x506>
    66b4:	e154      	b.n	6960 <_svfiprintf_r+0x7b0>
    66b6:	aa16      	add	r2, sp, #88	; 0x58
    66b8:	2700      	movs	r7, #0
    66ba:	2001      	movs	r0, #1
    66bc:	7013      	strb	r3, [r2, #0]
    66be:	700f      	strb	r7, [r1, #0]
    66c0:	9004      	str	r0, [sp, #16]
    66c2:	9709      	str	r7, [sp, #36]	; 0x24
    66c4:	9206      	str	r2, [sp, #24]
    66c6:	e000      	b.n	66ca <_svfiprintf_r+0x51a>
    66c8:	9009      	str	r0, [sp, #36]	; 0x24
    66ca:	9f04      	ldr	r7, [sp, #16]
    66cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    66ce:	970d      	str	r7, [sp, #52]	; 0x34
    66d0:	4287      	cmp	r7, r0
    66d2:	da00      	bge.n	66d6 <_svfiprintf_r+0x526>
    66d4:	900d      	str	r0, [sp, #52]	; 0x34
    66d6:	466b      	mov	r3, sp
    66d8:	3347      	adds	r3, #71	; 0x47
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    66de:	1e5a      	subs	r2, r3, #1
    66e0:	4193      	sbcs	r3, r2
    66e2:	18ff      	adds	r7, r7, r3
    66e4:	2302      	movs	r3, #2
    66e6:	4033      	ands	r3, r6
    66e8:	970d      	str	r7, [sp, #52]	; 0x34
    66ea:	930a      	str	r3, [sp, #40]	; 0x28
    66ec:	d001      	beq.n	66f2 <_svfiprintf_r+0x542>
    66ee:	3702      	adds	r7, #2
    66f0:	970d      	str	r7, [sp, #52]	; 0x34
    66f2:	2384      	movs	r3, #132	; 0x84
    66f4:	4033      	ands	r3, r6
    66f6:	930f      	str	r3, [sp, #60]	; 0x3c
    66f8:	d133      	bne.n	6762 <_svfiprintf_r+0x5b2>
    66fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    66fc:	990d      	ldr	r1, [sp, #52]	; 0x34
    66fe:	1a47      	subs	r7, r0, r1
    6700:	2f00      	cmp	r7, #0
    6702:	dd2e      	ble.n	6762 <_svfiprintf_r+0x5b2>
    6704:	4b9f      	ldr	r3, [pc, #636]	; (6984 <_svfiprintf_r+0x7d4>)
    6706:	602b      	str	r3, [r5, #0]
    6708:	2f10      	cmp	r7, #16
    670a:	dd16      	ble.n	673a <_svfiprintf_r+0x58a>
    670c:	2310      	movs	r3, #16
    670e:	606b      	str	r3, [r5, #4]
    6710:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6712:	3310      	adds	r3, #16
    6714:	9315      	str	r3, [sp, #84]	; 0x54
    6716:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6718:	3301      	adds	r3, #1
    671a:	9314      	str	r3, [sp, #80]	; 0x50
    671c:	2b07      	cmp	r3, #7
    671e:	dc01      	bgt.n	6724 <_svfiprintf_r+0x574>
    6720:	3508      	adds	r5, #8
    6722:	e008      	b.n	6736 <_svfiprintf_r+0x586>
    6724:	9807      	ldr	r0, [sp, #28]
    6726:	9905      	ldr	r1, [sp, #20]
    6728:	aa13      	add	r2, sp, #76	; 0x4c
    672a:	f7ff fcb7 	bl	609c <__ssprint_r>
    672e:	2800      	cmp	r0, #0
    6730:	d000      	beq.n	6734 <_svfiprintf_r+0x584>
    6732:	e11d      	b.n	6970 <_svfiprintf_r+0x7c0>
    6734:	ad20      	add	r5, sp, #128	; 0x80
    6736:	3f10      	subs	r7, #16
    6738:	e7e4      	b.n	6704 <_svfiprintf_r+0x554>
    673a:	9a15      	ldr	r2, [sp, #84]	; 0x54
    673c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    673e:	606f      	str	r7, [r5, #4]
    6740:	3301      	adds	r3, #1
    6742:	18bf      	adds	r7, r7, r2
    6744:	9715      	str	r7, [sp, #84]	; 0x54
    6746:	9314      	str	r3, [sp, #80]	; 0x50
    6748:	2b07      	cmp	r3, #7
    674a:	dc01      	bgt.n	6750 <_svfiprintf_r+0x5a0>
    674c:	3508      	adds	r5, #8
    674e:	e008      	b.n	6762 <_svfiprintf_r+0x5b2>
    6750:	9807      	ldr	r0, [sp, #28]
    6752:	9905      	ldr	r1, [sp, #20]
    6754:	aa13      	add	r2, sp, #76	; 0x4c
    6756:	f7ff fca1 	bl	609c <__ssprint_r>
    675a:	2800      	cmp	r0, #0
    675c:	d000      	beq.n	6760 <_svfiprintf_r+0x5b0>
    675e:	e107      	b.n	6970 <_svfiprintf_r+0x7c0>
    6760:	ad20      	add	r5, sp, #128	; 0x80
    6762:	466b      	mov	r3, sp
    6764:	3347      	adds	r3, #71	; 0x47
    6766:	781a      	ldrb	r2, [r3, #0]
    6768:	2a00      	cmp	r2, #0
    676a:	d015      	beq.n	6798 <_svfiprintf_r+0x5e8>
    676c:	602b      	str	r3, [r5, #0]
    676e:	2301      	movs	r3, #1
    6770:	606b      	str	r3, [r5, #4]
    6772:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6774:	3301      	adds	r3, #1
    6776:	9315      	str	r3, [sp, #84]	; 0x54
    6778:	9b14      	ldr	r3, [sp, #80]	; 0x50
    677a:	3301      	adds	r3, #1
    677c:	9314      	str	r3, [sp, #80]	; 0x50
    677e:	2b07      	cmp	r3, #7
    6780:	dc01      	bgt.n	6786 <_svfiprintf_r+0x5d6>
    6782:	3508      	adds	r5, #8
    6784:	e008      	b.n	6798 <_svfiprintf_r+0x5e8>
    6786:	9807      	ldr	r0, [sp, #28]
    6788:	9905      	ldr	r1, [sp, #20]
    678a:	aa13      	add	r2, sp, #76	; 0x4c
    678c:	f7ff fc86 	bl	609c <__ssprint_r>
    6790:	2800      	cmp	r0, #0
    6792:	d000      	beq.n	6796 <_svfiprintf_r+0x5e6>
    6794:	e0ec      	b.n	6970 <_svfiprintf_r+0x7c0>
    6796:	ad20      	add	r5, sp, #128	; 0x80
    6798:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    679a:	2f00      	cmp	r7, #0
    679c:	d016      	beq.n	67cc <_svfiprintf_r+0x61c>
    679e:	ab12      	add	r3, sp, #72	; 0x48
    67a0:	602b      	str	r3, [r5, #0]
    67a2:	2302      	movs	r3, #2
    67a4:	606b      	str	r3, [r5, #4]
    67a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    67a8:	3302      	adds	r3, #2
    67aa:	9315      	str	r3, [sp, #84]	; 0x54
    67ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
    67ae:	3301      	adds	r3, #1
    67b0:	9314      	str	r3, [sp, #80]	; 0x50
    67b2:	2b07      	cmp	r3, #7
    67b4:	dc01      	bgt.n	67ba <_svfiprintf_r+0x60a>
    67b6:	3508      	adds	r5, #8
    67b8:	e008      	b.n	67cc <_svfiprintf_r+0x61c>
    67ba:	9807      	ldr	r0, [sp, #28]
    67bc:	9905      	ldr	r1, [sp, #20]
    67be:	aa13      	add	r2, sp, #76	; 0x4c
    67c0:	f7ff fc6c 	bl	609c <__ssprint_r>
    67c4:	2800      	cmp	r0, #0
    67c6:	d000      	beq.n	67ca <_svfiprintf_r+0x61a>
    67c8:	e0d2      	b.n	6970 <_svfiprintf_r+0x7c0>
    67ca:	ad20      	add	r5, sp, #128	; 0x80
    67cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    67ce:	2f80      	cmp	r7, #128	; 0x80
    67d0:	d134      	bne.n	683c <_svfiprintf_r+0x68c>
    67d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    67d4:	990d      	ldr	r1, [sp, #52]	; 0x34
    67d6:	1a47      	subs	r7, r0, r1
    67d8:	2f00      	cmp	r7, #0
    67da:	dd2f      	ble.n	683c <_svfiprintf_r+0x68c>
    67dc:	4b69      	ldr	r3, [pc, #420]	; (6984 <_svfiprintf_r+0x7d4>)
    67de:	3310      	adds	r3, #16
    67e0:	602b      	str	r3, [r5, #0]
    67e2:	2f10      	cmp	r7, #16
    67e4:	dd16      	ble.n	6814 <_svfiprintf_r+0x664>
    67e6:	2310      	movs	r3, #16
    67e8:	606b      	str	r3, [r5, #4]
    67ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
    67ec:	3310      	adds	r3, #16
    67ee:	9315      	str	r3, [sp, #84]	; 0x54
    67f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    67f2:	3301      	adds	r3, #1
    67f4:	9314      	str	r3, [sp, #80]	; 0x50
    67f6:	2b07      	cmp	r3, #7
    67f8:	dc01      	bgt.n	67fe <_svfiprintf_r+0x64e>
    67fa:	3508      	adds	r5, #8
    67fc:	e008      	b.n	6810 <_svfiprintf_r+0x660>
    67fe:	9807      	ldr	r0, [sp, #28]
    6800:	9905      	ldr	r1, [sp, #20]
    6802:	aa13      	add	r2, sp, #76	; 0x4c
    6804:	f7ff fc4a 	bl	609c <__ssprint_r>
    6808:	2800      	cmp	r0, #0
    680a:	d000      	beq.n	680e <_svfiprintf_r+0x65e>
    680c:	e0b0      	b.n	6970 <_svfiprintf_r+0x7c0>
    680e:	ad20      	add	r5, sp, #128	; 0x80
    6810:	3f10      	subs	r7, #16
    6812:	e7e3      	b.n	67dc <_svfiprintf_r+0x62c>
    6814:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6816:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6818:	606f      	str	r7, [r5, #4]
    681a:	3301      	adds	r3, #1
    681c:	18bf      	adds	r7, r7, r2
    681e:	9715      	str	r7, [sp, #84]	; 0x54
    6820:	9314      	str	r3, [sp, #80]	; 0x50
    6822:	2b07      	cmp	r3, #7
    6824:	dc01      	bgt.n	682a <_svfiprintf_r+0x67a>
    6826:	3508      	adds	r5, #8
    6828:	e008      	b.n	683c <_svfiprintf_r+0x68c>
    682a:	9807      	ldr	r0, [sp, #28]
    682c:	9905      	ldr	r1, [sp, #20]
    682e:	aa13      	add	r2, sp, #76	; 0x4c
    6830:	f7ff fc34 	bl	609c <__ssprint_r>
    6834:	2800      	cmp	r0, #0
    6836:	d000      	beq.n	683a <_svfiprintf_r+0x68a>
    6838:	e09a      	b.n	6970 <_svfiprintf_r+0x7c0>
    683a:	ad20      	add	r5, sp, #128	; 0x80
    683c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    683e:	9804      	ldr	r0, [sp, #16]
    6840:	1a1f      	subs	r7, r3, r0
    6842:	2f00      	cmp	r7, #0
    6844:	dd2d      	ble.n	68a2 <_svfiprintf_r+0x6f2>
    6846:	4b4f      	ldr	r3, [pc, #316]	; (6984 <_svfiprintf_r+0x7d4>)
    6848:	3310      	adds	r3, #16
    684a:	602b      	str	r3, [r5, #0]
    684c:	2f10      	cmp	r7, #16
    684e:	dd15      	ble.n	687c <_svfiprintf_r+0x6cc>
    6850:	2310      	movs	r3, #16
    6852:	606b      	str	r3, [r5, #4]
    6854:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6856:	3310      	adds	r3, #16
    6858:	9315      	str	r3, [sp, #84]	; 0x54
    685a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    685c:	3301      	adds	r3, #1
    685e:	9314      	str	r3, [sp, #80]	; 0x50
    6860:	2b07      	cmp	r3, #7
    6862:	dc01      	bgt.n	6868 <_svfiprintf_r+0x6b8>
    6864:	3508      	adds	r5, #8
    6866:	e007      	b.n	6878 <_svfiprintf_r+0x6c8>
    6868:	9807      	ldr	r0, [sp, #28]
    686a:	9905      	ldr	r1, [sp, #20]
    686c:	aa13      	add	r2, sp, #76	; 0x4c
    686e:	f7ff fc15 	bl	609c <__ssprint_r>
    6872:	2800      	cmp	r0, #0
    6874:	d17c      	bne.n	6970 <_svfiprintf_r+0x7c0>
    6876:	ad20      	add	r5, sp, #128	; 0x80
    6878:	3f10      	subs	r7, #16
    687a:	e7e4      	b.n	6846 <_svfiprintf_r+0x696>
    687c:	9915      	ldr	r1, [sp, #84]	; 0x54
    687e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6880:	606f      	str	r7, [r5, #4]
    6882:	3301      	adds	r3, #1
    6884:	187f      	adds	r7, r7, r1
    6886:	9715      	str	r7, [sp, #84]	; 0x54
    6888:	9314      	str	r3, [sp, #80]	; 0x50
    688a:	2b07      	cmp	r3, #7
    688c:	dc01      	bgt.n	6892 <_svfiprintf_r+0x6e2>
    688e:	3508      	adds	r5, #8
    6890:	e007      	b.n	68a2 <_svfiprintf_r+0x6f2>
    6892:	9807      	ldr	r0, [sp, #28]
    6894:	9905      	ldr	r1, [sp, #20]
    6896:	aa13      	add	r2, sp, #76	; 0x4c
    6898:	f7ff fc00 	bl	609c <__ssprint_r>
    689c:	2800      	cmp	r0, #0
    689e:	d167      	bne.n	6970 <_svfiprintf_r+0x7c0>
    68a0:	ad20      	add	r5, sp, #128	; 0x80
    68a2:	9f06      	ldr	r7, [sp, #24]
    68a4:	9815      	ldr	r0, [sp, #84]	; 0x54
    68a6:	602f      	str	r7, [r5, #0]
    68a8:	9f04      	ldr	r7, [sp, #16]
    68aa:	183b      	adds	r3, r7, r0
    68ac:	9315      	str	r3, [sp, #84]	; 0x54
    68ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    68b0:	606f      	str	r7, [r5, #4]
    68b2:	3301      	adds	r3, #1
    68b4:	9314      	str	r3, [sp, #80]	; 0x50
    68b6:	2b07      	cmp	r3, #7
    68b8:	dc01      	bgt.n	68be <_svfiprintf_r+0x70e>
    68ba:	3508      	adds	r5, #8
    68bc:	e007      	b.n	68ce <_svfiprintf_r+0x71e>
    68be:	9807      	ldr	r0, [sp, #28]
    68c0:	9905      	ldr	r1, [sp, #20]
    68c2:	aa13      	add	r2, sp, #76	; 0x4c
    68c4:	f7ff fbea 	bl	609c <__ssprint_r>
    68c8:	2800      	cmp	r0, #0
    68ca:	d151      	bne.n	6970 <_svfiprintf_r+0x7c0>
    68cc:	ad20      	add	r5, sp, #128	; 0x80
    68ce:	0771      	lsls	r1, r6, #29
    68d0:	d40b      	bmi.n	68ea <_svfiprintf_r+0x73a>
    68d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    68d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    68d6:	42bb      	cmp	r3, r7
    68d8:	da00      	bge.n	68dc <_svfiprintf_r+0x72c>
    68da:	1c3b      	adds	r3, r7, #0
    68dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    68de:	9815      	ldr	r0, [sp, #84]	; 0x54
    68e0:	18ff      	adds	r7, r7, r3
    68e2:	970c      	str	r7, [sp, #48]	; 0x30
    68e4:	2800      	cmp	r0, #0
    68e6:	d037      	beq.n	6958 <_svfiprintf_r+0x7a8>
    68e8:	e02f      	b.n	694a <_svfiprintf_r+0x79a>
    68ea:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    68ec:	980d      	ldr	r0, [sp, #52]	; 0x34
    68ee:	1a3e      	subs	r6, r7, r0
    68f0:	2e00      	cmp	r6, #0
    68f2:	ddee      	ble.n	68d2 <_svfiprintf_r+0x722>
    68f4:	4b23      	ldr	r3, [pc, #140]	; (6984 <_svfiprintf_r+0x7d4>)
    68f6:	602b      	str	r3, [r5, #0]
    68f8:	2e10      	cmp	r6, #16
    68fa:	dd15      	ble.n	6928 <_svfiprintf_r+0x778>
    68fc:	2310      	movs	r3, #16
    68fe:	606b      	str	r3, [r5, #4]
    6900:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6902:	3310      	adds	r3, #16
    6904:	9315      	str	r3, [sp, #84]	; 0x54
    6906:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6908:	3301      	adds	r3, #1
    690a:	9314      	str	r3, [sp, #80]	; 0x50
    690c:	2b07      	cmp	r3, #7
    690e:	dc01      	bgt.n	6914 <_svfiprintf_r+0x764>
    6910:	3508      	adds	r5, #8
    6912:	e007      	b.n	6924 <_svfiprintf_r+0x774>
    6914:	9807      	ldr	r0, [sp, #28]
    6916:	9905      	ldr	r1, [sp, #20]
    6918:	aa13      	add	r2, sp, #76	; 0x4c
    691a:	f7ff fbbf 	bl	609c <__ssprint_r>
    691e:	2800      	cmp	r0, #0
    6920:	d126      	bne.n	6970 <_svfiprintf_r+0x7c0>
    6922:	ad20      	add	r5, sp, #128	; 0x80
    6924:	3e10      	subs	r6, #16
    6926:	e7e5      	b.n	68f4 <_svfiprintf_r+0x744>
    6928:	9915      	ldr	r1, [sp, #84]	; 0x54
    692a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    692c:	606e      	str	r6, [r5, #4]
    692e:	3301      	adds	r3, #1
    6930:	1876      	adds	r6, r6, r1
    6932:	9615      	str	r6, [sp, #84]	; 0x54
    6934:	9314      	str	r3, [sp, #80]	; 0x50
    6936:	2b07      	cmp	r3, #7
    6938:	ddcb      	ble.n	68d2 <_svfiprintf_r+0x722>
    693a:	9807      	ldr	r0, [sp, #28]
    693c:	9905      	ldr	r1, [sp, #20]
    693e:	aa13      	add	r2, sp, #76	; 0x4c
    6940:	f7ff fbac 	bl	609c <__ssprint_r>
    6944:	2800      	cmp	r0, #0
    6946:	d0c4      	beq.n	68d2 <_svfiprintf_r+0x722>
    6948:	e012      	b.n	6970 <_svfiprintf_r+0x7c0>
    694a:	9807      	ldr	r0, [sp, #28]
    694c:	9905      	ldr	r1, [sp, #20]
    694e:	aa13      	add	r2, sp, #76	; 0x4c
    6950:	f7ff fba4 	bl	609c <__ssprint_r>
    6954:	2800      	cmp	r0, #0
    6956:	d10b      	bne.n	6970 <_svfiprintf_r+0x7c0>
    6958:	2300      	movs	r3, #0
    695a:	9314      	str	r3, [sp, #80]	; 0x50
    695c:	ad20      	add	r5, sp, #128	; 0x80
    695e:	e44a      	b.n	61f6 <_svfiprintf_r+0x46>
    6960:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6962:	2a00      	cmp	r2, #0
    6964:	d004      	beq.n	6970 <_svfiprintf_r+0x7c0>
    6966:	9807      	ldr	r0, [sp, #28]
    6968:	9905      	ldr	r1, [sp, #20]
    696a:	aa13      	add	r2, sp, #76	; 0x4c
    696c:	f7ff fb96 	bl	609c <__ssprint_r>
    6970:	9f05      	ldr	r7, [sp, #20]
    6972:	980c      	ldr	r0, [sp, #48]	; 0x30
    6974:	89bb      	ldrh	r3, [r7, #12]
    6976:	0659      	lsls	r1, r3, #25
    6978:	d501      	bpl.n	697e <_svfiprintf_r+0x7ce>
    697a:	2001      	movs	r0, #1
    697c:	4240      	negs	r0, r0
    697e:	b031      	add	sp, #196	; 0xc4
    6980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	00007e50 	.word	0x00007e50

00006988 <_calloc_r>:
    6988:	b510      	push	{r4, lr}
    698a:	4351      	muls	r1, r2
    698c:	f7fe fd46 	bl	541c <_malloc_r>
    6990:	1e04      	subs	r4, r0, #0
    6992:	d023      	beq.n	69dc <_calloc_r+0x54>
    6994:	1c03      	adds	r3, r0, #0
    6996:	3b08      	subs	r3, #8
    6998:	685a      	ldr	r2, [r3, #4]
    699a:	2303      	movs	r3, #3
    699c:	439a      	bics	r2, r3
    699e:	3a04      	subs	r2, #4
    69a0:	2a24      	cmp	r2, #36	; 0x24
    69a2:	d818      	bhi.n	69d6 <_calloc_r+0x4e>
    69a4:	1c03      	adds	r3, r0, #0
    69a6:	2a13      	cmp	r2, #19
    69a8:	d910      	bls.n	69cc <_calloc_r+0x44>
    69aa:	2100      	movs	r1, #0
    69ac:	6001      	str	r1, [r0, #0]
    69ae:	6041      	str	r1, [r0, #4]
    69b0:	3308      	adds	r3, #8
    69b2:	2a1b      	cmp	r2, #27
    69b4:	d90a      	bls.n	69cc <_calloc_r+0x44>
    69b6:	6081      	str	r1, [r0, #8]
    69b8:	60c1      	str	r1, [r0, #12]
    69ba:	2a24      	cmp	r2, #36	; 0x24
    69bc:	d002      	beq.n	69c4 <_calloc_r+0x3c>
    69be:	1c03      	adds	r3, r0, #0
    69c0:	3310      	adds	r3, #16
    69c2:	e003      	b.n	69cc <_calloc_r+0x44>
    69c4:	1c03      	adds	r3, r0, #0
    69c6:	6101      	str	r1, [r0, #16]
    69c8:	3318      	adds	r3, #24
    69ca:	6141      	str	r1, [r0, #20]
    69cc:	2200      	movs	r2, #0
    69ce:	601a      	str	r2, [r3, #0]
    69d0:	605a      	str	r2, [r3, #4]
    69d2:	609a      	str	r2, [r3, #8]
    69d4:	e002      	b.n	69dc <_calloc_r+0x54>
    69d6:	2100      	movs	r1, #0
    69d8:	f7fc fd15 	bl	3406 <memset>
    69dc:	1c20      	adds	r0, r4, #0
    69de:	bd10      	pop	{r4, pc}

000069e0 <memmove>:
    69e0:	b570      	push	{r4, r5, r6, lr}
    69e2:	4281      	cmp	r1, r0
    69e4:	d301      	bcc.n	69ea <memmove+0xa>
    69e6:	2300      	movs	r3, #0
    69e8:	e00c      	b.n	6a04 <memmove+0x24>
    69ea:	188c      	adds	r4, r1, r2
    69ec:	42a0      	cmp	r0, r4
    69ee:	d2fa      	bcs.n	69e6 <memmove+0x6>
    69f0:	1885      	adds	r5, r0, r2
    69f2:	1c13      	adds	r3, r2, #0
    69f4:	3b01      	subs	r3, #1
    69f6:	d30b      	bcc.n	6a10 <memmove+0x30>
    69f8:	4251      	negs	r1, r2
    69fa:	1866      	adds	r6, r4, r1
    69fc:	5cf6      	ldrb	r6, [r6, r3]
    69fe:	1869      	adds	r1, r5, r1
    6a00:	54ce      	strb	r6, [r1, r3]
    6a02:	e7f7      	b.n	69f4 <memmove+0x14>
    6a04:	4293      	cmp	r3, r2
    6a06:	d003      	beq.n	6a10 <memmove+0x30>
    6a08:	5ccc      	ldrb	r4, [r1, r3]
    6a0a:	54c4      	strb	r4, [r0, r3]
    6a0c:	3301      	adds	r3, #1
    6a0e:	e7f9      	b.n	6a04 <memmove+0x24>
    6a10:	bd70      	pop	{r4, r5, r6, pc}
	...

00006a14 <_realloc_r>:
    6a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a16:	b087      	sub	sp, #28
    6a18:	9003      	str	r0, [sp, #12]
    6a1a:	1c0c      	adds	r4, r1, #0
    6a1c:	9205      	str	r2, [sp, #20]
    6a1e:	d103      	bne.n	6a28 <_realloc_r+0x14>
    6a20:	1c11      	adds	r1, r2, #0
    6a22:	f7fe fcfb 	bl	541c <_malloc_r>
    6a26:	e195      	b.n	6d54 <_realloc_r+0x340>
    6a28:	1c27      	adds	r7, r4, #0
    6a2a:	9803      	ldr	r0, [sp, #12]
    6a2c:	3f08      	subs	r7, #8
    6a2e:	f7fe fef8 	bl	5822 <__malloc_lock>
    6a32:	687d      	ldr	r5, [r7, #4]
    6a34:	2303      	movs	r3, #3
    6a36:	1c2e      	adds	r6, r5, #0
    6a38:	439e      	bics	r6, r3
    6a3a:	9b05      	ldr	r3, [sp, #20]
    6a3c:	9601      	str	r6, [sp, #4]
    6a3e:	330b      	adds	r3, #11
    6a40:	2b16      	cmp	r3, #22
    6a42:	d904      	bls.n	6a4e <_realloc_r+0x3a>
    6a44:	2207      	movs	r2, #7
    6a46:	4393      	bics	r3, r2
    6a48:	9302      	str	r3, [sp, #8]
    6a4a:	d502      	bpl.n	6a52 <_realloc_r+0x3e>
    6a4c:	e005      	b.n	6a5a <_realloc_r+0x46>
    6a4e:	2610      	movs	r6, #16
    6a50:	9602      	str	r6, [sp, #8]
    6a52:	9e02      	ldr	r6, [sp, #8]
    6a54:	9805      	ldr	r0, [sp, #20]
    6a56:	4286      	cmp	r6, r0
    6a58:	d204      	bcs.n	6a64 <_realloc_r+0x50>
    6a5a:	9c03      	ldr	r4, [sp, #12]
    6a5c:	230c      	movs	r3, #12
    6a5e:	6023      	str	r3, [r4, #0]
    6a60:	2000      	movs	r0, #0
    6a62:	e177      	b.n	6d54 <_realloc_r+0x340>
    6a64:	9e01      	ldr	r6, [sp, #4]
    6a66:	9802      	ldr	r0, [sp, #8]
    6a68:	4286      	cmp	r6, r0
    6a6a:	db00      	blt.n	6a6e <_realloc_r+0x5a>
    6a6c:	e14e      	b.n	6d0c <_realloc_r+0x2f8>
    6a6e:	49ba      	ldr	r1, [pc, #744]	; (6d58 <_realloc_r+0x344>)
    6a70:	19bb      	adds	r3, r7, r6
    6a72:	688a      	ldr	r2, [r1, #8]
    6a74:	685e      	ldr	r6, [r3, #4]
    6a76:	4694      	mov	ip, r2
    6a78:	4293      	cmp	r3, r2
    6a7a:	d006      	beq.n	6a8a <_realloc_r+0x76>
    6a7c:	2201      	movs	r2, #1
    6a7e:	1c30      	adds	r0, r6, #0
    6a80:	4390      	bics	r0, r2
    6a82:	1818      	adds	r0, r3, r0
    6a84:	6840      	ldr	r0, [r0, #4]
    6a86:	4210      	tst	r0, r2
    6a88:	d124      	bne.n	6ad4 <_realloc_r+0xc0>
    6a8a:	2203      	movs	r2, #3
    6a8c:	1c30      	adds	r0, r6, #0
    6a8e:	9e01      	ldr	r6, [sp, #4]
    6a90:	4390      	bics	r0, r2
    6a92:	1982      	adds	r2, r0, r6
    6a94:	9e02      	ldr	r6, [sp, #8]
    6a96:	4563      	cmp	r3, ip
    6a98:	d114      	bne.n	6ac4 <_realloc_r+0xb0>
    6a9a:	3610      	adds	r6, #16
    6a9c:	42b2      	cmp	r2, r6
    6a9e:	db1b      	blt.n	6ad8 <_realloc_r+0xc4>
    6aa0:	9802      	ldr	r0, [sp, #8]
    6aa2:	1c23      	adds	r3, r4, #0
    6aa4:	183e      	adds	r6, r7, r0
    6aa6:	608e      	str	r6, [r1, #8]
    6aa8:	1a12      	subs	r2, r2, r0
    6aaa:	2101      	movs	r1, #1
    6aac:	430a      	orrs	r2, r1
    6aae:	6072      	str	r2, [r6, #4]
    6ab0:	3b08      	subs	r3, #8
    6ab2:	685a      	ldr	r2, [r3, #4]
    6ab4:	4011      	ands	r1, r2
    6ab6:	4301      	orrs	r1, r0
    6ab8:	6059      	str	r1, [r3, #4]
    6aba:	9803      	ldr	r0, [sp, #12]
    6abc:	f7fe feb2 	bl	5824 <__malloc_unlock>
    6ac0:	1c20      	adds	r0, r4, #0
    6ac2:	e147      	b.n	6d54 <_realloc_r+0x340>
    6ac4:	42b2      	cmp	r2, r6
    6ac6:	db07      	blt.n	6ad8 <_realloc_r+0xc4>
    6ac8:	68d9      	ldr	r1, [r3, #12]
    6aca:	689b      	ldr	r3, [r3, #8]
    6acc:	9201      	str	r2, [sp, #4]
    6ace:	60d9      	str	r1, [r3, #12]
    6ad0:	608b      	str	r3, [r1, #8]
    6ad2:	e11b      	b.n	6d0c <_realloc_r+0x2f8>
    6ad4:	2000      	movs	r0, #0
    6ad6:	1c03      	adds	r3, r0, #0
    6ad8:	07e9      	lsls	r1, r5, #31
    6ada:	d500      	bpl.n	6ade <_realloc_r+0xca>
    6adc:	e0c5      	b.n	6c6a <_realloc_r+0x256>
    6ade:	1c22      	adds	r2, r4, #0
    6ae0:	3a08      	subs	r2, #8
    6ae2:	6815      	ldr	r5, [r2, #0]
    6ae4:	2203      	movs	r2, #3
    6ae6:	1b7d      	subs	r5, r7, r5
    6ae8:	686e      	ldr	r6, [r5, #4]
    6aea:	4396      	bics	r6, r2
    6aec:	9a01      	ldr	r2, [sp, #4]
    6aee:	18b6      	adds	r6, r6, r2
    6af0:	2b00      	cmp	r3, #0
    6af2:	d100      	bne.n	6af6 <_realloc_r+0xe2>
    6af4:	e083      	b.n	6bfe <_realloc_r+0x1ea>
    6af6:	1830      	adds	r0, r6, r0
    6af8:	9004      	str	r0, [sp, #16]
    6afa:	4563      	cmp	r3, ip
    6afc:	d144      	bne.n	6b88 <_realloc_r+0x174>
    6afe:	9b02      	ldr	r3, [sp, #8]
    6b00:	3310      	adds	r3, #16
    6b02:	4298      	cmp	r0, r3
    6b04:	db7b      	blt.n	6bfe <_realloc_r+0x1ea>
    6b06:	68aa      	ldr	r2, [r5, #8]
    6b08:	68eb      	ldr	r3, [r5, #12]
    6b0a:	1c2e      	adds	r6, r5, #0
    6b0c:	60d3      	str	r3, [r2, #12]
    6b0e:	609a      	str	r2, [r3, #8]
    6b10:	9a01      	ldr	r2, [sp, #4]
    6b12:	3608      	adds	r6, #8
    6b14:	3a04      	subs	r2, #4
    6b16:	2a24      	cmp	r2, #36	; 0x24
    6b18:	d824      	bhi.n	6b64 <_realloc_r+0x150>
    6b1a:	1c33      	adds	r3, r6, #0
    6b1c:	2a13      	cmp	r2, #19
    6b1e:	d91a      	bls.n	6b56 <_realloc_r+0x142>
    6b20:	6823      	ldr	r3, [r4, #0]
    6b22:	60ab      	str	r3, [r5, #8]
    6b24:	6860      	ldr	r0, [r4, #4]
    6b26:	60e8      	str	r0, [r5, #12]
    6b28:	2a1b      	cmp	r2, #27
    6b2a:	d803      	bhi.n	6b34 <_realloc_r+0x120>
    6b2c:	1c2b      	adds	r3, r5, #0
    6b2e:	3310      	adds	r3, #16
    6b30:	3408      	adds	r4, #8
    6b32:	e010      	b.n	6b56 <_realloc_r+0x142>
    6b34:	68a1      	ldr	r1, [r4, #8]
    6b36:	6129      	str	r1, [r5, #16]
    6b38:	68e3      	ldr	r3, [r4, #12]
    6b3a:	616b      	str	r3, [r5, #20]
    6b3c:	2a24      	cmp	r2, #36	; 0x24
    6b3e:	d003      	beq.n	6b48 <_realloc_r+0x134>
    6b40:	1c2b      	adds	r3, r5, #0
    6b42:	3318      	adds	r3, #24
    6b44:	3410      	adds	r4, #16
    6b46:	e006      	b.n	6b56 <_realloc_r+0x142>
    6b48:	6920      	ldr	r0, [r4, #16]
    6b4a:	1c2b      	adds	r3, r5, #0
    6b4c:	61a8      	str	r0, [r5, #24]
    6b4e:	6961      	ldr	r1, [r4, #20]
    6b50:	3320      	adds	r3, #32
    6b52:	61e9      	str	r1, [r5, #28]
    6b54:	3418      	adds	r4, #24
    6b56:	6822      	ldr	r2, [r4, #0]
    6b58:	601a      	str	r2, [r3, #0]
    6b5a:	6860      	ldr	r0, [r4, #4]
    6b5c:	6058      	str	r0, [r3, #4]
    6b5e:	68a4      	ldr	r4, [r4, #8]
    6b60:	609c      	str	r4, [r3, #8]
    6b62:	e003      	b.n	6b6c <_realloc_r+0x158>
    6b64:	1c30      	adds	r0, r6, #0
    6b66:	1c21      	adds	r1, r4, #0
    6b68:	f7ff ff3a 	bl	69e0 <memmove>
    6b6c:	9c02      	ldr	r4, [sp, #8]
    6b6e:	4b7a      	ldr	r3, [pc, #488]	; (6d58 <_realloc_r+0x344>)
    6b70:	9804      	ldr	r0, [sp, #16]
    6b72:	192a      	adds	r2, r5, r4
    6b74:	609a      	str	r2, [r3, #8]
    6b76:	1b07      	subs	r7, r0, r4
    6b78:	2301      	movs	r3, #1
    6b7a:	431f      	orrs	r7, r3
    6b7c:	6057      	str	r7, [r2, #4]
    6b7e:	6869      	ldr	r1, [r5, #4]
    6b80:	400b      	ands	r3, r1
    6b82:	4323      	orrs	r3, r4
    6b84:	606b      	str	r3, [r5, #4]
    6b86:	e0bc      	b.n	6d02 <_realloc_r+0x2ee>
    6b88:	9a02      	ldr	r2, [sp, #8]
    6b8a:	4290      	cmp	r0, r2
    6b8c:	db37      	blt.n	6bfe <_realloc_r+0x1ea>
    6b8e:	68da      	ldr	r2, [r3, #12]
    6b90:	689b      	ldr	r3, [r3, #8]
    6b92:	1c28      	adds	r0, r5, #0
    6b94:	60da      	str	r2, [r3, #12]
    6b96:	6093      	str	r3, [r2, #8]
    6b98:	68aa      	ldr	r2, [r5, #8]
    6b9a:	68eb      	ldr	r3, [r5, #12]
    6b9c:	3008      	adds	r0, #8
    6b9e:	60d3      	str	r3, [r2, #12]
    6ba0:	609a      	str	r2, [r3, #8]
    6ba2:	9a01      	ldr	r2, [sp, #4]
    6ba4:	3a04      	subs	r2, #4
    6ba6:	2a24      	cmp	r2, #36	; 0x24
    6ba8:	d824      	bhi.n	6bf4 <_realloc_r+0x1e0>
    6baa:	2a13      	cmp	r2, #19
    6bac:	d919      	bls.n	6be2 <_realloc_r+0x1ce>
    6bae:	6823      	ldr	r3, [r4, #0]
    6bb0:	60ab      	str	r3, [r5, #8]
    6bb2:	6866      	ldr	r6, [r4, #4]
    6bb4:	60ee      	str	r6, [r5, #12]
    6bb6:	2a1b      	cmp	r2, #27
    6bb8:	d802      	bhi.n	6bc0 <_realloc_r+0x1ac>
    6bba:	3008      	adds	r0, #8
    6bbc:	3408      	adds	r4, #8
    6bbe:	e010      	b.n	6be2 <_realloc_r+0x1ce>
    6bc0:	68a0      	ldr	r0, [r4, #8]
    6bc2:	6128      	str	r0, [r5, #16]
    6bc4:	68e1      	ldr	r1, [r4, #12]
    6bc6:	6169      	str	r1, [r5, #20]
    6bc8:	2a24      	cmp	r2, #36	; 0x24
    6bca:	d003      	beq.n	6bd4 <_realloc_r+0x1c0>
    6bcc:	1c28      	adds	r0, r5, #0
    6bce:	3018      	adds	r0, #24
    6bd0:	3410      	adds	r4, #16
    6bd2:	e006      	b.n	6be2 <_realloc_r+0x1ce>
    6bd4:	6922      	ldr	r2, [r4, #16]
    6bd6:	1c28      	adds	r0, r5, #0
    6bd8:	61aa      	str	r2, [r5, #24]
    6bda:	6963      	ldr	r3, [r4, #20]
    6bdc:	3020      	adds	r0, #32
    6bde:	61eb      	str	r3, [r5, #28]
    6be0:	3418      	adds	r4, #24
    6be2:	6826      	ldr	r6, [r4, #0]
    6be4:	6006      	str	r6, [r0, #0]
    6be6:	6861      	ldr	r1, [r4, #4]
    6be8:	6041      	str	r1, [r0, #4]
    6bea:	68a4      	ldr	r4, [r4, #8]
    6bec:	6084      	str	r4, [r0, #8]
    6bee:	9c04      	ldr	r4, [sp, #16]
    6bf0:	9401      	str	r4, [sp, #4]
    6bf2:	e034      	b.n	6c5e <_realloc_r+0x24a>
    6bf4:	1c21      	adds	r1, r4, #0
    6bf6:	f7ff fef3 	bl	69e0 <memmove>
    6bfa:	9e04      	ldr	r6, [sp, #16]
    6bfc:	e02e      	b.n	6c5c <_realloc_r+0x248>
    6bfe:	9802      	ldr	r0, [sp, #8]
    6c00:	4286      	cmp	r6, r0
    6c02:	db32      	blt.n	6c6a <_realloc_r+0x256>
    6c04:	68aa      	ldr	r2, [r5, #8]
    6c06:	68eb      	ldr	r3, [r5, #12]
    6c08:	1c28      	adds	r0, r5, #0
    6c0a:	60d3      	str	r3, [r2, #12]
    6c0c:	609a      	str	r2, [r3, #8]
    6c0e:	9a01      	ldr	r2, [sp, #4]
    6c10:	3008      	adds	r0, #8
    6c12:	3a04      	subs	r2, #4
    6c14:	2a24      	cmp	r2, #36	; 0x24
    6c16:	d824      	bhi.n	6c62 <_realloc_r+0x24e>
    6c18:	2a13      	cmp	r2, #19
    6c1a:	d919      	bls.n	6c50 <_realloc_r+0x23c>
    6c1c:	6821      	ldr	r1, [r4, #0]
    6c1e:	60a9      	str	r1, [r5, #8]
    6c20:	6863      	ldr	r3, [r4, #4]
    6c22:	60eb      	str	r3, [r5, #12]
    6c24:	2a1b      	cmp	r2, #27
    6c26:	d802      	bhi.n	6c2e <_realloc_r+0x21a>
    6c28:	3008      	adds	r0, #8
    6c2a:	3408      	adds	r4, #8
    6c2c:	e010      	b.n	6c50 <_realloc_r+0x23c>
    6c2e:	68a0      	ldr	r0, [r4, #8]
    6c30:	6128      	str	r0, [r5, #16]
    6c32:	68e1      	ldr	r1, [r4, #12]
    6c34:	6169      	str	r1, [r5, #20]
    6c36:	2a24      	cmp	r2, #36	; 0x24
    6c38:	d003      	beq.n	6c42 <_realloc_r+0x22e>
    6c3a:	1c28      	adds	r0, r5, #0
    6c3c:	3018      	adds	r0, #24
    6c3e:	3410      	adds	r4, #16
    6c40:	e006      	b.n	6c50 <_realloc_r+0x23c>
    6c42:	6922      	ldr	r2, [r4, #16]
    6c44:	1c28      	adds	r0, r5, #0
    6c46:	61aa      	str	r2, [r5, #24]
    6c48:	6963      	ldr	r3, [r4, #20]
    6c4a:	3020      	adds	r0, #32
    6c4c:	61eb      	str	r3, [r5, #28]
    6c4e:	3418      	adds	r4, #24
    6c50:	6821      	ldr	r1, [r4, #0]
    6c52:	6001      	str	r1, [r0, #0]
    6c54:	6862      	ldr	r2, [r4, #4]
    6c56:	6042      	str	r2, [r0, #4]
    6c58:	68a4      	ldr	r4, [r4, #8]
    6c5a:	6084      	str	r4, [r0, #8]
    6c5c:	9601      	str	r6, [sp, #4]
    6c5e:	1c2f      	adds	r7, r5, #0
    6c60:	e054      	b.n	6d0c <_realloc_r+0x2f8>
    6c62:	1c21      	adds	r1, r4, #0
    6c64:	f7ff febc 	bl	69e0 <memmove>
    6c68:	e7f8      	b.n	6c5c <_realloc_r+0x248>
    6c6a:	9803      	ldr	r0, [sp, #12]
    6c6c:	9905      	ldr	r1, [sp, #20]
    6c6e:	f7fe fbd5 	bl	541c <_malloc_r>
    6c72:	1e06      	subs	r6, r0, #0
    6c74:	d045      	beq.n	6d02 <_realloc_r+0x2ee>
    6c76:	1c22      	adds	r2, r4, #0
    6c78:	3a08      	subs	r2, #8
    6c7a:	6852      	ldr	r2, [r2, #4]
    6c7c:	2101      	movs	r1, #1
    6c7e:	1c03      	adds	r3, r0, #0
    6c80:	438a      	bics	r2, r1
    6c82:	3b08      	subs	r3, #8
    6c84:	18ba      	adds	r2, r7, r2
    6c86:	4293      	cmp	r3, r2
    6c88:	d106      	bne.n	6c98 <_realloc_r+0x284>
    6c8a:	685b      	ldr	r3, [r3, #4]
    6c8c:	9c01      	ldr	r4, [sp, #4]
    6c8e:	2203      	movs	r2, #3
    6c90:	4393      	bics	r3, r2
    6c92:	18e4      	adds	r4, r4, r3
    6c94:	9401      	str	r4, [sp, #4]
    6c96:	e039      	b.n	6d0c <_realloc_r+0x2f8>
    6c98:	9a01      	ldr	r2, [sp, #4]
    6c9a:	3a04      	subs	r2, #4
    6c9c:	2a24      	cmp	r2, #36	; 0x24
    6c9e:	d829      	bhi.n	6cf4 <_realloc_r+0x2e0>
    6ca0:	2a13      	cmp	r2, #19
    6ca2:	d91e      	bls.n	6ce2 <_realloc_r+0x2ce>
    6ca4:	6820      	ldr	r0, [r4, #0]
    6ca6:	6030      	str	r0, [r6, #0]
    6ca8:	6861      	ldr	r1, [r4, #4]
    6caa:	6071      	str	r1, [r6, #4]
    6cac:	2a1b      	cmp	r2, #27
    6cae:	d804      	bhi.n	6cba <_realloc_r+0x2a6>
    6cb0:	1c33      	adds	r3, r6, #0
    6cb2:	1c22      	adds	r2, r4, #0
    6cb4:	3308      	adds	r3, #8
    6cb6:	3208      	adds	r2, #8
    6cb8:	e015      	b.n	6ce6 <_realloc_r+0x2d2>
    6cba:	68a3      	ldr	r3, [r4, #8]
    6cbc:	60b3      	str	r3, [r6, #8]
    6cbe:	68e0      	ldr	r0, [r4, #12]
    6cc0:	60f0      	str	r0, [r6, #12]
    6cc2:	2a24      	cmp	r2, #36	; 0x24
    6cc4:	d004      	beq.n	6cd0 <_realloc_r+0x2bc>
    6cc6:	1c33      	adds	r3, r6, #0
    6cc8:	1c22      	adds	r2, r4, #0
    6cca:	3310      	adds	r3, #16
    6ccc:	3210      	adds	r2, #16
    6cce:	e00a      	b.n	6ce6 <_realloc_r+0x2d2>
    6cd0:	6921      	ldr	r1, [r4, #16]
    6cd2:	1c33      	adds	r3, r6, #0
    6cd4:	6131      	str	r1, [r6, #16]
    6cd6:	6960      	ldr	r0, [r4, #20]
    6cd8:	1c22      	adds	r2, r4, #0
    6cda:	3318      	adds	r3, #24
    6cdc:	3218      	adds	r2, #24
    6cde:	6170      	str	r0, [r6, #20]
    6ce0:	e001      	b.n	6ce6 <_realloc_r+0x2d2>
    6ce2:	1c03      	adds	r3, r0, #0
    6ce4:	1c22      	adds	r2, r4, #0
    6ce6:	6811      	ldr	r1, [r2, #0]
    6ce8:	6019      	str	r1, [r3, #0]
    6cea:	6850      	ldr	r0, [r2, #4]
    6cec:	6058      	str	r0, [r3, #4]
    6cee:	6892      	ldr	r2, [r2, #8]
    6cf0:	609a      	str	r2, [r3, #8]
    6cf2:	e002      	b.n	6cfa <_realloc_r+0x2e6>
    6cf4:	1c21      	adds	r1, r4, #0
    6cf6:	f7ff fe73 	bl	69e0 <memmove>
    6cfa:	9803      	ldr	r0, [sp, #12]
    6cfc:	1c21      	adds	r1, r4, #0
    6cfe:	f7fe fa83 	bl	5208 <_free_r>
    6d02:	9803      	ldr	r0, [sp, #12]
    6d04:	f7fe fd8e 	bl	5824 <__malloc_unlock>
    6d08:	1c30      	adds	r0, r6, #0
    6d0a:	e023      	b.n	6d54 <_realloc_r+0x340>
    6d0c:	9c01      	ldr	r4, [sp, #4]
    6d0e:	9e02      	ldr	r6, [sp, #8]
    6d10:	2301      	movs	r3, #1
    6d12:	1ba2      	subs	r2, r4, r6
    6d14:	6878      	ldr	r0, [r7, #4]
    6d16:	2a0f      	cmp	r2, #15
    6d18:	d90f      	bls.n	6d3a <_realloc_r+0x326>
    6d1a:	4018      	ands	r0, r3
    6d1c:	4330      	orrs	r0, r6
    6d1e:	6078      	str	r0, [r7, #4]
    6d20:	1c18      	adds	r0, r3, #0
    6d22:	19b9      	adds	r1, r7, r6
    6d24:	4310      	orrs	r0, r2
    6d26:	6048      	str	r0, [r1, #4]
    6d28:	188a      	adds	r2, r1, r2
    6d2a:	6850      	ldr	r0, [r2, #4]
    6d2c:	3108      	adds	r1, #8
    6d2e:	4303      	orrs	r3, r0
    6d30:	6053      	str	r3, [r2, #4]
    6d32:	9803      	ldr	r0, [sp, #12]
    6d34:	f7fe fa68 	bl	5208 <_free_r>
    6d38:	e007      	b.n	6d4a <_realloc_r+0x336>
    6d3a:	9c01      	ldr	r4, [sp, #4]
    6d3c:	4018      	ands	r0, r3
    6d3e:	4320      	orrs	r0, r4
    6d40:	6078      	str	r0, [r7, #4]
    6d42:	193a      	adds	r2, r7, r4
    6d44:	6856      	ldr	r6, [r2, #4]
    6d46:	4333      	orrs	r3, r6
    6d48:	6053      	str	r3, [r2, #4]
    6d4a:	9803      	ldr	r0, [sp, #12]
    6d4c:	f7fe fd6a 	bl	5824 <__malloc_unlock>
    6d50:	1c38      	adds	r0, r7, #0
    6d52:	3008      	adds	r0, #8
    6d54:	b007      	add	sp, #28
    6d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d58:	200004b4 	.word	0x200004b4

00006d5c <__gnu_thumb1_case_uqi>:
    6d5c:	b402      	push	{r1}
    6d5e:	4671      	mov	r1, lr
    6d60:	0849      	lsrs	r1, r1, #1
    6d62:	0049      	lsls	r1, r1, #1
    6d64:	5c09      	ldrb	r1, [r1, r0]
    6d66:	0049      	lsls	r1, r1, #1
    6d68:	448e      	add	lr, r1
    6d6a:	bc02      	pop	{r1}
    6d6c:	4770      	bx	lr
    6d6e:	46c0      	nop			; (mov r8, r8)

00006d70 <__gnu_thumb1_case_uhi>:
    6d70:	b403      	push	{r0, r1}
    6d72:	4671      	mov	r1, lr
    6d74:	0849      	lsrs	r1, r1, #1
    6d76:	0040      	lsls	r0, r0, #1
    6d78:	0049      	lsls	r1, r1, #1
    6d7a:	5a09      	ldrh	r1, [r1, r0]
    6d7c:	0049      	lsls	r1, r1, #1
    6d7e:	448e      	add	lr, r1
    6d80:	bc03      	pop	{r0, r1}
    6d82:	4770      	bx	lr

00006d84 <__aeabi_idiv>:
    6d84:	2900      	cmp	r1, #0
    6d86:	d041      	beq.n	6e0c <.divsi3_skip_div0_test+0x84>

00006d88 <.divsi3_skip_div0_test>:
    6d88:	b410      	push	{r4}
    6d8a:	1c04      	adds	r4, r0, #0
    6d8c:	404c      	eors	r4, r1
    6d8e:	46a4      	mov	ip, r4
    6d90:	2301      	movs	r3, #1
    6d92:	2200      	movs	r2, #0
    6d94:	2900      	cmp	r1, #0
    6d96:	d500      	bpl.n	6d9a <.divsi3_skip_div0_test+0x12>
    6d98:	4249      	negs	r1, r1
    6d9a:	2800      	cmp	r0, #0
    6d9c:	d500      	bpl.n	6da0 <.divsi3_skip_div0_test+0x18>
    6d9e:	4240      	negs	r0, r0
    6da0:	4288      	cmp	r0, r1
    6da2:	d32c      	bcc.n	6dfe <.divsi3_skip_div0_test+0x76>
    6da4:	2401      	movs	r4, #1
    6da6:	0724      	lsls	r4, r4, #28
    6da8:	42a1      	cmp	r1, r4
    6daa:	d204      	bcs.n	6db6 <.divsi3_skip_div0_test+0x2e>
    6dac:	4281      	cmp	r1, r0
    6dae:	d202      	bcs.n	6db6 <.divsi3_skip_div0_test+0x2e>
    6db0:	0109      	lsls	r1, r1, #4
    6db2:	011b      	lsls	r3, r3, #4
    6db4:	e7f8      	b.n	6da8 <.divsi3_skip_div0_test+0x20>
    6db6:	00e4      	lsls	r4, r4, #3
    6db8:	42a1      	cmp	r1, r4
    6dba:	d204      	bcs.n	6dc6 <.divsi3_skip_div0_test+0x3e>
    6dbc:	4281      	cmp	r1, r0
    6dbe:	d202      	bcs.n	6dc6 <.divsi3_skip_div0_test+0x3e>
    6dc0:	0049      	lsls	r1, r1, #1
    6dc2:	005b      	lsls	r3, r3, #1
    6dc4:	e7f8      	b.n	6db8 <.divsi3_skip_div0_test+0x30>
    6dc6:	4288      	cmp	r0, r1
    6dc8:	d301      	bcc.n	6dce <.divsi3_skip_div0_test+0x46>
    6dca:	1a40      	subs	r0, r0, r1
    6dcc:	431a      	orrs	r2, r3
    6dce:	084c      	lsrs	r4, r1, #1
    6dd0:	42a0      	cmp	r0, r4
    6dd2:	d302      	bcc.n	6dda <.divsi3_skip_div0_test+0x52>
    6dd4:	1b00      	subs	r0, r0, r4
    6dd6:	085c      	lsrs	r4, r3, #1
    6dd8:	4322      	orrs	r2, r4
    6dda:	088c      	lsrs	r4, r1, #2
    6ddc:	42a0      	cmp	r0, r4
    6dde:	d302      	bcc.n	6de6 <.divsi3_skip_div0_test+0x5e>
    6de0:	1b00      	subs	r0, r0, r4
    6de2:	089c      	lsrs	r4, r3, #2
    6de4:	4322      	orrs	r2, r4
    6de6:	08cc      	lsrs	r4, r1, #3
    6de8:	42a0      	cmp	r0, r4
    6dea:	d302      	bcc.n	6df2 <.divsi3_skip_div0_test+0x6a>
    6dec:	1b00      	subs	r0, r0, r4
    6dee:	08dc      	lsrs	r4, r3, #3
    6df0:	4322      	orrs	r2, r4
    6df2:	2800      	cmp	r0, #0
    6df4:	d003      	beq.n	6dfe <.divsi3_skip_div0_test+0x76>
    6df6:	091b      	lsrs	r3, r3, #4
    6df8:	d001      	beq.n	6dfe <.divsi3_skip_div0_test+0x76>
    6dfa:	0909      	lsrs	r1, r1, #4
    6dfc:	e7e3      	b.n	6dc6 <.divsi3_skip_div0_test+0x3e>
    6dfe:	1c10      	adds	r0, r2, #0
    6e00:	4664      	mov	r4, ip
    6e02:	2c00      	cmp	r4, #0
    6e04:	d500      	bpl.n	6e08 <.divsi3_skip_div0_test+0x80>
    6e06:	4240      	negs	r0, r0
    6e08:	bc10      	pop	{r4}
    6e0a:	4770      	bx	lr
    6e0c:	2800      	cmp	r0, #0
    6e0e:	d006      	beq.n	6e1e <.divsi3_skip_div0_test+0x96>
    6e10:	db03      	blt.n	6e1a <.divsi3_skip_div0_test+0x92>
    6e12:	2000      	movs	r0, #0
    6e14:	43c0      	mvns	r0, r0
    6e16:	0840      	lsrs	r0, r0, #1
    6e18:	e001      	b.n	6e1e <.divsi3_skip_div0_test+0x96>
    6e1a:	2080      	movs	r0, #128	; 0x80
    6e1c:	0600      	lsls	r0, r0, #24
    6e1e:	b407      	push	{r0, r1, r2}
    6e20:	4802      	ldr	r0, [pc, #8]	; (6e2c <.divsi3_skip_div0_test+0xa4>)
    6e22:	a102      	add	r1, pc, #8	; (adr r1, 6e2c <.divsi3_skip_div0_test+0xa4>)
    6e24:	1840      	adds	r0, r0, r1
    6e26:	9002      	str	r0, [sp, #8]
    6e28:	bd03      	pop	{r0, r1, pc}
    6e2a:	46c0      	nop			; (mov r8, r8)
    6e2c:	ffffadf1 	.word	0xffffadf1

00006e30 <__aeabi_idivmod>:
    6e30:	2900      	cmp	r1, #0
    6e32:	d0eb      	beq.n	6e0c <.divsi3_skip_div0_test+0x84>
    6e34:	b503      	push	{r0, r1, lr}
    6e36:	f7ff ffa7 	bl	6d88 <.divsi3_skip_div0_test>
    6e3a:	bc0e      	pop	{r1, r2, r3}
    6e3c:	4342      	muls	r2, r0
    6e3e:	1a89      	subs	r1, r1, r2
    6e40:	4718      	bx	r3
    6e42:	46c0      	nop			; (mov r8, r8)

00006e44 <__aeabi_ddiv>:
    6e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e46:	4656      	mov	r6, sl
    6e48:	4644      	mov	r4, r8
    6e4a:	465f      	mov	r7, fp
    6e4c:	464d      	mov	r5, r9
    6e4e:	b4f0      	push	{r4, r5, r6, r7}
    6e50:	1c1f      	adds	r7, r3, #0
    6e52:	030b      	lsls	r3, r1, #12
    6e54:	0b1b      	lsrs	r3, r3, #12
    6e56:	4698      	mov	r8, r3
    6e58:	004b      	lsls	r3, r1, #1
    6e5a:	b087      	sub	sp, #28
    6e5c:	1c04      	adds	r4, r0, #0
    6e5e:	4681      	mov	r9, r0
    6e60:	0d5b      	lsrs	r3, r3, #21
    6e62:	0fc8      	lsrs	r0, r1, #31
    6e64:	1c16      	adds	r6, r2, #0
    6e66:	469a      	mov	sl, r3
    6e68:	9000      	str	r0, [sp, #0]
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	d051      	beq.n	6f12 <__aeabi_ddiv+0xce>
    6e6e:	4b6b      	ldr	r3, [pc, #428]	; (701c <__aeabi_ddiv+0x1d8>)
    6e70:	459a      	cmp	sl, r3
    6e72:	d031      	beq.n	6ed8 <__aeabi_ddiv+0x94>
    6e74:	2280      	movs	r2, #128	; 0x80
    6e76:	4641      	mov	r1, r8
    6e78:	0352      	lsls	r2, r2, #13
    6e7a:	430a      	orrs	r2, r1
    6e7c:	0f63      	lsrs	r3, r4, #29
    6e7e:	00d2      	lsls	r2, r2, #3
    6e80:	431a      	orrs	r2, r3
    6e82:	4b67      	ldr	r3, [pc, #412]	; (7020 <__aeabi_ddiv+0x1dc>)
    6e84:	4690      	mov	r8, r2
    6e86:	2500      	movs	r5, #0
    6e88:	00e2      	lsls	r2, r4, #3
    6e8a:	4691      	mov	r9, r2
    6e8c:	449a      	add	sl, r3
    6e8e:	2400      	movs	r4, #0
    6e90:	9502      	str	r5, [sp, #8]
    6e92:	033b      	lsls	r3, r7, #12
    6e94:	0b1b      	lsrs	r3, r3, #12
    6e96:	469b      	mov	fp, r3
    6e98:	0ffd      	lsrs	r5, r7, #31
    6e9a:	007b      	lsls	r3, r7, #1
    6e9c:	1c31      	adds	r1, r6, #0
    6e9e:	0d5b      	lsrs	r3, r3, #21
    6ea0:	9501      	str	r5, [sp, #4]
    6ea2:	d060      	beq.n	6f66 <__aeabi_ddiv+0x122>
    6ea4:	4a5d      	ldr	r2, [pc, #372]	; (701c <__aeabi_ddiv+0x1d8>)
    6ea6:	4293      	cmp	r3, r2
    6ea8:	d054      	beq.n	6f54 <__aeabi_ddiv+0x110>
    6eaa:	2180      	movs	r1, #128	; 0x80
    6eac:	4658      	mov	r0, fp
    6eae:	0349      	lsls	r1, r1, #13
    6eb0:	4301      	orrs	r1, r0
    6eb2:	0f72      	lsrs	r2, r6, #29
    6eb4:	00c9      	lsls	r1, r1, #3
    6eb6:	4311      	orrs	r1, r2
    6eb8:	4a59      	ldr	r2, [pc, #356]	; (7020 <__aeabi_ddiv+0x1dc>)
    6eba:	468b      	mov	fp, r1
    6ebc:	189b      	adds	r3, r3, r2
    6ebe:	00f1      	lsls	r1, r6, #3
    6ec0:	2000      	movs	r0, #0
    6ec2:	9a00      	ldr	r2, [sp, #0]
    6ec4:	4304      	orrs	r4, r0
    6ec6:	406a      	eors	r2, r5
    6ec8:	9203      	str	r2, [sp, #12]
    6eca:	2c0f      	cmp	r4, #15
    6ecc:	d900      	bls.n	6ed0 <__aeabi_ddiv+0x8c>
    6ece:	e0b1      	b.n	7034 <__aeabi_ddiv+0x1f0>
    6ed0:	4e54      	ldr	r6, [pc, #336]	; (7024 <__aeabi_ddiv+0x1e0>)
    6ed2:	00a4      	lsls	r4, r4, #2
    6ed4:	5934      	ldr	r4, [r6, r4]
    6ed6:	46a7      	mov	pc, r4
    6ed8:	4640      	mov	r0, r8
    6eda:	4304      	orrs	r4, r0
    6edc:	d16e      	bne.n	6fbc <__aeabi_ddiv+0x178>
    6ede:	2100      	movs	r1, #0
    6ee0:	2502      	movs	r5, #2
    6ee2:	2408      	movs	r4, #8
    6ee4:	4688      	mov	r8, r1
    6ee6:	4689      	mov	r9, r1
    6ee8:	9502      	str	r5, [sp, #8]
    6eea:	e7d2      	b.n	6e92 <__aeabi_ddiv+0x4e>
    6eec:	9c00      	ldr	r4, [sp, #0]
    6eee:	9802      	ldr	r0, [sp, #8]
    6ef0:	46c3      	mov	fp, r8
    6ef2:	4649      	mov	r1, r9
    6ef4:	9401      	str	r4, [sp, #4]
    6ef6:	2802      	cmp	r0, #2
    6ef8:	d064      	beq.n	6fc4 <__aeabi_ddiv+0x180>
    6efa:	2803      	cmp	r0, #3
    6efc:	d100      	bne.n	6f00 <__aeabi_ddiv+0xbc>
    6efe:	e2af      	b.n	7460 <__aeabi_ddiv+0x61c>
    6f00:	2801      	cmp	r0, #1
    6f02:	d000      	beq.n	6f06 <__aeabi_ddiv+0xc2>
    6f04:	e23c      	b.n	7380 <__aeabi_ddiv+0x53c>
    6f06:	9a01      	ldr	r2, [sp, #4]
    6f08:	2400      	movs	r4, #0
    6f0a:	4002      	ands	r2, r0
    6f0c:	2500      	movs	r5, #0
    6f0e:	46a1      	mov	r9, r4
    6f10:	e060      	b.n	6fd4 <__aeabi_ddiv+0x190>
    6f12:	4643      	mov	r3, r8
    6f14:	4323      	orrs	r3, r4
    6f16:	d04a      	beq.n	6fae <__aeabi_ddiv+0x16a>
    6f18:	4640      	mov	r0, r8
    6f1a:	2800      	cmp	r0, #0
    6f1c:	d100      	bne.n	6f20 <__aeabi_ddiv+0xdc>
    6f1e:	e1c4      	b.n	72aa <__aeabi_ddiv+0x466>
    6f20:	f7fb fe70 	bl	2c04 <__clzsi2>
    6f24:	1e03      	subs	r3, r0, #0
    6f26:	2b27      	cmp	r3, #39	; 0x27
    6f28:	dd00      	ble.n	6f2c <__aeabi_ddiv+0xe8>
    6f2a:	e1b7      	b.n	729c <__aeabi_ddiv+0x458>
    6f2c:	2128      	movs	r1, #40	; 0x28
    6f2e:	1a0d      	subs	r5, r1, r0
    6f30:	1c21      	adds	r1, r4, #0
    6f32:	3b08      	subs	r3, #8
    6f34:	4642      	mov	r2, r8
    6f36:	40e9      	lsrs	r1, r5
    6f38:	409a      	lsls	r2, r3
    6f3a:	1c0d      	adds	r5, r1, #0
    6f3c:	4315      	orrs	r5, r2
    6f3e:	1c22      	adds	r2, r4, #0
    6f40:	409a      	lsls	r2, r3
    6f42:	46a8      	mov	r8, r5
    6f44:	4691      	mov	r9, r2
    6f46:	4b38      	ldr	r3, [pc, #224]	; (7028 <__aeabi_ddiv+0x1e4>)
    6f48:	2500      	movs	r5, #0
    6f4a:	1a1b      	subs	r3, r3, r0
    6f4c:	469a      	mov	sl, r3
    6f4e:	2400      	movs	r4, #0
    6f50:	9502      	str	r5, [sp, #8]
    6f52:	e79e      	b.n	6e92 <__aeabi_ddiv+0x4e>
    6f54:	465a      	mov	r2, fp
    6f56:	4316      	orrs	r6, r2
    6f58:	2003      	movs	r0, #3
    6f5a:	2e00      	cmp	r6, #0
    6f5c:	d1b1      	bne.n	6ec2 <__aeabi_ddiv+0x7e>
    6f5e:	46b3      	mov	fp, r6
    6f60:	2100      	movs	r1, #0
    6f62:	2002      	movs	r0, #2
    6f64:	e7ad      	b.n	6ec2 <__aeabi_ddiv+0x7e>
    6f66:	465a      	mov	r2, fp
    6f68:	4332      	orrs	r2, r6
    6f6a:	d01b      	beq.n	6fa4 <__aeabi_ddiv+0x160>
    6f6c:	465b      	mov	r3, fp
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d100      	bne.n	6f74 <__aeabi_ddiv+0x130>
    6f72:	e18e      	b.n	7292 <__aeabi_ddiv+0x44e>
    6f74:	4658      	mov	r0, fp
    6f76:	f7fb fe45 	bl	2c04 <__clzsi2>
    6f7a:	2827      	cmp	r0, #39	; 0x27
    6f7c:	dd00      	ble.n	6f80 <__aeabi_ddiv+0x13c>
    6f7e:	e181      	b.n	7284 <__aeabi_ddiv+0x440>
    6f80:	2228      	movs	r2, #40	; 0x28
    6f82:	1a17      	subs	r7, r2, r0
    6f84:	1c01      	adds	r1, r0, #0
    6f86:	1c32      	adds	r2, r6, #0
    6f88:	3908      	subs	r1, #8
    6f8a:	465b      	mov	r3, fp
    6f8c:	40fa      	lsrs	r2, r7
    6f8e:	408b      	lsls	r3, r1
    6f90:	1c17      	adds	r7, r2, #0
    6f92:	431f      	orrs	r7, r3
    6f94:	1c33      	adds	r3, r6, #0
    6f96:	408b      	lsls	r3, r1
    6f98:	46bb      	mov	fp, r7
    6f9a:	1c19      	adds	r1, r3, #0
    6f9c:	4b22      	ldr	r3, [pc, #136]	; (7028 <__aeabi_ddiv+0x1e4>)
    6f9e:	1a1b      	subs	r3, r3, r0
    6fa0:	2000      	movs	r0, #0
    6fa2:	e78e      	b.n	6ec2 <__aeabi_ddiv+0x7e>
    6fa4:	2700      	movs	r7, #0
    6fa6:	46bb      	mov	fp, r7
    6fa8:	2100      	movs	r1, #0
    6faa:	2001      	movs	r0, #1
    6fac:	e789      	b.n	6ec2 <__aeabi_ddiv+0x7e>
    6fae:	2000      	movs	r0, #0
    6fb0:	2501      	movs	r5, #1
    6fb2:	2404      	movs	r4, #4
    6fb4:	4680      	mov	r8, r0
    6fb6:	4681      	mov	r9, r0
    6fb8:	9502      	str	r5, [sp, #8]
    6fba:	e76a      	b.n	6e92 <__aeabi_ddiv+0x4e>
    6fbc:	2503      	movs	r5, #3
    6fbe:	240c      	movs	r4, #12
    6fc0:	9502      	str	r5, [sp, #8]
    6fc2:	e766      	b.n	6e92 <__aeabi_ddiv+0x4e>
    6fc4:	9c01      	ldr	r4, [sp, #4]
    6fc6:	9403      	str	r4, [sp, #12]
    6fc8:	9d03      	ldr	r5, [sp, #12]
    6fca:	2201      	movs	r2, #1
    6fcc:	402a      	ands	r2, r5
    6fce:	2400      	movs	r4, #0
    6fd0:	4d12      	ldr	r5, [pc, #72]	; (701c <__aeabi_ddiv+0x1d8>)
    6fd2:	46a1      	mov	r9, r4
    6fd4:	2000      	movs	r0, #0
    6fd6:	2100      	movs	r1, #0
    6fd8:	0324      	lsls	r4, r4, #12
    6fda:	0b26      	lsrs	r6, r4, #12
    6fdc:	0d0c      	lsrs	r4, r1, #20
    6fde:	0524      	lsls	r4, r4, #20
    6fe0:	4b12      	ldr	r3, [pc, #72]	; (702c <__aeabi_ddiv+0x1e8>)
    6fe2:	4334      	orrs	r4, r6
    6fe4:	052d      	lsls	r5, r5, #20
    6fe6:	4023      	ands	r3, r4
    6fe8:	432b      	orrs	r3, r5
    6fea:	005b      	lsls	r3, r3, #1
    6fec:	085b      	lsrs	r3, r3, #1
    6fee:	07d2      	lsls	r2, r2, #31
    6ff0:	1c19      	adds	r1, r3, #0
    6ff2:	4648      	mov	r0, r9
    6ff4:	4311      	orrs	r1, r2
    6ff6:	b007      	add	sp, #28
    6ff8:	bc3c      	pop	{r2, r3, r4, r5}
    6ffa:	4690      	mov	r8, r2
    6ffc:	4699      	mov	r9, r3
    6ffe:	46a2      	mov	sl, r4
    7000:	46ab      	mov	fp, r5
    7002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7004:	2301      	movs	r3, #1
    7006:	425b      	negs	r3, r3
    7008:	2200      	movs	r2, #0
    700a:	4c09      	ldr	r4, [pc, #36]	; (7030 <__aeabi_ddiv+0x1ec>)
    700c:	4699      	mov	r9, r3
    700e:	4d03      	ldr	r5, [pc, #12]	; (701c <__aeabi_ddiv+0x1d8>)
    7010:	e7e0      	b.n	6fd4 <__aeabi_ddiv+0x190>
    7012:	2400      	movs	r4, #0
    7014:	2500      	movs	r5, #0
    7016:	46a1      	mov	r9, r4
    7018:	e7dc      	b.n	6fd4 <__aeabi_ddiv+0x190>
    701a:	46c0      	nop			; (mov r8, r8)
    701c:	000007ff 	.word	0x000007ff
    7020:	fffffc01 	.word	0xfffffc01
    7024:	00007e70 	.word	0x00007e70
    7028:	fffffc0d 	.word	0xfffffc0d
    702c:	800fffff 	.word	0x800fffff
    7030:	000fffff 	.word	0x000fffff
    7034:	4655      	mov	r5, sl
    7036:	1aed      	subs	r5, r5, r3
    7038:	9504      	str	r5, [sp, #16]
    703a:	45d8      	cmp	r8, fp
    703c:	d900      	bls.n	7040 <__aeabi_ddiv+0x1fc>
    703e:	e153      	b.n	72e8 <__aeabi_ddiv+0x4a4>
    7040:	d100      	bne.n	7044 <__aeabi_ddiv+0x200>
    7042:	e14e      	b.n	72e2 <__aeabi_ddiv+0x49e>
    7044:	9c04      	ldr	r4, [sp, #16]
    7046:	2500      	movs	r5, #0
    7048:	3c01      	subs	r4, #1
    704a:	464e      	mov	r6, r9
    704c:	9404      	str	r4, [sp, #16]
    704e:	4647      	mov	r7, r8
    7050:	46a9      	mov	r9, r5
    7052:	4658      	mov	r0, fp
    7054:	0203      	lsls	r3, r0, #8
    7056:	0e0c      	lsrs	r4, r1, #24
    7058:	431c      	orrs	r4, r3
    705a:	0209      	lsls	r1, r1, #8
    705c:	0c25      	lsrs	r5, r4, #16
    705e:	0423      	lsls	r3, r4, #16
    7060:	0c1b      	lsrs	r3, r3, #16
    7062:	9100      	str	r1, [sp, #0]
    7064:	1c38      	adds	r0, r7, #0
    7066:	1c29      	adds	r1, r5, #0
    7068:	9301      	str	r3, [sp, #4]
    706a:	f7fa fd89 	bl	1b80 <__aeabi_uidiv>
    706e:	9901      	ldr	r1, [sp, #4]
    7070:	4683      	mov	fp, r0
    7072:	4341      	muls	r1, r0
    7074:	1c38      	adds	r0, r7, #0
    7076:	468a      	mov	sl, r1
    7078:	1c29      	adds	r1, r5, #0
    707a:	f7fa fdc5 	bl	1c08 <__aeabi_uidivmod>
    707e:	0c33      	lsrs	r3, r6, #16
    7080:	0409      	lsls	r1, r1, #16
    7082:	4319      	orrs	r1, r3
    7084:	458a      	cmp	sl, r1
    7086:	d90c      	bls.n	70a2 <__aeabi_ddiv+0x25e>
    7088:	465b      	mov	r3, fp
    708a:	1909      	adds	r1, r1, r4
    708c:	3b01      	subs	r3, #1
    708e:	428c      	cmp	r4, r1
    7090:	d900      	bls.n	7094 <__aeabi_ddiv+0x250>
    7092:	e147      	b.n	7324 <__aeabi_ddiv+0x4e0>
    7094:	458a      	cmp	sl, r1
    7096:	d800      	bhi.n	709a <__aeabi_ddiv+0x256>
    7098:	e144      	b.n	7324 <__aeabi_ddiv+0x4e0>
    709a:	2202      	movs	r2, #2
    709c:	4252      	negs	r2, r2
    709e:	4493      	add	fp, r2
    70a0:	1909      	adds	r1, r1, r4
    70a2:	4653      	mov	r3, sl
    70a4:	1acb      	subs	r3, r1, r3
    70a6:	1c18      	adds	r0, r3, #0
    70a8:	1c29      	adds	r1, r5, #0
    70aa:	4698      	mov	r8, r3
    70ac:	f7fa fd68 	bl	1b80 <__aeabi_uidiv>
    70b0:	1c07      	adds	r7, r0, #0
    70b2:	9801      	ldr	r0, [sp, #4]
    70b4:	1c29      	adds	r1, r5, #0
    70b6:	4378      	muls	r0, r7
    70b8:	4682      	mov	sl, r0
    70ba:	4640      	mov	r0, r8
    70bc:	f7fa fda4 	bl	1c08 <__aeabi_uidivmod>
    70c0:	0436      	lsls	r6, r6, #16
    70c2:	040b      	lsls	r3, r1, #16
    70c4:	0c36      	lsrs	r6, r6, #16
    70c6:	4333      	orrs	r3, r6
    70c8:	459a      	cmp	sl, r3
    70ca:	d909      	bls.n	70e0 <__aeabi_ddiv+0x29c>
    70cc:	191b      	adds	r3, r3, r4
    70ce:	1e7a      	subs	r2, r7, #1
    70d0:	429c      	cmp	r4, r3
    70d2:	d900      	bls.n	70d6 <__aeabi_ddiv+0x292>
    70d4:	e124      	b.n	7320 <__aeabi_ddiv+0x4dc>
    70d6:	459a      	cmp	sl, r3
    70d8:	d800      	bhi.n	70dc <__aeabi_ddiv+0x298>
    70da:	e121      	b.n	7320 <__aeabi_ddiv+0x4dc>
    70dc:	3f02      	subs	r7, #2
    70de:	191b      	adds	r3, r3, r4
    70e0:	465e      	mov	r6, fp
    70e2:	0432      	lsls	r2, r6, #16
    70e4:	4317      	orrs	r7, r2
    70e6:	0c38      	lsrs	r0, r7, #16
    70e8:	46bb      	mov	fp, r7
    70ea:	9e00      	ldr	r6, [sp, #0]
    70ec:	9f00      	ldr	r7, [sp, #0]
    70ee:	4651      	mov	r1, sl
    70f0:	0c3f      	lsrs	r7, r7, #16
    70f2:	0432      	lsls	r2, r6, #16
    70f4:	1a5b      	subs	r3, r3, r1
    70f6:	4659      	mov	r1, fp
    70f8:	46ba      	mov	sl, r7
    70fa:	0c12      	lsrs	r2, r2, #16
    70fc:	040f      	lsls	r7, r1, #16
    70fe:	0c3f      	lsrs	r7, r7, #16
    7100:	4690      	mov	r8, r2
    7102:	4651      	mov	r1, sl
    7104:	437a      	muls	r2, r7
    7106:	434f      	muls	r7, r1
    7108:	4641      	mov	r1, r8
    710a:	4341      	muls	r1, r0
    710c:	4656      	mov	r6, sl
    710e:	4370      	muls	r0, r6
    7110:	19cf      	adds	r7, r1, r7
    7112:	0c16      	lsrs	r6, r2, #16
    7114:	19be      	adds	r6, r7, r6
    7116:	42b1      	cmp	r1, r6
    7118:	d902      	bls.n	7120 <__aeabi_ddiv+0x2dc>
    711a:	2780      	movs	r7, #128	; 0x80
    711c:	027f      	lsls	r7, r7, #9
    711e:	19c0      	adds	r0, r0, r7
    7120:	0c31      	lsrs	r1, r6, #16
    7122:	0412      	lsls	r2, r2, #16
    7124:	0436      	lsls	r6, r6, #16
    7126:	0c12      	lsrs	r2, r2, #16
    7128:	1840      	adds	r0, r0, r1
    712a:	18b6      	adds	r6, r6, r2
    712c:	4283      	cmp	r3, r0
    712e:	d200      	bcs.n	7132 <__aeabi_ddiv+0x2ee>
    7130:	e0c4      	b.n	72bc <__aeabi_ddiv+0x478>
    7132:	d100      	bne.n	7136 <__aeabi_ddiv+0x2f2>
    7134:	e0be      	b.n	72b4 <__aeabi_ddiv+0x470>
    7136:	1a19      	subs	r1, r3, r0
    7138:	4648      	mov	r0, r9
    713a:	1b86      	subs	r6, r0, r6
    713c:	45b1      	cmp	r9, r6
    713e:	41bf      	sbcs	r7, r7
    7140:	427f      	negs	r7, r7
    7142:	1bcf      	subs	r7, r1, r7
    7144:	42a7      	cmp	r7, r4
    7146:	d100      	bne.n	714a <__aeabi_ddiv+0x306>
    7148:	e113      	b.n	7372 <__aeabi_ddiv+0x52e>
    714a:	1c29      	adds	r1, r5, #0
    714c:	1c38      	adds	r0, r7, #0
    714e:	f7fa fd17 	bl	1b80 <__aeabi_uidiv>
    7152:	9901      	ldr	r1, [sp, #4]
    7154:	9002      	str	r0, [sp, #8]
    7156:	4341      	muls	r1, r0
    7158:	1c38      	adds	r0, r7, #0
    715a:	4689      	mov	r9, r1
    715c:	1c29      	adds	r1, r5, #0
    715e:	f7fa fd53 	bl	1c08 <__aeabi_uidivmod>
    7162:	0c33      	lsrs	r3, r6, #16
    7164:	0409      	lsls	r1, r1, #16
    7166:	4319      	orrs	r1, r3
    7168:	4589      	cmp	r9, r1
    716a:	d90c      	bls.n	7186 <__aeabi_ddiv+0x342>
    716c:	9b02      	ldr	r3, [sp, #8]
    716e:	1909      	adds	r1, r1, r4
    7170:	3b01      	subs	r3, #1
    7172:	428c      	cmp	r4, r1
    7174:	d900      	bls.n	7178 <__aeabi_ddiv+0x334>
    7176:	e0ff      	b.n	7378 <__aeabi_ddiv+0x534>
    7178:	4589      	cmp	r9, r1
    717a:	d800      	bhi.n	717e <__aeabi_ddiv+0x33a>
    717c:	e0fc      	b.n	7378 <__aeabi_ddiv+0x534>
    717e:	9f02      	ldr	r7, [sp, #8]
    7180:	1909      	adds	r1, r1, r4
    7182:	3f02      	subs	r7, #2
    7184:	9702      	str	r7, [sp, #8]
    7186:	464f      	mov	r7, r9
    7188:	1bcf      	subs	r7, r1, r7
    718a:	1c38      	adds	r0, r7, #0
    718c:	1c29      	adds	r1, r5, #0
    718e:	9705      	str	r7, [sp, #20]
    7190:	f7fa fcf6 	bl	1b80 <__aeabi_uidiv>
    7194:	1c07      	adds	r7, r0, #0
    7196:	9801      	ldr	r0, [sp, #4]
    7198:	1c29      	adds	r1, r5, #0
    719a:	4378      	muls	r0, r7
    719c:	4681      	mov	r9, r0
    719e:	9805      	ldr	r0, [sp, #20]
    71a0:	f7fa fd32 	bl	1c08 <__aeabi_uidivmod>
    71a4:	0436      	lsls	r6, r6, #16
    71a6:	0409      	lsls	r1, r1, #16
    71a8:	0c36      	lsrs	r6, r6, #16
    71aa:	430e      	orrs	r6, r1
    71ac:	45b1      	cmp	r9, r6
    71ae:	d909      	bls.n	71c4 <__aeabi_ddiv+0x380>
    71b0:	1936      	adds	r6, r6, r4
    71b2:	1e7b      	subs	r3, r7, #1
    71b4:	42b4      	cmp	r4, r6
    71b6:	d900      	bls.n	71ba <__aeabi_ddiv+0x376>
    71b8:	e0e0      	b.n	737c <__aeabi_ddiv+0x538>
    71ba:	45b1      	cmp	r9, r6
    71bc:	d800      	bhi.n	71c0 <__aeabi_ddiv+0x37c>
    71be:	e0dd      	b.n	737c <__aeabi_ddiv+0x538>
    71c0:	3f02      	subs	r7, #2
    71c2:	1936      	adds	r6, r6, r4
    71c4:	9d02      	ldr	r5, [sp, #8]
    71c6:	4649      	mov	r1, r9
    71c8:	1a76      	subs	r6, r6, r1
    71ca:	0429      	lsls	r1, r5, #16
    71cc:	4339      	orrs	r1, r7
    71ce:	040b      	lsls	r3, r1, #16
    71d0:	4657      	mov	r7, sl
    71d2:	0c0a      	lsrs	r2, r1, #16
    71d4:	0c1b      	lsrs	r3, r3, #16
    71d6:	4640      	mov	r0, r8
    71d8:	4645      	mov	r5, r8
    71da:	4358      	muls	r0, r3
    71dc:	4355      	muls	r5, r2
    71de:	437b      	muls	r3, r7
    71e0:	437a      	muls	r2, r7
    71e2:	18eb      	adds	r3, r5, r3
    71e4:	0c07      	lsrs	r7, r0, #16
    71e6:	19db      	adds	r3, r3, r7
    71e8:	429d      	cmp	r5, r3
    71ea:	d902      	bls.n	71f2 <__aeabi_ddiv+0x3ae>
    71ec:	2580      	movs	r5, #128	; 0x80
    71ee:	026d      	lsls	r5, r5, #9
    71f0:	1952      	adds	r2, r2, r5
    71f2:	0c1d      	lsrs	r5, r3, #16
    71f4:	0400      	lsls	r0, r0, #16
    71f6:	041b      	lsls	r3, r3, #16
    71f8:	0c00      	lsrs	r0, r0, #16
    71fa:	1952      	adds	r2, r2, r5
    71fc:	181b      	adds	r3, r3, r0
    71fe:	4296      	cmp	r6, r2
    7200:	d335      	bcc.n	726e <__aeabi_ddiv+0x42a>
    7202:	d100      	bne.n	7206 <__aeabi_ddiv+0x3c2>
    7204:	e0fc      	b.n	7400 <__aeabi_ddiv+0x5bc>
    7206:	2301      	movs	r3, #1
    7208:	4319      	orrs	r1, r3
    720a:	9e04      	ldr	r6, [sp, #16]
    720c:	4f99      	ldr	r7, [pc, #612]	; (7474 <__aeabi_ddiv+0x630>)
    720e:	19f5      	adds	r5, r6, r7
    7210:	2d00      	cmp	r5, #0
    7212:	dc00      	bgt.n	7216 <__aeabi_ddiv+0x3d2>
    7214:	e0a1      	b.n	735a <__aeabi_ddiv+0x516>
    7216:	0748      	lsls	r0, r1, #29
    7218:	d009      	beq.n	722e <__aeabi_ddiv+0x3ea>
    721a:	230f      	movs	r3, #15
    721c:	400b      	ands	r3, r1
    721e:	2b04      	cmp	r3, #4
    7220:	d005      	beq.n	722e <__aeabi_ddiv+0x3ea>
    7222:	1d0b      	adds	r3, r1, #4
    7224:	428b      	cmp	r3, r1
    7226:	4189      	sbcs	r1, r1
    7228:	4249      	negs	r1, r1
    722a:	448b      	add	fp, r1
    722c:	1c19      	adds	r1, r3, #0
    722e:	465a      	mov	r2, fp
    7230:	01d2      	lsls	r2, r2, #7
    7232:	d507      	bpl.n	7244 <__aeabi_ddiv+0x400>
    7234:	4b90      	ldr	r3, [pc, #576]	; (7478 <__aeabi_ddiv+0x634>)
    7236:	465c      	mov	r4, fp
    7238:	9e04      	ldr	r6, [sp, #16]
    723a:	2780      	movs	r7, #128	; 0x80
    723c:	401c      	ands	r4, r3
    723e:	00ff      	lsls	r7, r7, #3
    7240:	46a3      	mov	fp, r4
    7242:	19f5      	adds	r5, r6, r7
    7244:	4b8d      	ldr	r3, [pc, #564]	; (747c <__aeabi_ddiv+0x638>)
    7246:	429d      	cmp	r5, r3
    7248:	dd7a      	ble.n	7340 <__aeabi_ddiv+0x4fc>
    724a:	9c03      	ldr	r4, [sp, #12]
    724c:	2201      	movs	r2, #1
    724e:	4022      	ands	r2, r4
    7250:	2400      	movs	r4, #0
    7252:	4d8b      	ldr	r5, [pc, #556]	; (7480 <__aeabi_ddiv+0x63c>)
    7254:	46a1      	mov	r9, r4
    7256:	e6bd      	b.n	6fd4 <__aeabi_ddiv+0x190>
    7258:	2480      	movs	r4, #128	; 0x80
    725a:	0324      	lsls	r4, r4, #12
    725c:	4647      	mov	r7, r8
    725e:	4227      	tst	r7, r4
    7260:	d14c      	bne.n	72fc <__aeabi_ddiv+0x4b8>
    7262:	433c      	orrs	r4, r7
    7264:	0324      	lsls	r4, r4, #12
    7266:	0b24      	lsrs	r4, r4, #12
    7268:	9a00      	ldr	r2, [sp, #0]
    726a:	4d85      	ldr	r5, [pc, #532]	; (7480 <__aeabi_ddiv+0x63c>)
    726c:	e6b2      	b.n	6fd4 <__aeabi_ddiv+0x190>
    726e:	1936      	adds	r6, r6, r4
    7270:	1e48      	subs	r0, r1, #1
    7272:	42b4      	cmp	r4, r6
    7274:	d95e      	bls.n	7334 <__aeabi_ddiv+0x4f0>
    7276:	1c01      	adds	r1, r0, #0
    7278:	4296      	cmp	r6, r2
    727a:	d1c4      	bne.n	7206 <__aeabi_ddiv+0x3c2>
    727c:	9e00      	ldr	r6, [sp, #0]
    727e:	429e      	cmp	r6, r3
    7280:	d1c1      	bne.n	7206 <__aeabi_ddiv+0x3c2>
    7282:	e7c2      	b.n	720a <__aeabi_ddiv+0x3c6>
    7284:	1c03      	adds	r3, r0, #0
    7286:	3b28      	subs	r3, #40	; 0x28
    7288:	1c31      	adds	r1, r6, #0
    728a:	4099      	lsls	r1, r3
    728c:	468b      	mov	fp, r1
    728e:	2100      	movs	r1, #0
    7290:	e684      	b.n	6f9c <__aeabi_ddiv+0x158>
    7292:	1c30      	adds	r0, r6, #0
    7294:	f7fb fcb6 	bl	2c04 <__clzsi2>
    7298:	3020      	adds	r0, #32
    729a:	e66e      	b.n	6f7a <__aeabi_ddiv+0x136>
    729c:	3b28      	subs	r3, #40	; 0x28
    729e:	1c21      	adds	r1, r4, #0
    72a0:	4099      	lsls	r1, r3
    72a2:	2200      	movs	r2, #0
    72a4:	4688      	mov	r8, r1
    72a6:	4691      	mov	r9, r2
    72a8:	e64d      	b.n	6f46 <__aeabi_ddiv+0x102>
    72aa:	1c20      	adds	r0, r4, #0
    72ac:	f7fb fcaa 	bl	2c04 <__clzsi2>
    72b0:	3020      	adds	r0, #32
    72b2:	e637      	b.n	6f24 <__aeabi_ddiv+0xe0>
    72b4:	2100      	movs	r1, #0
    72b6:	45b1      	cmp	r9, r6
    72b8:	d300      	bcc.n	72bc <__aeabi_ddiv+0x478>
    72ba:	e73d      	b.n	7138 <__aeabi_ddiv+0x2f4>
    72bc:	9f00      	ldr	r7, [sp, #0]
    72be:	465a      	mov	r2, fp
    72c0:	44b9      	add	r9, r7
    72c2:	45b9      	cmp	r9, r7
    72c4:	41bf      	sbcs	r7, r7
    72c6:	427f      	negs	r7, r7
    72c8:	193f      	adds	r7, r7, r4
    72ca:	18fb      	adds	r3, r7, r3
    72cc:	3a01      	subs	r2, #1
    72ce:	429c      	cmp	r4, r3
    72d0:	d21e      	bcs.n	7310 <__aeabi_ddiv+0x4cc>
    72d2:	4298      	cmp	r0, r3
    72d4:	d900      	bls.n	72d8 <__aeabi_ddiv+0x494>
    72d6:	e07e      	b.n	73d6 <__aeabi_ddiv+0x592>
    72d8:	d100      	bne.n	72dc <__aeabi_ddiv+0x498>
    72da:	e0b5      	b.n	7448 <__aeabi_ddiv+0x604>
    72dc:	1a19      	subs	r1, r3, r0
    72de:	4693      	mov	fp, r2
    72e0:	e72a      	b.n	7138 <__aeabi_ddiv+0x2f4>
    72e2:	4589      	cmp	r9, r1
    72e4:	d800      	bhi.n	72e8 <__aeabi_ddiv+0x4a4>
    72e6:	e6ad      	b.n	7044 <__aeabi_ddiv+0x200>
    72e8:	4648      	mov	r0, r9
    72ea:	4646      	mov	r6, r8
    72ec:	4642      	mov	r2, r8
    72ee:	0877      	lsrs	r7, r6, #1
    72f0:	07d3      	lsls	r3, r2, #31
    72f2:	0846      	lsrs	r6, r0, #1
    72f4:	07c0      	lsls	r0, r0, #31
    72f6:	431e      	orrs	r6, r3
    72f8:	4681      	mov	r9, r0
    72fa:	e6aa      	b.n	7052 <__aeabi_ddiv+0x20e>
    72fc:	4658      	mov	r0, fp
    72fe:	4220      	tst	r0, r4
    7300:	d112      	bne.n	7328 <__aeabi_ddiv+0x4e4>
    7302:	4304      	orrs	r4, r0
    7304:	0324      	lsls	r4, r4, #12
    7306:	1c2a      	adds	r2, r5, #0
    7308:	0b24      	lsrs	r4, r4, #12
    730a:	4689      	mov	r9, r1
    730c:	4d5c      	ldr	r5, [pc, #368]	; (7480 <__aeabi_ddiv+0x63c>)
    730e:	e661      	b.n	6fd4 <__aeabi_ddiv+0x190>
    7310:	42a3      	cmp	r3, r4
    7312:	d1e3      	bne.n	72dc <__aeabi_ddiv+0x498>
    7314:	9f00      	ldr	r7, [sp, #0]
    7316:	454f      	cmp	r7, r9
    7318:	d9db      	bls.n	72d2 <__aeabi_ddiv+0x48e>
    731a:	1a21      	subs	r1, r4, r0
    731c:	4693      	mov	fp, r2
    731e:	e70b      	b.n	7138 <__aeabi_ddiv+0x2f4>
    7320:	1c17      	adds	r7, r2, #0
    7322:	e6dd      	b.n	70e0 <__aeabi_ddiv+0x29c>
    7324:	469b      	mov	fp, r3
    7326:	e6bc      	b.n	70a2 <__aeabi_ddiv+0x25e>
    7328:	433c      	orrs	r4, r7
    732a:	0324      	lsls	r4, r4, #12
    732c:	0b24      	lsrs	r4, r4, #12
    732e:	9a00      	ldr	r2, [sp, #0]
    7330:	4d53      	ldr	r5, [pc, #332]	; (7480 <__aeabi_ddiv+0x63c>)
    7332:	e64f      	b.n	6fd4 <__aeabi_ddiv+0x190>
    7334:	42b2      	cmp	r2, r6
    7336:	d859      	bhi.n	73ec <__aeabi_ddiv+0x5a8>
    7338:	d100      	bne.n	733c <__aeabi_ddiv+0x4f8>
    733a:	e08a      	b.n	7452 <__aeabi_ddiv+0x60e>
    733c:	1c01      	adds	r1, r0, #0
    733e:	e762      	b.n	7206 <__aeabi_ddiv+0x3c2>
    7340:	465f      	mov	r7, fp
    7342:	08c9      	lsrs	r1, r1, #3
    7344:	077b      	lsls	r3, r7, #29
    7346:	9e03      	ldr	r6, [sp, #12]
    7348:	430b      	orrs	r3, r1
    734a:	027c      	lsls	r4, r7, #9
    734c:	056d      	lsls	r5, r5, #21
    734e:	2201      	movs	r2, #1
    7350:	4699      	mov	r9, r3
    7352:	0b24      	lsrs	r4, r4, #12
    7354:	0d6d      	lsrs	r5, r5, #21
    7356:	4032      	ands	r2, r6
    7358:	e63c      	b.n	6fd4 <__aeabi_ddiv+0x190>
    735a:	4b4a      	ldr	r3, [pc, #296]	; (7484 <__aeabi_ddiv+0x640>)
    735c:	9f04      	ldr	r7, [sp, #16]
    735e:	1bdb      	subs	r3, r3, r7
    7360:	2b38      	cmp	r3, #56	; 0x38
    7362:	dd10      	ble.n	7386 <__aeabi_ddiv+0x542>
    7364:	9c03      	ldr	r4, [sp, #12]
    7366:	2201      	movs	r2, #1
    7368:	4022      	ands	r2, r4
    736a:	2400      	movs	r4, #0
    736c:	2500      	movs	r5, #0
    736e:	46a1      	mov	r9, r4
    7370:	e630      	b.n	6fd4 <__aeabi_ddiv+0x190>
    7372:	2101      	movs	r1, #1
    7374:	4249      	negs	r1, r1
    7376:	e748      	b.n	720a <__aeabi_ddiv+0x3c6>
    7378:	9302      	str	r3, [sp, #8]
    737a:	e704      	b.n	7186 <__aeabi_ddiv+0x342>
    737c:	1c1f      	adds	r7, r3, #0
    737e:	e721      	b.n	71c4 <__aeabi_ddiv+0x380>
    7380:	9c01      	ldr	r4, [sp, #4]
    7382:	9403      	str	r4, [sp, #12]
    7384:	e741      	b.n	720a <__aeabi_ddiv+0x3c6>
    7386:	2b1f      	cmp	r3, #31
    7388:	dc40      	bgt.n	740c <__aeabi_ddiv+0x5c8>
    738a:	483f      	ldr	r0, [pc, #252]	; (7488 <__aeabi_ddiv+0x644>)
    738c:	9f04      	ldr	r7, [sp, #16]
    738e:	1c0c      	adds	r4, r1, #0
    7390:	183a      	adds	r2, r7, r0
    7392:	4658      	mov	r0, fp
    7394:	4091      	lsls	r1, r2
    7396:	40dc      	lsrs	r4, r3
    7398:	4090      	lsls	r0, r2
    739a:	4320      	orrs	r0, r4
    739c:	1c0a      	adds	r2, r1, #0
    739e:	1e51      	subs	r1, r2, #1
    73a0:	418a      	sbcs	r2, r1
    73a2:	1c01      	adds	r1, r0, #0
    73a4:	4311      	orrs	r1, r2
    73a6:	465a      	mov	r2, fp
    73a8:	40da      	lsrs	r2, r3
    73aa:	1c13      	adds	r3, r2, #0
    73ac:	0748      	lsls	r0, r1, #29
    73ae:	d009      	beq.n	73c4 <__aeabi_ddiv+0x580>
    73b0:	220f      	movs	r2, #15
    73b2:	400a      	ands	r2, r1
    73b4:	2a04      	cmp	r2, #4
    73b6:	d005      	beq.n	73c4 <__aeabi_ddiv+0x580>
    73b8:	1d0a      	adds	r2, r1, #4
    73ba:	428a      	cmp	r2, r1
    73bc:	4189      	sbcs	r1, r1
    73be:	4249      	negs	r1, r1
    73c0:	185b      	adds	r3, r3, r1
    73c2:	1c11      	adds	r1, r2, #0
    73c4:	021a      	lsls	r2, r3, #8
    73c6:	d534      	bpl.n	7432 <__aeabi_ddiv+0x5ee>
    73c8:	9c03      	ldr	r4, [sp, #12]
    73ca:	2201      	movs	r2, #1
    73cc:	4022      	ands	r2, r4
    73ce:	2400      	movs	r4, #0
    73d0:	2501      	movs	r5, #1
    73d2:	46a1      	mov	r9, r4
    73d4:	e5fe      	b.n	6fd4 <__aeabi_ddiv+0x190>
    73d6:	9f00      	ldr	r7, [sp, #0]
    73d8:	2102      	movs	r1, #2
    73da:	4249      	negs	r1, r1
    73dc:	44b9      	add	r9, r7
    73de:	448b      	add	fp, r1
    73e0:	45b9      	cmp	r9, r7
    73e2:	4189      	sbcs	r1, r1
    73e4:	4249      	negs	r1, r1
    73e6:	1909      	adds	r1, r1, r4
    73e8:	18cb      	adds	r3, r1, r3
    73ea:	e6a4      	b.n	7136 <__aeabi_ddiv+0x2f2>
    73ec:	9d00      	ldr	r5, [sp, #0]
    73ee:	1e88      	subs	r0, r1, #2
    73f0:	0069      	lsls	r1, r5, #1
    73f2:	42a9      	cmp	r1, r5
    73f4:	41ad      	sbcs	r5, r5
    73f6:	426d      	negs	r5, r5
    73f8:	192c      	adds	r4, r5, r4
    73fa:	1936      	adds	r6, r6, r4
    73fc:	9100      	str	r1, [sp, #0]
    73fe:	e73a      	b.n	7276 <__aeabi_ddiv+0x432>
    7400:	2b00      	cmp	r3, #0
    7402:	d000      	beq.n	7406 <__aeabi_ddiv+0x5c2>
    7404:	e733      	b.n	726e <__aeabi_ddiv+0x42a>
    7406:	2400      	movs	r4, #0
    7408:	9400      	str	r4, [sp, #0]
    740a:	e737      	b.n	727c <__aeabi_ddiv+0x438>
    740c:	4a1f      	ldr	r2, [pc, #124]	; (748c <__aeabi_ddiv+0x648>)
    740e:	9c04      	ldr	r4, [sp, #16]
    7410:	465d      	mov	r5, fp
    7412:	1b12      	subs	r2, r2, r4
    7414:	40d5      	lsrs	r5, r2
    7416:	1c2a      	adds	r2, r5, #0
    7418:	2b20      	cmp	r3, #32
    741a:	d01f      	beq.n	745c <__aeabi_ddiv+0x618>
    741c:	4e1c      	ldr	r6, [pc, #112]	; (7490 <__aeabi_ddiv+0x64c>)
    741e:	465f      	mov	r7, fp
    7420:	19a3      	adds	r3, r4, r6
    7422:	409f      	lsls	r7, r3
    7424:	1c3b      	adds	r3, r7, #0
    7426:	4319      	orrs	r1, r3
    7428:	1e4b      	subs	r3, r1, #1
    742a:	4199      	sbcs	r1, r3
    742c:	4311      	orrs	r1, r2
    742e:	2300      	movs	r3, #0
    7430:	e7bc      	b.n	73ac <__aeabi_ddiv+0x568>
    7432:	075a      	lsls	r2, r3, #29
    7434:	08c9      	lsrs	r1, r1, #3
    7436:	430a      	orrs	r2, r1
    7438:	9f03      	ldr	r7, [sp, #12]
    743a:	4691      	mov	r9, r2
    743c:	025b      	lsls	r3, r3, #9
    743e:	2201      	movs	r2, #1
    7440:	0b1c      	lsrs	r4, r3, #12
    7442:	403a      	ands	r2, r7
    7444:	2500      	movs	r5, #0
    7446:	e5c5      	b.n	6fd4 <__aeabi_ddiv+0x190>
    7448:	454e      	cmp	r6, r9
    744a:	d8c4      	bhi.n	73d6 <__aeabi_ddiv+0x592>
    744c:	4693      	mov	fp, r2
    744e:	2100      	movs	r1, #0
    7450:	e672      	b.n	7138 <__aeabi_ddiv+0x2f4>
    7452:	9f00      	ldr	r7, [sp, #0]
    7454:	429f      	cmp	r7, r3
    7456:	d3c9      	bcc.n	73ec <__aeabi_ddiv+0x5a8>
    7458:	1c01      	adds	r1, r0, #0
    745a:	e70f      	b.n	727c <__aeabi_ddiv+0x438>
    745c:	2300      	movs	r3, #0
    745e:	e7e2      	b.n	7426 <__aeabi_ddiv+0x5e2>
    7460:	2480      	movs	r4, #128	; 0x80
    7462:	0324      	lsls	r4, r4, #12
    7464:	465f      	mov	r7, fp
    7466:	433c      	orrs	r4, r7
    7468:	0324      	lsls	r4, r4, #12
    746a:	0b24      	lsrs	r4, r4, #12
    746c:	9a01      	ldr	r2, [sp, #4]
    746e:	4689      	mov	r9, r1
    7470:	4d03      	ldr	r5, [pc, #12]	; (7480 <__aeabi_ddiv+0x63c>)
    7472:	e5af      	b.n	6fd4 <__aeabi_ddiv+0x190>
    7474:	000003ff 	.word	0x000003ff
    7478:	feffffff 	.word	0xfeffffff
    747c:	000007fe 	.word	0x000007fe
    7480:	000007ff 	.word	0x000007ff
    7484:	fffffc02 	.word	0xfffffc02
    7488:	0000041e 	.word	0x0000041e
    748c:	fffffbe2 	.word	0xfffffbe2
    7490:	0000043e 	.word	0x0000043e

00007494 <__aeabi_dsub>:
    7494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7496:	465f      	mov	r7, fp
    7498:	4656      	mov	r6, sl
    749a:	4644      	mov	r4, r8
    749c:	464d      	mov	r5, r9
    749e:	b4f0      	push	{r4, r5, r6, r7}
    74a0:	030c      	lsls	r4, r1, #12
    74a2:	004d      	lsls	r5, r1, #1
    74a4:	0fcf      	lsrs	r7, r1, #31
    74a6:	0a61      	lsrs	r1, r4, #9
    74a8:	0f44      	lsrs	r4, r0, #29
    74aa:	4321      	orrs	r1, r4
    74ac:	00c4      	lsls	r4, r0, #3
    74ae:	0318      	lsls	r0, r3, #12
    74b0:	0fde      	lsrs	r6, r3, #31
    74b2:	4680      	mov	r8, r0
    74b4:	46b4      	mov	ip, r6
    74b6:	4646      	mov	r6, r8
    74b8:	0058      	lsls	r0, r3, #1
    74ba:	0a76      	lsrs	r6, r6, #9
    74bc:	0f53      	lsrs	r3, r2, #29
    74be:	4333      	orrs	r3, r6
    74c0:	00d6      	lsls	r6, r2, #3
    74c2:	4ad1      	ldr	r2, [pc, #836]	; (7808 <__aeabi_dsub+0x374>)
    74c4:	0d6d      	lsrs	r5, r5, #21
    74c6:	46ba      	mov	sl, r7
    74c8:	0d40      	lsrs	r0, r0, #21
    74ca:	46b3      	mov	fp, r6
    74cc:	4290      	cmp	r0, r2
    74ce:	d100      	bne.n	74d2 <__aeabi_dsub+0x3e>
    74d0:	e0f5      	b.n	76be <__aeabi_dsub+0x22a>
    74d2:	4662      	mov	r2, ip
    74d4:	2601      	movs	r6, #1
    74d6:	4072      	eors	r2, r6
    74d8:	4694      	mov	ip, r2
    74da:	4567      	cmp	r7, ip
    74dc:	d100      	bne.n	74e0 <__aeabi_dsub+0x4c>
    74de:	e0ab      	b.n	7638 <__aeabi_dsub+0x1a4>
    74e0:	1a2f      	subs	r7, r5, r0
    74e2:	2f00      	cmp	r7, #0
    74e4:	dc00      	bgt.n	74e8 <__aeabi_dsub+0x54>
    74e6:	e111      	b.n	770c <__aeabi_dsub+0x278>
    74e8:	2800      	cmp	r0, #0
    74ea:	d13e      	bne.n	756a <__aeabi_dsub+0xd6>
    74ec:	4658      	mov	r0, fp
    74ee:	4318      	orrs	r0, r3
    74f0:	d000      	beq.n	74f4 <__aeabi_dsub+0x60>
    74f2:	e0f1      	b.n	76d8 <__aeabi_dsub+0x244>
    74f4:	0760      	lsls	r0, r4, #29
    74f6:	d100      	bne.n	74fa <__aeabi_dsub+0x66>
    74f8:	e097      	b.n	762a <__aeabi_dsub+0x196>
    74fa:	230f      	movs	r3, #15
    74fc:	4023      	ands	r3, r4
    74fe:	2b04      	cmp	r3, #4
    7500:	d100      	bne.n	7504 <__aeabi_dsub+0x70>
    7502:	e122      	b.n	774a <__aeabi_dsub+0x2b6>
    7504:	1d22      	adds	r2, r4, #4
    7506:	42a2      	cmp	r2, r4
    7508:	41a4      	sbcs	r4, r4
    750a:	4264      	negs	r4, r4
    750c:	2380      	movs	r3, #128	; 0x80
    750e:	1909      	adds	r1, r1, r4
    7510:	041b      	lsls	r3, r3, #16
    7512:	2701      	movs	r7, #1
    7514:	4650      	mov	r0, sl
    7516:	400b      	ands	r3, r1
    7518:	4007      	ands	r7, r0
    751a:	1c14      	adds	r4, r2, #0
    751c:	2b00      	cmp	r3, #0
    751e:	d100      	bne.n	7522 <__aeabi_dsub+0x8e>
    7520:	e079      	b.n	7616 <__aeabi_dsub+0x182>
    7522:	4bb9      	ldr	r3, [pc, #740]	; (7808 <__aeabi_dsub+0x374>)
    7524:	3501      	adds	r5, #1
    7526:	429d      	cmp	r5, r3
    7528:	d100      	bne.n	752c <__aeabi_dsub+0x98>
    752a:	e10b      	b.n	7744 <__aeabi_dsub+0x2b0>
    752c:	4bb7      	ldr	r3, [pc, #732]	; (780c <__aeabi_dsub+0x378>)
    752e:	08e4      	lsrs	r4, r4, #3
    7530:	4019      	ands	r1, r3
    7532:	0748      	lsls	r0, r1, #29
    7534:	0249      	lsls	r1, r1, #9
    7536:	4304      	orrs	r4, r0
    7538:	0b0b      	lsrs	r3, r1, #12
    753a:	2000      	movs	r0, #0
    753c:	2100      	movs	r1, #0
    753e:	031b      	lsls	r3, r3, #12
    7540:	0b1a      	lsrs	r2, r3, #12
    7542:	0d0b      	lsrs	r3, r1, #20
    7544:	056d      	lsls	r5, r5, #21
    7546:	051b      	lsls	r3, r3, #20
    7548:	4313      	orrs	r3, r2
    754a:	086a      	lsrs	r2, r5, #1
    754c:	4db0      	ldr	r5, [pc, #704]	; (7810 <__aeabi_dsub+0x37c>)
    754e:	07ff      	lsls	r7, r7, #31
    7550:	401d      	ands	r5, r3
    7552:	4315      	orrs	r5, r2
    7554:	006d      	lsls	r5, r5, #1
    7556:	086d      	lsrs	r5, r5, #1
    7558:	1c29      	adds	r1, r5, #0
    755a:	4339      	orrs	r1, r7
    755c:	1c20      	adds	r0, r4, #0
    755e:	bc3c      	pop	{r2, r3, r4, r5}
    7560:	4690      	mov	r8, r2
    7562:	4699      	mov	r9, r3
    7564:	46a2      	mov	sl, r4
    7566:	46ab      	mov	fp, r5
    7568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    756a:	48a7      	ldr	r0, [pc, #668]	; (7808 <__aeabi_dsub+0x374>)
    756c:	4285      	cmp	r5, r0
    756e:	d0c1      	beq.n	74f4 <__aeabi_dsub+0x60>
    7570:	2080      	movs	r0, #128	; 0x80
    7572:	0400      	lsls	r0, r0, #16
    7574:	4303      	orrs	r3, r0
    7576:	2f38      	cmp	r7, #56	; 0x38
    7578:	dd00      	ble.n	757c <__aeabi_dsub+0xe8>
    757a:	e0fd      	b.n	7778 <__aeabi_dsub+0x2e4>
    757c:	2f1f      	cmp	r7, #31
    757e:	dd00      	ble.n	7582 <__aeabi_dsub+0xee>
    7580:	e131      	b.n	77e6 <__aeabi_dsub+0x352>
    7582:	2020      	movs	r0, #32
    7584:	1bc0      	subs	r0, r0, r7
    7586:	1c1a      	adds	r2, r3, #0
    7588:	465e      	mov	r6, fp
    758a:	4082      	lsls	r2, r0
    758c:	40fe      	lsrs	r6, r7
    758e:	4332      	orrs	r2, r6
    7590:	4694      	mov	ip, r2
    7592:	465a      	mov	r2, fp
    7594:	4082      	lsls	r2, r0
    7596:	1c10      	adds	r0, r2, #0
    7598:	1e42      	subs	r2, r0, #1
    759a:	4190      	sbcs	r0, r2
    759c:	40fb      	lsrs	r3, r7
    759e:	4662      	mov	r2, ip
    75a0:	4302      	orrs	r2, r0
    75a2:	1c1f      	adds	r7, r3, #0
    75a4:	1aa2      	subs	r2, r4, r2
    75a6:	4294      	cmp	r4, r2
    75a8:	41a4      	sbcs	r4, r4
    75aa:	4264      	negs	r4, r4
    75ac:	1bc9      	subs	r1, r1, r7
    75ae:	1b09      	subs	r1, r1, r4
    75b0:	1c14      	adds	r4, r2, #0
    75b2:	020a      	lsls	r2, r1, #8
    75b4:	d59e      	bpl.n	74f4 <__aeabi_dsub+0x60>
    75b6:	0249      	lsls	r1, r1, #9
    75b8:	0a4f      	lsrs	r7, r1, #9
    75ba:	2f00      	cmp	r7, #0
    75bc:	d100      	bne.n	75c0 <__aeabi_dsub+0x12c>
    75be:	e0d6      	b.n	776e <__aeabi_dsub+0x2da>
    75c0:	1c38      	adds	r0, r7, #0
    75c2:	f7fb fb1f 	bl	2c04 <__clzsi2>
    75c6:	1c02      	adds	r2, r0, #0
    75c8:	3a08      	subs	r2, #8
    75ca:	2a1f      	cmp	r2, #31
    75cc:	dd00      	ble.n	75d0 <__aeabi_dsub+0x13c>
    75ce:	e0c3      	b.n	7758 <__aeabi_dsub+0x2c4>
    75d0:	2128      	movs	r1, #40	; 0x28
    75d2:	1c23      	adds	r3, r4, #0
    75d4:	1a09      	subs	r1, r1, r0
    75d6:	4097      	lsls	r7, r2
    75d8:	40cb      	lsrs	r3, r1
    75da:	431f      	orrs	r7, r3
    75dc:	4094      	lsls	r4, r2
    75de:	4295      	cmp	r5, r2
    75e0:	dd00      	ble.n	75e4 <__aeabi_dsub+0x150>
    75e2:	e0c0      	b.n	7766 <__aeabi_dsub+0x2d2>
    75e4:	1b55      	subs	r5, r2, r5
    75e6:	1c69      	adds	r1, r5, #1
    75e8:	291f      	cmp	r1, #31
    75ea:	dd00      	ble.n	75ee <__aeabi_dsub+0x15a>
    75ec:	e0ea      	b.n	77c4 <__aeabi_dsub+0x330>
    75ee:	221f      	movs	r2, #31
    75f0:	1b55      	subs	r5, r2, r5
    75f2:	1c3b      	adds	r3, r7, #0
    75f4:	1c22      	adds	r2, r4, #0
    75f6:	40ab      	lsls	r3, r5
    75f8:	40ca      	lsrs	r2, r1
    75fa:	40ac      	lsls	r4, r5
    75fc:	1e65      	subs	r5, r4, #1
    75fe:	41ac      	sbcs	r4, r5
    7600:	4313      	orrs	r3, r2
    7602:	40cf      	lsrs	r7, r1
    7604:	431c      	orrs	r4, r3
    7606:	1c39      	adds	r1, r7, #0
    7608:	2500      	movs	r5, #0
    760a:	e773      	b.n	74f4 <__aeabi_dsub+0x60>
    760c:	2408      	movs	r4, #8
    760e:	4981      	ldr	r1, [pc, #516]	; (7814 <__aeabi_dsub+0x380>)
    7610:	4d7d      	ldr	r5, [pc, #500]	; (7808 <__aeabi_dsub+0x374>)
    7612:	2700      	movs	r7, #0
    7614:	4264      	negs	r4, r4
    7616:	4b7c      	ldr	r3, [pc, #496]	; (7808 <__aeabi_dsub+0x374>)
    7618:	0748      	lsls	r0, r1, #29
    761a:	08e4      	lsrs	r4, r4, #3
    761c:	4304      	orrs	r4, r0
    761e:	08c9      	lsrs	r1, r1, #3
    7620:	429d      	cmp	r5, r3
    7622:	d050      	beq.n	76c6 <__aeabi_dsub+0x232>
    7624:	0309      	lsls	r1, r1, #12
    7626:	0b0b      	lsrs	r3, r1, #12
    7628:	e787      	b.n	753a <__aeabi_dsub+0xa6>
    762a:	2380      	movs	r3, #128	; 0x80
    762c:	041b      	lsls	r3, r3, #16
    762e:	2701      	movs	r7, #1
    7630:	4652      	mov	r2, sl
    7632:	400b      	ands	r3, r1
    7634:	4017      	ands	r7, r2
    7636:	e771      	b.n	751c <__aeabi_dsub+0x88>
    7638:	1a2a      	subs	r2, r5, r0
    763a:	4694      	mov	ip, r2
    763c:	2a00      	cmp	r2, #0
    763e:	dc00      	bgt.n	7642 <__aeabi_dsub+0x1ae>
    7640:	e0a1      	b.n	7786 <__aeabi_dsub+0x2f2>
    7642:	2800      	cmp	r0, #0
    7644:	d054      	beq.n	76f0 <__aeabi_dsub+0x25c>
    7646:	4870      	ldr	r0, [pc, #448]	; (7808 <__aeabi_dsub+0x374>)
    7648:	4285      	cmp	r5, r0
    764a:	d100      	bne.n	764e <__aeabi_dsub+0x1ba>
    764c:	e752      	b.n	74f4 <__aeabi_dsub+0x60>
    764e:	2080      	movs	r0, #128	; 0x80
    7650:	0400      	lsls	r0, r0, #16
    7652:	4303      	orrs	r3, r0
    7654:	4660      	mov	r0, ip
    7656:	2838      	cmp	r0, #56	; 0x38
    7658:	dd00      	ble.n	765c <__aeabi_dsub+0x1c8>
    765a:	e110      	b.n	787e <__aeabi_dsub+0x3ea>
    765c:	281f      	cmp	r0, #31
    765e:	dd00      	ble.n	7662 <__aeabi_dsub+0x1ce>
    7660:	e159      	b.n	7916 <__aeabi_dsub+0x482>
    7662:	4662      	mov	r2, ip
    7664:	2020      	movs	r0, #32
    7666:	1a80      	subs	r0, r0, r2
    7668:	1c1e      	adds	r6, r3, #0
    766a:	4086      	lsls	r6, r0
    766c:	46b1      	mov	r9, r6
    766e:	465e      	mov	r6, fp
    7670:	40d6      	lsrs	r6, r2
    7672:	464a      	mov	r2, r9
    7674:	4332      	orrs	r2, r6
    7676:	465e      	mov	r6, fp
    7678:	4086      	lsls	r6, r0
    767a:	4690      	mov	r8, r2
    767c:	1c30      	adds	r0, r6, #0
    767e:	1e42      	subs	r2, r0, #1
    7680:	4190      	sbcs	r0, r2
    7682:	4642      	mov	r2, r8
    7684:	4302      	orrs	r2, r0
    7686:	4660      	mov	r0, ip
    7688:	40c3      	lsrs	r3, r0
    768a:	1912      	adds	r2, r2, r4
    768c:	42a2      	cmp	r2, r4
    768e:	41a4      	sbcs	r4, r4
    7690:	4264      	negs	r4, r4
    7692:	1859      	adds	r1, r3, r1
    7694:	1909      	adds	r1, r1, r4
    7696:	1c14      	adds	r4, r2, #0
    7698:	0208      	lsls	r0, r1, #8
    769a:	d400      	bmi.n	769e <__aeabi_dsub+0x20a>
    769c:	e72a      	b.n	74f4 <__aeabi_dsub+0x60>
    769e:	4b5a      	ldr	r3, [pc, #360]	; (7808 <__aeabi_dsub+0x374>)
    76a0:	3501      	adds	r5, #1
    76a2:	429d      	cmp	r5, r3
    76a4:	d100      	bne.n	76a8 <__aeabi_dsub+0x214>
    76a6:	e133      	b.n	7910 <__aeabi_dsub+0x47c>
    76a8:	4b58      	ldr	r3, [pc, #352]	; (780c <__aeabi_dsub+0x378>)
    76aa:	0860      	lsrs	r0, r4, #1
    76ac:	4019      	ands	r1, r3
    76ae:	2301      	movs	r3, #1
    76b0:	4023      	ands	r3, r4
    76b2:	1c1c      	adds	r4, r3, #0
    76b4:	4304      	orrs	r4, r0
    76b6:	07cb      	lsls	r3, r1, #31
    76b8:	431c      	orrs	r4, r3
    76ba:	0849      	lsrs	r1, r1, #1
    76bc:	e71a      	b.n	74f4 <__aeabi_dsub+0x60>
    76be:	431e      	orrs	r6, r3
    76c0:	d000      	beq.n	76c4 <__aeabi_dsub+0x230>
    76c2:	e70a      	b.n	74da <__aeabi_dsub+0x46>
    76c4:	e705      	b.n	74d2 <__aeabi_dsub+0x3e>
    76c6:	1c23      	adds	r3, r4, #0
    76c8:	430b      	orrs	r3, r1
    76ca:	d03b      	beq.n	7744 <__aeabi_dsub+0x2b0>
    76cc:	2380      	movs	r3, #128	; 0x80
    76ce:	031b      	lsls	r3, r3, #12
    76d0:	430b      	orrs	r3, r1
    76d2:	031b      	lsls	r3, r3, #12
    76d4:	0b1b      	lsrs	r3, r3, #12
    76d6:	e730      	b.n	753a <__aeabi_dsub+0xa6>
    76d8:	3f01      	subs	r7, #1
    76da:	2f00      	cmp	r7, #0
    76dc:	d16d      	bne.n	77ba <__aeabi_dsub+0x326>
    76de:	465e      	mov	r6, fp
    76e0:	1ba2      	subs	r2, r4, r6
    76e2:	4294      	cmp	r4, r2
    76e4:	41a4      	sbcs	r4, r4
    76e6:	4264      	negs	r4, r4
    76e8:	1ac9      	subs	r1, r1, r3
    76ea:	1b09      	subs	r1, r1, r4
    76ec:	1c14      	adds	r4, r2, #0
    76ee:	e760      	b.n	75b2 <__aeabi_dsub+0x11e>
    76f0:	4658      	mov	r0, fp
    76f2:	4318      	orrs	r0, r3
    76f4:	d100      	bne.n	76f8 <__aeabi_dsub+0x264>
    76f6:	e6fd      	b.n	74f4 <__aeabi_dsub+0x60>
    76f8:	2601      	movs	r6, #1
    76fa:	4276      	negs	r6, r6
    76fc:	44b4      	add	ip, r6
    76fe:	4660      	mov	r0, ip
    7700:	2800      	cmp	r0, #0
    7702:	d000      	beq.n	7706 <__aeabi_dsub+0x272>
    7704:	e0d2      	b.n	78ac <__aeabi_dsub+0x418>
    7706:	465e      	mov	r6, fp
    7708:	1932      	adds	r2, r6, r4
    770a:	e7bf      	b.n	768c <__aeabi_dsub+0x1f8>
    770c:	2f00      	cmp	r7, #0
    770e:	d000      	beq.n	7712 <__aeabi_dsub+0x27e>
    7710:	e082      	b.n	7818 <__aeabi_dsub+0x384>
    7712:	1c68      	adds	r0, r5, #1
    7714:	0540      	lsls	r0, r0, #21
    7716:	0d40      	lsrs	r0, r0, #21
    7718:	2801      	cmp	r0, #1
    771a:	dc00      	bgt.n	771e <__aeabi_dsub+0x28a>
    771c:	e0ea      	b.n	78f4 <__aeabi_dsub+0x460>
    771e:	465a      	mov	r2, fp
    7720:	1aa2      	subs	r2, r4, r2
    7722:	4294      	cmp	r4, r2
    7724:	41bf      	sbcs	r7, r7
    7726:	1ac8      	subs	r0, r1, r3
    7728:	427f      	negs	r7, r7
    772a:	1bc7      	subs	r7, r0, r7
    772c:	023e      	lsls	r6, r7, #8
    772e:	d400      	bmi.n	7732 <__aeabi_dsub+0x29e>
    7730:	e09a      	b.n	7868 <__aeabi_dsub+0x3d4>
    7732:	4658      	mov	r0, fp
    7734:	1b04      	subs	r4, r0, r4
    7736:	45a3      	cmp	fp, r4
    7738:	4192      	sbcs	r2, r2
    773a:	1a59      	subs	r1, r3, r1
    773c:	4252      	negs	r2, r2
    773e:	1a8f      	subs	r7, r1, r2
    7740:	46e2      	mov	sl, ip
    7742:	e73a      	b.n	75ba <__aeabi_dsub+0x126>
    7744:	2300      	movs	r3, #0
    7746:	2400      	movs	r4, #0
    7748:	e6f7      	b.n	753a <__aeabi_dsub+0xa6>
    774a:	2380      	movs	r3, #128	; 0x80
    774c:	041b      	lsls	r3, r3, #16
    774e:	2701      	movs	r7, #1
    7750:	4656      	mov	r6, sl
    7752:	400b      	ands	r3, r1
    7754:	4037      	ands	r7, r6
    7756:	e6e1      	b.n	751c <__aeabi_dsub+0x88>
    7758:	1c27      	adds	r7, r4, #0
    775a:	3828      	subs	r0, #40	; 0x28
    775c:	4087      	lsls	r7, r0
    775e:	2400      	movs	r4, #0
    7760:	4295      	cmp	r5, r2
    7762:	dc00      	bgt.n	7766 <__aeabi_dsub+0x2d2>
    7764:	e73e      	b.n	75e4 <__aeabi_dsub+0x150>
    7766:	4929      	ldr	r1, [pc, #164]	; (780c <__aeabi_dsub+0x378>)
    7768:	1aad      	subs	r5, r5, r2
    776a:	4039      	ands	r1, r7
    776c:	e6c2      	b.n	74f4 <__aeabi_dsub+0x60>
    776e:	1c20      	adds	r0, r4, #0
    7770:	f7fb fa48 	bl	2c04 <__clzsi2>
    7774:	3020      	adds	r0, #32
    7776:	e726      	b.n	75c6 <__aeabi_dsub+0x132>
    7778:	465a      	mov	r2, fp
    777a:	431a      	orrs	r2, r3
    777c:	1e53      	subs	r3, r2, #1
    777e:	419a      	sbcs	r2, r3
    7780:	b2d2      	uxtb	r2, r2
    7782:	2700      	movs	r7, #0
    7784:	e70e      	b.n	75a4 <__aeabi_dsub+0x110>
    7786:	2a00      	cmp	r2, #0
    7788:	d000      	beq.n	778c <__aeabi_dsub+0x2f8>
    778a:	e0e0      	b.n	794e <__aeabi_dsub+0x4ba>
    778c:	1c68      	adds	r0, r5, #1
    778e:	0546      	lsls	r6, r0, #21
    7790:	0d76      	lsrs	r6, r6, #21
    7792:	2e01      	cmp	r6, #1
    7794:	dc00      	bgt.n	7798 <__aeabi_dsub+0x304>
    7796:	e092      	b.n	78be <__aeabi_dsub+0x42a>
    7798:	4d1b      	ldr	r5, [pc, #108]	; (7808 <__aeabi_dsub+0x374>)
    779a:	42a8      	cmp	r0, r5
    779c:	d100      	bne.n	77a0 <__aeabi_dsub+0x30c>
    779e:	e0f7      	b.n	7990 <__aeabi_dsub+0x4fc>
    77a0:	465e      	mov	r6, fp
    77a2:	1932      	adds	r2, r6, r4
    77a4:	42a2      	cmp	r2, r4
    77a6:	41a4      	sbcs	r4, r4
    77a8:	4264      	negs	r4, r4
    77aa:	1859      	adds	r1, r3, r1
    77ac:	1909      	adds	r1, r1, r4
    77ae:	07cc      	lsls	r4, r1, #31
    77b0:	0852      	lsrs	r2, r2, #1
    77b2:	4314      	orrs	r4, r2
    77b4:	0849      	lsrs	r1, r1, #1
    77b6:	1c05      	adds	r5, r0, #0
    77b8:	e69c      	b.n	74f4 <__aeabi_dsub+0x60>
    77ba:	4813      	ldr	r0, [pc, #76]	; (7808 <__aeabi_dsub+0x374>)
    77bc:	4285      	cmp	r5, r0
    77be:	d000      	beq.n	77c2 <__aeabi_dsub+0x32e>
    77c0:	e6d9      	b.n	7576 <__aeabi_dsub+0xe2>
    77c2:	e697      	b.n	74f4 <__aeabi_dsub+0x60>
    77c4:	1c2b      	adds	r3, r5, #0
    77c6:	3b1f      	subs	r3, #31
    77c8:	1c3e      	adds	r6, r7, #0
    77ca:	40de      	lsrs	r6, r3
    77cc:	1c33      	adds	r3, r6, #0
    77ce:	2920      	cmp	r1, #32
    77d0:	d071      	beq.n	78b6 <__aeabi_dsub+0x422>
    77d2:	223f      	movs	r2, #63	; 0x3f
    77d4:	1b55      	subs	r5, r2, r5
    77d6:	40af      	lsls	r7, r5
    77d8:	433c      	orrs	r4, r7
    77da:	1e60      	subs	r0, r4, #1
    77dc:	4184      	sbcs	r4, r0
    77de:	431c      	orrs	r4, r3
    77e0:	2100      	movs	r1, #0
    77e2:	2500      	movs	r5, #0
    77e4:	e686      	b.n	74f4 <__aeabi_dsub+0x60>
    77e6:	1c38      	adds	r0, r7, #0
    77e8:	3820      	subs	r0, #32
    77ea:	1c1e      	adds	r6, r3, #0
    77ec:	40c6      	lsrs	r6, r0
    77ee:	1c30      	adds	r0, r6, #0
    77f0:	2f20      	cmp	r7, #32
    77f2:	d062      	beq.n	78ba <__aeabi_dsub+0x426>
    77f4:	2240      	movs	r2, #64	; 0x40
    77f6:	1bd7      	subs	r7, r2, r7
    77f8:	40bb      	lsls	r3, r7
    77fa:	465a      	mov	r2, fp
    77fc:	431a      	orrs	r2, r3
    77fe:	1e53      	subs	r3, r2, #1
    7800:	419a      	sbcs	r2, r3
    7802:	4302      	orrs	r2, r0
    7804:	2700      	movs	r7, #0
    7806:	e6cd      	b.n	75a4 <__aeabi_dsub+0x110>
    7808:	000007ff 	.word	0x000007ff
    780c:	ff7fffff 	.word	0xff7fffff
    7810:	800fffff 	.word	0x800fffff
    7814:	007fffff 	.word	0x007fffff
    7818:	2d00      	cmp	r5, #0
    781a:	d037      	beq.n	788c <__aeabi_dsub+0x3f8>
    781c:	4db6      	ldr	r5, [pc, #728]	; (7af8 <__aeabi_dsub+0x664>)
    781e:	42a8      	cmp	r0, r5
    7820:	d100      	bne.n	7824 <__aeabi_dsub+0x390>
    7822:	e08f      	b.n	7944 <__aeabi_dsub+0x4b0>
    7824:	2580      	movs	r5, #128	; 0x80
    7826:	042d      	lsls	r5, r5, #16
    7828:	427f      	negs	r7, r7
    782a:	4329      	orrs	r1, r5
    782c:	2f38      	cmp	r7, #56	; 0x38
    782e:	dd00      	ble.n	7832 <__aeabi_dsub+0x39e>
    7830:	e0a8      	b.n	7984 <__aeabi_dsub+0x4f0>
    7832:	2f1f      	cmp	r7, #31
    7834:	dd00      	ble.n	7838 <__aeabi_dsub+0x3a4>
    7836:	e124      	b.n	7a82 <__aeabi_dsub+0x5ee>
    7838:	2520      	movs	r5, #32
    783a:	1bed      	subs	r5, r5, r7
    783c:	1c0e      	adds	r6, r1, #0
    783e:	40ae      	lsls	r6, r5
    7840:	46b0      	mov	r8, r6
    7842:	1c26      	adds	r6, r4, #0
    7844:	40fe      	lsrs	r6, r7
    7846:	4642      	mov	r2, r8
    7848:	40ac      	lsls	r4, r5
    784a:	4316      	orrs	r6, r2
    784c:	1e65      	subs	r5, r4, #1
    784e:	41ac      	sbcs	r4, r5
    7850:	4334      	orrs	r4, r6
    7852:	40f9      	lsrs	r1, r7
    7854:	465a      	mov	r2, fp
    7856:	1b14      	subs	r4, r2, r4
    7858:	45a3      	cmp	fp, r4
    785a:	4192      	sbcs	r2, r2
    785c:	1a5b      	subs	r3, r3, r1
    785e:	4252      	negs	r2, r2
    7860:	1a99      	subs	r1, r3, r2
    7862:	1c05      	adds	r5, r0, #0
    7864:	46e2      	mov	sl, ip
    7866:	e6a4      	b.n	75b2 <__aeabi_dsub+0x11e>
    7868:	1c13      	adds	r3, r2, #0
    786a:	433b      	orrs	r3, r7
    786c:	1c14      	adds	r4, r2, #0
    786e:	2b00      	cmp	r3, #0
    7870:	d000      	beq.n	7874 <__aeabi_dsub+0x3e0>
    7872:	e6a2      	b.n	75ba <__aeabi_dsub+0x126>
    7874:	2700      	movs	r7, #0
    7876:	2100      	movs	r1, #0
    7878:	2400      	movs	r4, #0
    787a:	2500      	movs	r5, #0
    787c:	e6cb      	b.n	7616 <__aeabi_dsub+0x182>
    787e:	465a      	mov	r2, fp
    7880:	431a      	orrs	r2, r3
    7882:	1e53      	subs	r3, r2, #1
    7884:	419a      	sbcs	r2, r3
    7886:	b2d2      	uxtb	r2, r2
    7888:	2300      	movs	r3, #0
    788a:	e6fe      	b.n	768a <__aeabi_dsub+0x1f6>
    788c:	1c0d      	adds	r5, r1, #0
    788e:	4325      	orrs	r5, r4
    7890:	d058      	beq.n	7944 <__aeabi_dsub+0x4b0>
    7892:	43ff      	mvns	r7, r7
    7894:	2f00      	cmp	r7, #0
    7896:	d151      	bne.n	793c <__aeabi_dsub+0x4a8>
    7898:	465a      	mov	r2, fp
    789a:	1b14      	subs	r4, r2, r4
    789c:	45a3      	cmp	fp, r4
    789e:	4192      	sbcs	r2, r2
    78a0:	1a59      	subs	r1, r3, r1
    78a2:	4252      	negs	r2, r2
    78a4:	1a89      	subs	r1, r1, r2
    78a6:	1c05      	adds	r5, r0, #0
    78a8:	46e2      	mov	sl, ip
    78aa:	e682      	b.n	75b2 <__aeabi_dsub+0x11e>
    78ac:	4892      	ldr	r0, [pc, #584]	; (7af8 <__aeabi_dsub+0x664>)
    78ae:	4285      	cmp	r5, r0
    78b0:	d000      	beq.n	78b4 <__aeabi_dsub+0x420>
    78b2:	e6cf      	b.n	7654 <__aeabi_dsub+0x1c0>
    78b4:	e61e      	b.n	74f4 <__aeabi_dsub+0x60>
    78b6:	2700      	movs	r7, #0
    78b8:	e78e      	b.n	77d8 <__aeabi_dsub+0x344>
    78ba:	2300      	movs	r3, #0
    78bc:	e79d      	b.n	77fa <__aeabi_dsub+0x366>
    78be:	1c08      	adds	r0, r1, #0
    78c0:	4320      	orrs	r0, r4
    78c2:	2d00      	cmp	r5, #0
    78c4:	d000      	beq.n	78c8 <__aeabi_dsub+0x434>
    78c6:	e0c2      	b.n	7a4e <__aeabi_dsub+0x5ba>
    78c8:	2800      	cmp	r0, #0
    78ca:	d100      	bne.n	78ce <__aeabi_dsub+0x43a>
    78cc:	e0ef      	b.n	7aae <__aeabi_dsub+0x61a>
    78ce:	4658      	mov	r0, fp
    78d0:	4318      	orrs	r0, r3
    78d2:	d100      	bne.n	78d6 <__aeabi_dsub+0x442>
    78d4:	e60e      	b.n	74f4 <__aeabi_dsub+0x60>
    78d6:	4658      	mov	r0, fp
    78d8:	1902      	adds	r2, r0, r4
    78da:	42a2      	cmp	r2, r4
    78dc:	41a4      	sbcs	r4, r4
    78de:	4264      	negs	r4, r4
    78e0:	1859      	adds	r1, r3, r1
    78e2:	1909      	adds	r1, r1, r4
    78e4:	1c14      	adds	r4, r2, #0
    78e6:	020a      	lsls	r2, r1, #8
    78e8:	d400      	bmi.n	78ec <__aeabi_dsub+0x458>
    78ea:	e603      	b.n	74f4 <__aeabi_dsub+0x60>
    78ec:	4b83      	ldr	r3, [pc, #524]	; (7afc <__aeabi_dsub+0x668>)
    78ee:	2501      	movs	r5, #1
    78f0:	4019      	ands	r1, r3
    78f2:	e5ff      	b.n	74f4 <__aeabi_dsub+0x60>
    78f4:	1c08      	adds	r0, r1, #0
    78f6:	4320      	orrs	r0, r4
    78f8:	2d00      	cmp	r5, #0
    78fa:	d138      	bne.n	796e <__aeabi_dsub+0x4da>
    78fc:	2800      	cmp	r0, #0
    78fe:	d16f      	bne.n	79e0 <__aeabi_dsub+0x54c>
    7900:	4659      	mov	r1, fp
    7902:	4319      	orrs	r1, r3
    7904:	d003      	beq.n	790e <__aeabi_dsub+0x47a>
    7906:	1c19      	adds	r1, r3, #0
    7908:	465c      	mov	r4, fp
    790a:	46e2      	mov	sl, ip
    790c:	e5f2      	b.n	74f4 <__aeabi_dsub+0x60>
    790e:	2700      	movs	r7, #0
    7910:	2100      	movs	r1, #0
    7912:	2400      	movs	r4, #0
    7914:	e67f      	b.n	7616 <__aeabi_dsub+0x182>
    7916:	4660      	mov	r0, ip
    7918:	3820      	subs	r0, #32
    791a:	1c1a      	adds	r2, r3, #0
    791c:	40c2      	lsrs	r2, r0
    791e:	4666      	mov	r6, ip
    7920:	1c10      	adds	r0, r2, #0
    7922:	2e20      	cmp	r6, #32
    7924:	d100      	bne.n	7928 <__aeabi_dsub+0x494>
    7926:	e0aa      	b.n	7a7e <__aeabi_dsub+0x5ea>
    7928:	2240      	movs	r2, #64	; 0x40
    792a:	1b92      	subs	r2, r2, r6
    792c:	4093      	lsls	r3, r2
    792e:	465a      	mov	r2, fp
    7930:	431a      	orrs	r2, r3
    7932:	1e53      	subs	r3, r2, #1
    7934:	419a      	sbcs	r2, r3
    7936:	4302      	orrs	r2, r0
    7938:	2300      	movs	r3, #0
    793a:	e6a6      	b.n	768a <__aeabi_dsub+0x1f6>
    793c:	4d6e      	ldr	r5, [pc, #440]	; (7af8 <__aeabi_dsub+0x664>)
    793e:	42a8      	cmp	r0, r5
    7940:	d000      	beq.n	7944 <__aeabi_dsub+0x4b0>
    7942:	e773      	b.n	782c <__aeabi_dsub+0x398>
    7944:	1c19      	adds	r1, r3, #0
    7946:	465c      	mov	r4, fp
    7948:	1c05      	adds	r5, r0, #0
    794a:	46e2      	mov	sl, ip
    794c:	e5d2      	b.n	74f4 <__aeabi_dsub+0x60>
    794e:	2d00      	cmp	r5, #0
    7950:	d122      	bne.n	7998 <__aeabi_dsub+0x504>
    7952:	1c0d      	adds	r5, r1, #0
    7954:	4325      	orrs	r5, r4
    7956:	d076      	beq.n	7a46 <__aeabi_dsub+0x5b2>
    7958:	43d5      	mvns	r5, r2
    795a:	2d00      	cmp	r5, #0
    795c:	d170      	bne.n	7a40 <__aeabi_dsub+0x5ac>
    795e:	445c      	add	r4, fp
    7960:	455c      	cmp	r4, fp
    7962:	4192      	sbcs	r2, r2
    7964:	1859      	adds	r1, r3, r1
    7966:	4252      	negs	r2, r2
    7968:	1889      	adds	r1, r1, r2
    796a:	1c05      	adds	r5, r0, #0
    796c:	e694      	b.n	7698 <__aeabi_dsub+0x204>
    796e:	2800      	cmp	r0, #0
    7970:	d14c      	bne.n	7a0c <__aeabi_dsub+0x578>
    7972:	4659      	mov	r1, fp
    7974:	4319      	orrs	r1, r3
    7976:	d100      	bne.n	797a <__aeabi_dsub+0x4e6>
    7978:	e648      	b.n	760c <__aeabi_dsub+0x178>
    797a:	1c19      	adds	r1, r3, #0
    797c:	465c      	mov	r4, fp
    797e:	46e2      	mov	sl, ip
    7980:	4d5d      	ldr	r5, [pc, #372]	; (7af8 <__aeabi_dsub+0x664>)
    7982:	e5b7      	b.n	74f4 <__aeabi_dsub+0x60>
    7984:	430c      	orrs	r4, r1
    7986:	1e61      	subs	r1, r4, #1
    7988:	418c      	sbcs	r4, r1
    798a:	b2e4      	uxtb	r4, r4
    798c:	2100      	movs	r1, #0
    798e:	e761      	b.n	7854 <__aeabi_dsub+0x3c0>
    7990:	1c05      	adds	r5, r0, #0
    7992:	2100      	movs	r1, #0
    7994:	2400      	movs	r4, #0
    7996:	e63e      	b.n	7616 <__aeabi_dsub+0x182>
    7998:	4d57      	ldr	r5, [pc, #348]	; (7af8 <__aeabi_dsub+0x664>)
    799a:	42a8      	cmp	r0, r5
    799c:	d053      	beq.n	7a46 <__aeabi_dsub+0x5b2>
    799e:	4255      	negs	r5, r2
    79a0:	2280      	movs	r2, #128	; 0x80
    79a2:	0416      	lsls	r6, r2, #16
    79a4:	4331      	orrs	r1, r6
    79a6:	2d38      	cmp	r5, #56	; 0x38
    79a8:	dc7b      	bgt.n	7aa2 <__aeabi_dsub+0x60e>
    79aa:	2d1f      	cmp	r5, #31
    79ac:	dd00      	ble.n	79b0 <__aeabi_dsub+0x51c>
    79ae:	e08c      	b.n	7aca <__aeabi_dsub+0x636>
    79b0:	2220      	movs	r2, #32
    79b2:	1b56      	subs	r6, r2, r5
    79b4:	1c0a      	adds	r2, r1, #0
    79b6:	46b4      	mov	ip, r6
    79b8:	40b2      	lsls	r2, r6
    79ba:	1c26      	adds	r6, r4, #0
    79bc:	40ee      	lsrs	r6, r5
    79be:	4332      	orrs	r2, r6
    79c0:	4690      	mov	r8, r2
    79c2:	4662      	mov	r2, ip
    79c4:	4094      	lsls	r4, r2
    79c6:	1e66      	subs	r6, r4, #1
    79c8:	41b4      	sbcs	r4, r6
    79ca:	4642      	mov	r2, r8
    79cc:	4314      	orrs	r4, r2
    79ce:	40e9      	lsrs	r1, r5
    79d0:	445c      	add	r4, fp
    79d2:	455c      	cmp	r4, fp
    79d4:	4192      	sbcs	r2, r2
    79d6:	18cb      	adds	r3, r1, r3
    79d8:	4252      	negs	r2, r2
    79da:	1899      	adds	r1, r3, r2
    79dc:	1c05      	adds	r5, r0, #0
    79de:	e65b      	b.n	7698 <__aeabi_dsub+0x204>
    79e0:	4658      	mov	r0, fp
    79e2:	4318      	orrs	r0, r3
    79e4:	d100      	bne.n	79e8 <__aeabi_dsub+0x554>
    79e6:	e585      	b.n	74f4 <__aeabi_dsub+0x60>
    79e8:	465e      	mov	r6, fp
    79ea:	1ba7      	subs	r7, r4, r6
    79ec:	42bc      	cmp	r4, r7
    79ee:	4192      	sbcs	r2, r2
    79f0:	1ac8      	subs	r0, r1, r3
    79f2:	4252      	negs	r2, r2
    79f4:	1a80      	subs	r0, r0, r2
    79f6:	0206      	lsls	r6, r0, #8
    79f8:	d560      	bpl.n	7abc <__aeabi_dsub+0x628>
    79fa:	4658      	mov	r0, fp
    79fc:	1b04      	subs	r4, r0, r4
    79fe:	45a3      	cmp	fp, r4
    7a00:	4192      	sbcs	r2, r2
    7a02:	1a59      	subs	r1, r3, r1
    7a04:	4252      	negs	r2, r2
    7a06:	1a89      	subs	r1, r1, r2
    7a08:	46e2      	mov	sl, ip
    7a0a:	e573      	b.n	74f4 <__aeabi_dsub+0x60>
    7a0c:	4658      	mov	r0, fp
    7a0e:	4318      	orrs	r0, r3
    7a10:	d033      	beq.n	7a7a <__aeabi_dsub+0x5e6>
    7a12:	0748      	lsls	r0, r1, #29
    7a14:	08e4      	lsrs	r4, r4, #3
    7a16:	4304      	orrs	r4, r0
    7a18:	2080      	movs	r0, #128	; 0x80
    7a1a:	08c9      	lsrs	r1, r1, #3
    7a1c:	0300      	lsls	r0, r0, #12
    7a1e:	4201      	tst	r1, r0
    7a20:	d008      	beq.n	7a34 <__aeabi_dsub+0x5a0>
    7a22:	08dd      	lsrs	r5, r3, #3
    7a24:	4205      	tst	r5, r0
    7a26:	d105      	bne.n	7a34 <__aeabi_dsub+0x5a0>
    7a28:	4659      	mov	r1, fp
    7a2a:	08ca      	lsrs	r2, r1, #3
    7a2c:	075c      	lsls	r4, r3, #29
    7a2e:	4314      	orrs	r4, r2
    7a30:	1c29      	adds	r1, r5, #0
    7a32:	46e2      	mov	sl, ip
    7a34:	0f63      	lsrs	r3, r4, #29
    7a36:	00c9      	lsls	r1, r1, #3
    7a38:	4319      	orrs	r1, r3
    7a3a:	00e4      	lsls	r4, r4, #3
    7a3c:	4d2e      	ldr	r5, [pc, #184]	; (7af8 <__aeabi_dsub+0x664>)
    7a3e:	e559      	b.n	74f4 <__aeabi_dsub+0x60>
    7a40:	4a2d      	ldr	r2, [pc, #180]	; (7af8 <__aeabi_dsub+0x664>)
    7a42:	4290      	cmp	r0, r2
    7a44:	d1af      	bne.n	79a6 <__aeabi_dsub+0x512>
    7a46:	1c19      	adds	r1, r3, #0
    7a48:	465c      	mov	r4, fp
    7a4a:	1c05      	adds	r5, r0, #0
    7a4c:	e552      	b.n	74f4 <__aeabi_dsub+0x60>
    7a4e:	2800      	cmp	r0, #0
    7a50:	d030      	beq.n	7ab4 <__aeabi_dsub+0x620>
    7a52:	4658      	mov	r0, fp
    7a54:	4318      	orrs	r0, r3
    7a56:	d010      	beq.n	7a7a <__aeabi_dsub+0x5e6>
    7a58:	2580      	movs	r5, #128	; 0x80
    7a5a:	0748      	lsls	r0, r1, #29
    7a5c:	08e4      	lsrs	r4, r4, #3
    7a5e:	08c9      	lsrs	r1, r1, #3
    7a60:	032d      	lsls	r5, r5, #12
    7a62:	4304      	orrs	r4, r0
    7a64:	4229      	tst	r1, r5
    7a66:	d0e5      	beq.n	7a34 <__aeabi_dsub+0x5a0>
    7a68:	08d8      	lsrs	r0, r3, #3
    7a6a:	4228      	tst	r0, r5
    7a6c:	d1e2      	bne.n	7a34 <__aeabi_dsub+0x5a0>
    7a6e:	465d      	mov	r5, fp
    7a70:	08ea      	lsrs	r2, r5, #3
    7a72:	075c      	lsls	r4, r3, #29
    7a74:	4314      	orrs	r4, r2
    7a76:	1c01      	adds	r1, r0, #0
    7a78:	e7dc      	b.n	7a34 <__aeabi_dsub+0x5a0>
    7a7a:	4d1f      	ldr	r5, [pc, #124]	; (7af8 <__aeabi_dsub+0x664>)
    7a7c:	e53a      	b.n	74f4 <__aeabi_dsub+0x60>
    7a7e:	2300      	movs	r3, #0
    7a80:	e755      	b.n	792e <__aeabi_dsub+0x49a>
    7a82:	1c3d      	adds	r5, r7, #0
    7a84:	3d20      	subs	r5, #32
    7a86:	1c0e      	adds	r6, r1, #0
    7a88:	40ee      	lsrs	r6, r5
    7a8a:	1c35      	adds	r5, r6, #0
    7a8c:	2f20      	cmp	r7, #32
    7a8e:	d02e      	beq.n	7aee <__aeabi_dsub+0x65a>
    7a90:	2640      	movs	r6, #64	; 0x40
    7a92:	1bf7      	subs	r7, r6, r7
    7a94:	40b9      	lsls	r1, r7
    7a96:	430c      	orrs	r4, r1
    7a98:	1e61      	subs	r1, r4, #1
    7a9a:	418c      	sbcs	r4, r1
    7a9c:	432c      	orrs	r4, r5
    7a9e:	2100      	movs	r1, #0
    7aa0:	e6d8      	b.n	7854 <__aeabi_dsub+0x3c0>
    7aa2:	430c      	orrs	r4, r1
    7aa4:	1e61      	subs	r1, r4, #1
    7aa6:	418c      	sbcs	r4, r1
    7aa8:	b2e4      	uxtb	r4, r4
    7aaa:	2100      	movs	r1, #0
    7aac:	e790      	b.n	79d0 <__aeabi_dsub+0x53c>
    7aae:	1c19      	adds	r1, r3, #0
    7ab0:	465c      	mov	r4, fp
    7ab2:	e51f      	b.n	74f4 <__aeabi_dsub+0x60>
    7ab4:	1c19      	adds	r1, r3, #0
    7ab6:	465c      	mov	r4, fp
    7ab8:	4d0f      	ldr	r5, [pc, #60]	; (7af8 <__aeabi_dsub+0x664>)
    7aba:	e51b      	b.n	74f4 <__aeabi_dsub+0x60>
    7abc:	1c03      	adds	r3, r0, #0
    7abe:	433b      	orrs	r3, r7
    7ac0:	d100      	bne.n	7ac4 <__aeabi_dsub+0x630>
    7ac2:	e724      	b.n	790e <__aeabi_dsub+0x47a>
    7ac4:	1c01      	adds	r1, r0, #0
    7ac6:	1c3c      	adds	r4, r7, #0
    7ac8:	e514      	b.n	74f4 <__aeabi_dsub+0x60>
    7aca:	2620      	movs	r6, #32
    7acc:	4276      	negs	r6, r6
    7ace:	1976      	adds	r6, r6, r5
    7ad0:	1c0a      	adds	r2, r1, #0
    7ad2:	40f2      	lsrs	r2, r6
    7ad4:	4690      	mov	r8, r2
    7ad6:	2d20      	cmp	r5, #32
    7ad8:	d00b      	beq.n	7af2 <__aeabi_dsub+0x65e>
    7ada:	2640      	movs	r6, #64	; 0x40
    7adc:	1b75      	subs	r5, r6, r5
    7ade:	40a9      	lsls	r1, r5
    7ae0:	430c      	orrs	r4, r1
    7ae2:	1e61      	subs	r1, r4, #1
    7ae4:	418c      	sbcs	r4, r1
    7ae6:	4645      	mov	r5, r8
    7ae8:	432c      	orrs	r4, r5
    7aea:	2100      	movs	r1, #0
    7aec:	e770      	b.n	79d0 <__aeabi_dsub+0x53c>
    7aee:	2100      	movs	r1, #0
    7af0:	e7d1      	b.n	7a96 <__aeabi_dsub+0x602>
    7af2:	2100      	movs	r1, #0
    7af4:	e7f4      	b.n	7ae0 <__aeabi_dsub+0x64c>
    7af6:	46c0      	nop			; (mov r8, r8)
    7af8:	000007ff 	.word	0x000007ff
    7afc:	ff7fffff 	.word	0xff7fffff

00007b00 <__aeabi_d2iz>:
    7b00:	b570      	push	{r4, r5, r6, lr}
    7b02:	1c0b      	adds	r3, r1, #0
    7b04:	4c12      	ldr	r4, [pc, #72]	; (7b50 <__aeabi_d2iz+0x50>)
    7b06:	0309      	lsls	r1, r1, #12
    7b08:	0b0e      	lsrs	r6, r1, #12
    7b0a:	0059      	lsls	r1, r3, #1
    7b0c:	1c02      	adds	r2, r0, #0
    7b0e:	0d49      	lsrs	r1, r1, #21
    7b10:	0fdd      	lsrs	r5, r3, #31
    7b12:	2000      	movs	r0, #0
    7b14:	42a1      	cmp	r1, r4
    7b16:	dd11      	ble.n	7b3c <__aeabi_d2iz+0x3c>
    7b18:	480e      	ldr	r0, [pc, #56]	; (7b54 <__aeabi_d2iz+0x54>)
    7b1a:	4281      	cmp	r1, r0
    7b1c:	dc0f      	bgt.n	7b3e <__aeabi_d2iz+0x3e>
    7b1e:	2080      	movs	r0, #128	; 0x80
    7b20:	0340      	lsls	r0, r0, #13
    7b22:	4306      	orrs	r6, r0
    7b24:	480c      	ldr	r0, [pc, #48]	; (7b58 <__aeabi_d2iz+0x58>)
    7b26:	1a40      	subs	r0, r0, r1
    7b28:	281f      	cmp	r0, #31
    7b2a:	dd0b      	ble.n	7b44 <__aeabi_d2iz+0x44>
    7b2c:	4a0b      	ldr	r2, [pc, #44]	; (7b5c <__aeabi_d2iz+0x5c>)
    7b2e:	1a52      	subs	r2, r2, r1
    7b30:	40d6      	lsrs	r6, r2
    7b32:	1c32      	adds	r2, r6, #0
    7b34:	4250      	negs	r0, r2
    7b36:	2d00      	cmp	r5, #0
    7b38:	d100      	bne.n	7b3c <__aeabi_d2iz+0x3c>
    7b3a:	1c10      	adds	r0, r2, #0
    7b3c:	bd70      	pop	{r4, r5, r6, pc}
    7b3e:	4b08      	ldr	r3, [pc, #32]	; (7b60 <__aeabi_d2iz+0x60>)
    7b40:	18e8      	adds	r0, r5, r3
    7b42:	e7fb      	b.n	7b3c <__aeabi_d2iz+0x3c>
    7b44:	4b07      	ldr	r3, [pc, #28]	; (7b64 <__aeabi_d2iz+0x64>)
    7b46:	40c2      	lsrs	r2, r0
    7b48:	18c9      	adds	r1, r1, r3
    7b4a:	408e      	lsls	r6, r1
    7b4c:	4332      	orrs	r2, r6
    7b4e:	e7f1      	b.n	7b34 <__aeabi_d2iz+0x34>
    7b50:	000003fe 	.word	0x000003fe
    7b54:	0000041d 	.word	0x0000041d
    7b58:	00000433 	.word	0x00000433
    7b5c:	00000413 	.word	0x00000413
    7b60:	7fffffff 	.word	0x7fffffff
    7b64:	fffffbed 	.word	0xfffffbed

00007b68 <__aeabi_ui2d>:
    7b68:	b510      	push	{r4, lr}
    7b6a:	1e04      	subs	r4, r0, #0
    7b6c:	d028      	beq.n	7bc0 <__aeabi_ui2d+0x58>
    7b6e:	f7fb f849 	bl	2c04 <__clzsi2>
    7b72:	4a15      	ldr	r2, [pc, #84]	; (7bc8 <__aeabi_ui2d+0x60>)
    7b74:	1a12      	subs	r2, r2, r0
    7b76:	280a      	cmp	r0, #10
    7b78:	dd15      	ble.n	7ba6 <__aeabi_ui2d+0x3e>
    7b7a:	380b      	subs	r0, #11
    7b7c:	4084      	lsls	r4, r0
    7b7e:	0324      	lsls	r4, r4, #12
    7b80:	0552      	lsls	r2, r2, #21
    7b82:	0b24      	lsrs	r4, r4, #12
    7b84:	0d52      	lsrs	r2, r2, #21
    7b86:	2300      	movs	r3, #0
    7b88:	2000      	movs	r0, #0
    7b8a:	2100      	movs	r1, #0
    7b8c:	0324      	lsls	r4, r4, #12
    7b8e:	1c18      	adds	r0, r3, #0
    7b90:	0d0b      	lsrs	r3, r1, #20
    7b92:	0b24      	lsrs	r4, r4, #12
    7b94:	051b      	lsls	r3, r3, #20
    7b96:	4323      	orrs	r3, r4
    7b98:	4c0c      	ldr	r4, [pc, #48]	; (7bcc <__aeabi_ui2d+0x64>)
    7b9a:	0512      	lsls	r2, r2, #20
    7b9c:	401c      	ands	r4, r3
    7b9e:	4314      	orrs	r4, r2
    7ba0:	0064      	lsls	r4, r4, #1
    7ba2:	0861      	lsrs	r1, r4, #1
    7ba4:	bd10      	pop	{r4, pc}
    7ba6:	1c03      	adds	r3, r0, #0
    7ba8:	3315      	adds	r3, #21
    7baa:	1c21      	adds	r1, r4, #0
    7bac:	4099      	lsls	r1, r3
    7bae:	1c0b      	adds	r3, r1, #0
    7bb0:	210b      	movs	r1, #11
    7bb2:	1a08      	subs	r0, r1, r0
    7bb4:	40c4      	lsrs	r4, r0
    7bb6:	0324      	lsls	r4, r4, #12
    7bb8:	0552      	lsls	r2, r2, #21
    7bba:	0b24      	lsrs	r4, r4, #12
    7bbc:	0d52      	lsrs	r2, r2, #21
    7bbe:	e7e3      	b.n	7b88 <__aeabi_ui2d+0x20>
    7bc0:	2200      	movs	r2, #0
    7bc2:	2400      	movs	r4, #0
    7bc4:	2300      	movs	r3, #0
    7bc6:	e7df      	b.n	7b88 <__aeabi_ui2d+0x20>
    7bc8:	0000041e 	.word	0x0000041e
    7bcc:	800fffff 	.word	0x800fffff
    7bd0:	42000800 	.word	0x42000800
    7bd4:	42000c00 	.word	0x42000c00
    7bd8:	42001000 	.word	0x42001000
    7bdc:	42001400 	.word	0x42001400
    7be0:	42001800 	.word	0x42001800
    7be4:	42001c00 	.word	0x42001c00
    7be8:	0a090807 	.word	0x0a090807
    7bec:	00000c0b 	.word	0x00000c0b
    7bf0:	00001318 	.word	0x00001318
    7bf4:	00001362 	.word	0x00001362
    7bf8:	00001362 	.word	0x00001362
    7bfc:	00001312 	.word	0x00001312
    7c00:	00001312 	.word	0x00001312
    7c04:	0000132e 	.word	0x0000132e
    7c08:	0000131e 	.word	0x0000131e
    7c0c:	00001334 	.word	0x00001334
    7c10:	000013ec 	.word	0x000013ec
    7c14:	00001440 	.word	0x00001440
    7c18:	00001440 	.word	0x00001440
    7c1c:	000013cc 	.word	0x000013cc
    7c20:	000013de 	.word	0x000013de
    7c24:	000013fc 	.word	0x000013fc
    7c28:	000013d0 	.word	0x000013d0
    7c2c:	0000140c 	.word	0x0000140c
    7c30:	706d6554 	.word	0x706d6554
    7c34:	74617265 	.word	0x74617265
    7c38:	20657275 	.word	0x20657275
    7c3c:	6625203d 	.word	0x6625203d
    7c40:	000a0d20 	.word	0x000a0d20
    7c44:	73696854 	.word	0x73696854
    7c48:	20736920 	.word	0x20736920
    7c4c:	20656874 	.word	0x20656874
    7c50:	444d4153 	.word	0x444d4153
    7c54:	77203032 	.word	0x77203032
    7c58:	20687469 	.word	0x20687469
    7c5c:	72756f79 	.word	0x72756f79
    7c60:	6d655420 	.word	0x6d655420
    7c64:	65722070 	.word	0x65722070
    7c68:	6e696461 	.word	0x6e696461
    7c6c:	0d217367 	.word	0x0d217367
    7c70:	0000000a 	.word	0x0000000a
    7c74:	0000284c 	.word	0x0000284c
    7c78:	00002a3a 	.word	0x00002a3a
    7c7c:	00002a3a 	.word	0x00002a3a
    7c80:	0000282a 	.word	0x0000282a
    7c84:	00002712 	.word	0x00002712
    7c88:	00002712 	.word	0x00002712
    7c8c:	0000281a 	.word	0x0000281a
    7c90:	0000282a 	.word	0x0000282a
    7c94:	00002712 	.word	0x00002712
    7c98:	0000281a 	.word	0x0000281a
    7c9c:	00002712 	.word	0x00002712
    7ca0:	0000282a 	.word	0x0000282a
    7ca4:	00002710 	.word	0x00002710
    7ca8:	00002710 	.word	0x00002710
    7cac:	00002710 	.word	0x00002710
    7cb0:	00002a42 	.word	0x00002a42

00007cb4 <_global_impure_ptr>:
    7cb4:	20000010 20200043                                ... C.

00007cba <blanks.6743>:
    7cba:	20202020 20202020 20202020 20202020                     

00007cca <zeroes.6744>:
    7cca:	30303030 30303030 30303030 30303030     0000000000000000
    7cda:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
    7cea:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    7cfa:	32313000 36353433 61393837 65646362     .0123456789abcde
    7d0a:	00300066 69666e49 7974696e 4e614e00     f.0.Infinity.NaN
    7d1a:	534f5000 2e005849 00000000 00050000              .POSIX........

00007d28 <p05.5289>:
    7d28:	00000005 00000019 0000007d 00000000     ........}.......

00007d38 <__mprec_tens>:
    7d38:	00000000 3ff00000 00000000 40240000     .......?......$@
    7d48:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    7d58:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    7d68:	00000000 412e8480 00000000 416312d0     .......A......cA
    7d78:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    7d88:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    7d98:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    7da8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    7db8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    7dc8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    7dd8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    7de8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    7df8:	79d99db4 44ea7843                       ...yCx.D

00007e00 <__mprec_tinytens>:
    7e00:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    7e10:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    7e20:	64ac6f43 0ac80628                       Co.d(...

00007e28 <__mprec_bigtens>:
    7e28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    7e38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    7e48:	7f73bf3c 75154fdd                       <.s..O.u

00007e50 <blanks.6687>:
    7e50:	20202020 20202020 20202020 20202020                     

00007e60 <zeroes.6688>:
    7e60:	30303030 30303030 30303030 30303030     0000000000000000
    7e70:	00007034 00006fc8 00007012 00006ef6     4p...o...p...n..
    7e80:	00007012 00007004 00007012 00006ef6     .p...p...p...n..
    7e90:	00006fc8 00006fc8 00007004 00006ef6     .o...o...p...n..
    7ea0:	00006eec 00006eec 00006eec 00007258     .n...n...n..Xr..

00007eb0 <_init>:
    7eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eb2:	46c0      	nop			; (mov r8, r8)
    7eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7eb6:	bc08      	pop	{r3}
    7eb8:	469e      	mov	lr, r3
    7eba:	4770      	bx	lr

00007ebc <__init_array_start>:
    7ebc:	0000449d 	.word	0x0000449d

00007ec0 <__frame_dummy_init_array_entry>:
    7ec0:	00000125                                %...

00007ec4 <_fini>:
    7ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ec6:	46c0      	nop			; (mov r8, r8)
    7ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7eca:	bc08      	pop	{r3}
    7ecc:	469e      	mov	lr, r3
    7ece:	4770      	bx	lr

00007ed0 <__fini_array_start>:
    7ed0:	000000f9 	.word	0x000000f9
